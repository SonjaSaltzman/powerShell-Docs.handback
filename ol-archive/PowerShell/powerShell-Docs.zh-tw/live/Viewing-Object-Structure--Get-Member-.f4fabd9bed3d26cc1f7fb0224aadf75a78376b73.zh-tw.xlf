<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acd52c1271013320dafa7f7bf5c72b752e07574b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\cookbooks\Viewing-Object-Structure--Get-Member-.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd3f095c1439375e778e99abbf2866290832c062</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f295fb56fbbda19bf6f6ee41e25a07001610444f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Viewing Object Structure  Get Member</source>
          <target state="translated">檢視物件結構 Get Member</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell,cmdlet</source>
          <target state="translated">powershell,cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Viewing Object Structure (Get-Member)</source>
          <target state="translated">檢視物件結構 (Get-Member)</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Because objects play such a central role in Windows PowerShell, there are several native commands designed to work with arbitrary object types.</source>
          <target state="translated">因為物件在 Windows PowerShell 中播放這類重要角色，所以有數個設計成使用任意物件類型的原生命令。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The most important one is the <bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> command.</source>
          <target state="translated">最重要的是 <bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> 命令。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The simplest technique for analyzing the objects that a command returns is to pipe the output of that command to the <bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">分析命令所傳回物件的最簡單技巧是將該命令的輸出傳送到 <bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> Cmdlet。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> cmdlet shows you the formal name of the object type and a complete listing of its members.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> Cmdlet 顯示物件類型的正式名稱以及其成員的完整清單。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The number of elements that are returned can sometimes be overwhelming.</source>
          <target state="translated">所傳回元素的數目有時可能非常龐大。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, a process object can have over 100 members.</source>
          <target state="translated">例如，Process 物件可以有 100 位以上的成員。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To see all the members of a Process object and page the output so you can view all of it, type:</source>
          <target state="translated">若要查看 Process 物件的所有成員，並將輸出分頁，以檢視其所有內容，請輸入︰</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The output from this command will look something like this:</source>
          <target state="translated">此命令的輸出看起來如下︰</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>We can make this long list of information more usable by filtering for elements we want to see.</source>
          <target state="translated">我們可以篩選想要查看的元素，以讓這份長資訊清單更為有用。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> command lets you list only members that are properties.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> 命令可讓您只列出為屬性的成員。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>There are several forms of properties.</source>
          <target state="translated">有數種形式的屬性。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The cmdlet displays properties of any type if we set the <bpt id="p1">**</bpt>Get-MemberMemberType<ept id="p1">**</ept> parameter to the value <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept>.</source>
          <target state="translated">如果我們將 <bpt id="p1">**</bpt>Get-MemberMemberType<ept id="p1">**</ept> 參數設為值 <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept>，這個 Cmdlet 會顯示任何類型的屬性。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The resulting list is still very long, but a bit more manageable:</source>
          <target state="translated">產生的清單仍然很長，但更容易管理︰</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The allowed values of MemberType are AliasProperty, CodeProperty, Property, NoteProperty, ScriptProperty, Properties, PropertySet, Method, CodeMethod, ScriptMethod, Methods, ParameterizedProperty, MemberSet, and All.</source>
          <target state="translated">MemberType 的允許值是 AliasProperty、CodeProperty、Property、NoteProperty、ScriptProperty、Properties、PropertySet、Method、CodeMethod、ScriptMethod、Methods、ParameterizedProperty、MemberSet 和 All。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>There are over 60 properties for a process.</source>
          <target state="translated">處理序有 60 個以上的屬性。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The reason Windows PowerShell often shows only a handful of properties for any well-known object is that showing all of them would produce an unmanageable amount of information.</source>
          <target state="translated">Windows PowerShell 通常僅顯示任何已知物件之少數屬性的原因，在於顯示其所有項目將會產生無法管理的資訊量。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Windows PowerShell determines how to display an object type by using information stored in XML files that have names ending in .format.ps1xml.</source>
          <target state="translated">Windows PowerShell 使用名稱結尾為 .format.ps1xml 的 XML 檔案中所儲存的資訊，來決定如何顯示物件類型。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The formatting data for process objects, which are .NET System.Diagnostics.Process objects, is stored in PowerShellCore.format.ps1xml.</source>
          <target state="translated">Process 物件 (即 .NET System.Diagnostics.Process 物件) 的格式資料儲存在 PowerShellCore.format.ps1xml 中。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you need to look at properties other than those that Windows PowerShell displays by default, you will need to format the output data yourself.</source>
          <target state="translated">如果您需要查看 Windows PowerShell 預設所顯示屬性以外的屬性，則需要自行格式化輸出資料。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This can be done by using the format cmdlets.</source>
          <target state="translated">使用格式 Cmdlet 來完成這個動作。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>