<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e354f90592fe25fb1fdbc65b6f379a7888491dc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Trap.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">25a2b14cceeba975a9ba56b2ac74f201dde9a541</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d1f7251f91415e5add590eeb0192550614f2d8f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Trap</source>
          <target state="translated">about_Trap</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">PowerShell-Cmdlets</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Trap</source>
          <target state="translated">Über Trap</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Trap</source>
          <target state="translated">about_Trap</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Trap</source>
          <target state="translated">about_Trap</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">KURZE BESCHREIBUNG</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes a keyword that handles a terminating error.</source>
          <target state="translated">Beschreibt ein Schlüsselwort, das einen Fehler mit Abbruch behandelt.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">LANGE BESCHREIBUNG</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A terminating error stops a statement from running.</source>
          <target state="translated">Ein Fehler mit Abbruch beendet eine Anweisung ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If  Windows PowerShell� does not handle a terminating error in some way,  Windows PowerShell also stops running the function or script in the current pipeline.</source>
          <target state="translated">Wenn einen Fehler mit Abbruch in irgendeiner Form von Windows PowerShell nicht behandelt wird, beendet Windows PowerShell auch die Funktion oder das Skript in die aktuelle Pipeline ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In other languages, such as C<ph id="ph1">\#</ph>, terminating errors are referred to as exceptions.</source>
          <target state="translated">In anderen Sprachen wie C#<ph id="ph1">\#</ph>, Fehler mit Abbruch werden als Ausnahmen bezeichnet.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The Trap keyword specifies a list of statements to run when a terminating error occurs.</source>
          <target state="translated">Das Trap-Schlüsselwort Gibt eine Liste von Anweisungen, die ausgeführt werden, wenn ein Fehler mit Abbruch auftritt.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Trap statements handle the terminating errors and allow execution of the script or function to continue instead of stopping.</source>
          <target state="translated">Trap-Anweisungen Behandeln der Fehler mit Abbruch und Ausführung des Skripts oder der Funktion fortgesetzt und nicht beendet.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">SYNTAX</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The Trap statement has the following syntax:</source>
          <target state="translated">Die Trap-Anweisung hat die folgende Syntax:</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The Trap statement includes a list of statements to run when a terminating error occurs.</source>
          <target state="translated">Die Trap-Anweisung enthält eine Liste von Anweisungen, die ausgeführt werden, wenn ein Fehler mit Abbruch auftritt.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The Trap keyword can optionally specify an error type.</source>
          <target state="translated">Das Trap-Schlüsselwort kann optional einen Fehlertyp angeben.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An error type requires brackets.</source>
          <target state="translated">Ein Fehlertyp erfordert Klammern.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A script or command can have multiple Trap statements.</source>
          <target state="translated">Ein Skript oder Befehl kann mehrere Trap-Anweisungen verfügen.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Trap statements can appear anywhere in the script or command.</source>
          <target state="translated">Trap-Anweisung können überall in Skripts oder Befehls angezeigt werden.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>TRAPPING ALL TERMINATING ERRORS</source>
          <target state="translated">ALLE FEHLER MIT ABBRUCH ABFANGEN</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When a terminating error occurs that is not handled in another way in a script or command,  Windows PowerShell checks for a Trap statement that handles the error.</source>
          <target state="translated">Tritt ein Fehler mit Abbruch, die nicht auf andere Weise in einem Skript oder Befehl verarbeitet wird, überprüft Windows PowerShell eine Trap-Anweisung, die den Fehler behandelt.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If a Trap statement is present,  Windows PowerShell continues running the script or command in the Trap statement.</source>
          <target state="translated">Wenn eine Trap-Anweisung vorhanden ist, wird Windows PowerShell Skripts oder Befehls in der Trap-Anweisung wird fortgesetzt.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example is a very simple Trap statement:</source>
          <target state="translated">Im folgende Beispiel wird eine sehr einfache Trap-Anweisung:</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This Trap statement traps any terminating error.</source>
          <target state="translated">Dieses Trap-Anweisung fängt alle Fehler mit Abbruch.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example is a function that contains this Trap statement:</source>
          <target state="translated">Im folgende Beispiel wird eine Funktion, die diese Trap-Anweisung enthält:</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This function includes a nonsense string that causes an error.</source>
          <target state="translated">Diese Funktion umfasst eine unsinnige-Zeichenfolge, die einen Fehler verursacht hat.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Running this function returns the following:</source>
          <target state="translated">Beim Ausführen der Funktion gibt Folgendes zurück:</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example includes a Trap statement that displays the error by using the $_ automatic variable:</source>
          <target state="translated">Das folgende Beispiel schließt eine Trap-Anweisung, die den Fehler anzeigt, die automatische $_-Variable mit:</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Running this version of the function returns the following:</source>
          <target state="translated">Mit dieser Version der Funktion gibt Folgendes zurück:</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Trap statements can also be more complex.</source>
          <target state="translated">Trap-Anweisung können auch komplexer sein.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A Trap statement can include multiple conditions or function calls.</source>
          <target state="translated">Eine Trap-Anweisung kann mehrere Bedingungen oder Funktionsaufrufe enthalten.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It can log, test, or even run another program.</source>
          <target state="translated">Melden Sie sich können, testen oder sogar ein anderes Programm ausführen.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>TRAPPING SPECIFIED TERMINATING ERRORS</source>
          <target state="translated">AUFFANGEN VON ANGEGEBENEN FEHLER MIT ABBRUCH</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following example is a Trap statement that traps the CommandNotFoundException error type:</source>
          <target state="translated">Im folgende Beispiel wird eine Trap-Anweisung, die den Fehlertyp CommandNotFoundException aufruft:</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When a function or script encounters a string that does not match a known command, this Trap statement displays the "Command error trapped" string.</source>
          <target state="translated">Trifft eine Funktion oder ein Skript eine Zeichenfolge, die einen bekannten Befehl nicht übereinstimmen, zeigt dieser Trap-Anweisung die Zeichenfolge "Befehlsfehler aufgefangen".</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>After running any statements in the Trap statement list,  Windows PowerShell writes the error object to the error stream and then continues the script.</source>
          <target state="translated">Nach dem Ausführen einer der Anweisungen in der Liste der Trap-Anweisung, wird Windows PowerShell das Fehlerobjekt, das in den fehlerdatenstrom geschrieben und setzt das Skript.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Windows PowerShell uses the Microsoft .NET Framework exception types.</source>
          <target state="translated">Windows PowerShell verwendet die Microsoft .NET Framework-Ausnahmetypen.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example specifies the System.Exception error type:</source>
          <target state="translated">Im folgenden Beispiel wird den Fehlertyp System.Exception:</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The CommandNotFoundException error type inherits from the System.Exception type.</source>
          <target state="translated">Der Fehlertyp CommandNotFoundException erbt von der System.Exception-Typ.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This statement traps an error that is created by an unknown command.</source>
          <target state="translated">Diese Anweisung führt einen Fehler, der von einem unbekannten Befehl erstellt wird.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It also traps other error types.</source>
          <target state="translated">Außerdem fängt es andere Fehlertypen.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can have more than one Trap statement in a script.</source>
          <target state="translated">Sie können mehr als eine Trap-Anweisung in einem Skript verwenden.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each error can be trapped by only one Trap statement.</source>
          <target state="translated">Jeder Fehler kann nur eine Trap-Anweisung aufgefangen werden.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If an error occurs, and more than one Trap statement is available,  Windows PowerShell uses the Trap statement with the most specific error type that matches the error.</source>
          <target state="translated">Wenn ein Fehler auftritt, und mehr als eine Trap-Anweisung verfügbar ist, verwendet Windows PowerShell die Trap-Anweisung mit dem spezifischen Fehlertyp, der den Fehler entspricht.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following script example contains an error.</source>
          <target state="translated">Das folgende Skript-Beispiel enthält einen Fehler.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The script includes a general Trap statement that traps any terminating error and a specific Trap statement that specifies the CommandNotFoundException type.</source>
          <target state="translated">Das Skript enthält eine allgemeine Trap-Anweisung, die alle Fehler mit Abbruch aufruft und eine bestimmte Trap-Anweisung, die der den CommandNotFoundException angibt.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Running this script produces the following result:</source>
          <target state="translated">Dieses Skript ausführen, liefert das folgende Ergebnis:</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Because  Windows PowerShell does not recognize "nonsenseString" as a cmdlet or other item, it returns a CommandNotFoundException error.</source>
          <target state="translated">Da Windows PowerShell "NonsenseString" nicht als ein Cmdlet oder ein anderes Element erkannt wird, wird einen CommandNotFoundException-Fehler zurückgegeben.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This terminating error is trapped by the specific Trap statement.</source>
          <target state="translated">Dieser Fehler mit Abbruch wird vom jeweiligen Trap-Anweisung aufgefangen.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following script example contains the same Trap statements with a different error:</source>
          <target state="translated">Das folgende Skriptbeispiel enthält die gleichen Trap-Anweisungen mit anderer Fehlermeldung:</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Running this script produces the following result:</source>
          <target state="translated">Dieses Skript ausführen, liefert das folgende Ergebnis:</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The attempt to divide by zero does not create a CommandNotFoundException error.</source>
          <target state="translated">Der Versuch, eine Division durch 0 (null) wird einen Fehler CommandNotFoundException nicht erstellt werden.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Instead, that error is trapped by the other Trap statement, which traps any terminating error.</source>
          <target state="translated">Stattdessen wird dieser Fehler durch die anderen Trap-Anweisung aufgefangen, die alle Fehler mit Abbruch traps.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>TRAPPING ERRORS AND SCOPE</source>
          <target state="translated">AUFFANGEN VON FEHLERN UND BEREICH</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If a terminating error occurs in the same scope as the Trap statement, after running the Trap statements,  Windows PowerShell continues at the statement after the error.</source>
          <target state="translated">Im selben Bereich wie die Trap-Anweisung nach der Trap-Anweisungen ausgeführt werden, tritt ein Fehler mit Abbruch wird Windows PowerShell mit der Anweisung nach dem Fehler fortgesetzt.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the Trap statement is in a different scope from the error, execution continues at the next statement that is in the same scope as the Trap statement.</source>
          <target state="translated">Ist die Trap-Anweisung in einem anderen Bereich des Fehlers, wird die Ausführung bei der nächsten Anweisung, die im selben Bereich wie die Trap-Anweisung wird fortgesetzt.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For instance, if an error occurs in a function, and the Trap statement is in the function, the script continues at the next statement.</source>
          <target state="translated">Beispielsweise wird fortgesetzt, wenn in einer Funktion ein Fehler auftritt und die Trap-Anweisung in der Funktion ist, das Skript bei der nächsten Anweisung.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, the following script contains an error and a Trap statement:</source>
          <target state="translated">Beispielsweise enthält das folgende Skript ein Fehler auftritt und eine Trap-Anweisung:</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Later in the script, running the Function1 function produces the following result:</source>
          <target state="translated">Beim Ausführen der Funktion Funktion1 später im Skript liefert das folgende Ergebnis:</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The Trap statement in the function traps the error.</source>
          <target state="translated">Die Trap-Anweisung in der Funktion der Fehler abgefangen.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>After displaying the message,  Windows PowerShell resumes running the function.</source>
          <target state="translated">Nach der Anzeige der Meldung, Windows PowerShell mit der Funktion fortgesetzt wird.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Note that Function1 was completed.</source>
          <target state="translated">Beachten Sie, dass Funktion1 abgeschlossen wurde.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Compare this with the following example, which has the same error and Trap statement.</source>
          <target state="translated">Vergleichen Sie dies mit dem folgenden Beispiel, das den gleichen Fehler und Trap-Anweisung hat.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In this example, the Trap statement occurs outside the function:</source>
          <target state="translated">In diesem Beispiel tritt auf, die Trap-Anweisung außerhalb der Funktion:</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Later in the script, running the Function2 function produces the following result:</source>
          <target state="translated">Beim Ausführen der Funktion Funktion2 später im Skript liefert das folgende Ergebnis:</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In this example, the "function2 was completed" command was not run.</source>
          <target state="translated">In diesem Beispiel wird der Befehl "Funktion2 wurde abgeschlossen" wurde nicht ausgeführt.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Although both terminating errors occur within a function, if the Trap statement is outside the function,  Windows PowerShell does not go back into the function after the Trap statement runs.</source>
          <target state="translated">Obwohl beide Fehler mit Abbruch innerhalb einer Funktion auftreten, wenn die Trap-Anweisung außerhalb der Funktion, geht Windows PowerShell zurück in die Funktion nicht nach die Trap-Anweisung ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>USING THE BREAK AND CONTINUE KEYWORDS</source>
          <target state="translated">VERWENDEN SIE DIE BREAK UND CONTINUE-SCHLÜSSELWÖRTER</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can use the Break and Continue keywords in a Trap statement to determine whether a script or command continues to run after a terminating error.</source>
          <target state="translated">Sie können die Unterbrechung verwenden und Schlüsselwörter in eine Trap-Anweisung, um zu bestimmen, ob ein Skript oder Befehl fortgesetzt wird, die nach einem Fehler mit Abbruch ausgeführt.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If you include a Break statement in a Trap statement list,  Windows PowerShell stops the function or script.</source>
          <target state="translated">Wenn Sie eine Break-Anweisung in einer Liste der Trap-Anweisung einschließen, wird Windows PowerShell die Funktion oder das Skript beendet.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following sample function uses the Break keyword in a Trap statement:</source>
          <target state="translated">Die folgende Beispielfunktion verwendet das Schlüsselwort "Break" in eine Trap-Anweisung:</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Because the Trap statement included the Break keyword, the function does not continue to run, and the "Function completed" line is not run.</source>
          <target state="translated">Da die Trap-Anweisung das Schlüsselwort "Break" enthalten, die Funktion nicht weiter ausgeführt, und die Zeile "Funktion" abgeschlossen"wird nicht ausgeführt.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If you include a Continue statement in a Trap statement,  Windows PowerShell resumes after the statement that caused the error, just as it would without Break or Continue.</source>
          <target state="translated">Wenn Sie eine Continue-Anweisung in eine Trap-Anweisung einschließen, fortgesetzt Windows PowerShell nach der Anweisung, die den Fehler verursacht hat, genau wie bei ohne unterbrechen oder fortsetzen.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>With the Continue keyword, however,  Windows PowerShell does not write an error to the error stream.</source>
          <target state="translated">Mit dem Schlüsselwort Continue jedoch schreibt Windows PowerShell einen Fehler in den fehlerdatenstrom nicht.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following sample function uses the Continue keyword in a Trap statement:</source>
          <target state="translated">Die folgende Beispielfunktion verwendet das Continue-Schlüsselwort in eine Trap-Anweisung:</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The function resumes after the error is trapped, and the "Function completed" statement runs.</source>
          <target state="translated">Die Funktion wird fortgesetzt, wenn der Fehler abgefangen, und die "Funktion abgeschlossen"-Anweisung ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>No error is written to the error stream.</source>
          <target state="translated">Keine Fehler in den fehlerdatenstrom geschrieben.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">SIEHE AUCH</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>about_Break</source>
          <target state="translated">about_Break</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>about_Continue</source>
          <target state="translated">about_Continue</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>about_Scopes</source>
          <target state="translated">about_Scopes</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>about_Throw</source>
          <target state="translated">about_Throw</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>about_Try_Catch_Finally</source>
          <target state="translated">about_Try_Catch_Finally</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>