<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">128b330f029b09d6d15ebc5a1cda9c52bf275293</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\ForEach-Object.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">879467f5044fb17e5a8f5454d8866973d9eb2aff</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6c78fd8c27534de8e0cc7bbe70b148ad56501c1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell コマンドレット</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ForEach-Object</source>
          <target state="translated">ForEach-Object</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ForEach-Object</source>
          <target state="translated">ForEach-Object</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Performs an operation against each item in a collection of input objects.</source>
          <target state="translated">入力オブジェクトのコレクション内の各項目に対して操作を実行します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">構文</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>ScriptBlockSet (Default)</source>
          <target state="translated">ScriptBlockSet (既定値)</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>PropertyAndMethodSet</source>
          <target state="translated">PropertyAndMethodSet</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ForEach-Object<ept id="p1">**</ept> cmdlet performs an operation on each item in a collection of input objects.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Foreach-object<ept id="p1">**</ept> コマンドレットは、入力オブジェクトのコレクション内の各アイテムに対して操作を実行します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The input objects can be piped to the cmdlet or specified by using the <bpt id="p1">*</bpt>InputObject<ept id="p1">*</ept> parameter.</source>
          <target state="translated">入力オブジェクトをコマンドレットにパイプまたはを使用して指定されている、 <bpt id="p1">*</bpt>InputObject<ept id="p1">*</ept> パラメーター。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Starting in Windows PowerShell 3.0, there are two different ways to construct a <bpt id="p1">**</bpt>ForEach-Object<ept id="p1">**</ept> command.</source>
          <target state="translated">Windows PowerShell 3.0 以降は、作成する 2 つの方法がある、 <bpt id="p1">**</bpt>Foreach-object<ept id="p1">**</ept> コマンドです。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Script block<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>スクリプト ブロック<ept id="p1">**</ept>します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can use a script block to specify the operation.</source>
          <target state="translated">スクリプト ブロックを使用して、操作を指定することができます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Within the script block, use the $_ variable to represent the current object.</source>
          <target state="translated">スクリプト ブロック内では、現在のオブジェクトを表すために、$_ 変数を使用します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The script block is the value of the <bpt id="p1">*</bpt>Process<ept id="p1">*</ept> parameter.</source>
          <target state="translated">スクリプト ブロックの値とは、 <bpt id="p1">*</bpt>プロセス<ept id="p1">*</ept> パラメーター。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The script block can contain any Windows PowerShell script.</source>
          <target state="translated">スクリプト ブロックは、Windows PowerShell スクリプトを含むことができます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, the following command gets the value of the <bpt id="p1">**</bpt>ProcessName<ept id="p1">**</ept> property of each process on the computer.</source>
          <target state="translated">次のコマンドでの値を取得するなど、 <bpt id="p1">**</bpt>ProcessName<ept id="p1">**</ept> コンピューター上の各プロセスのプロパティです。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Operation statement<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>操作のステートメント<ept id="p1">**</ept>します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can also write an operation statement, which is much more like natural language.</source>
          <target state="translated">自然言語のような操作のステートメントを記述することもできます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can use the operation statement to specify a property value or call a method.</source>
          <target state="translated">操作のステートメントを使用してプロパティの値を指定することも、メソッドを呼び出すこともできます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Operation statements were introduced in Windows PowerShell 3.0.</source>
          <target state="translated">操作のステートメントは、Windows PowerShell 3.0 で導入されました。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, the following command also gets the value of the <bpt id="p1">**</bpt>ProcessName<ept id="p1">**</ept> property of each process on the computer.</source>
          <target state="translated">たとえば、次のコマンドの値を取得、 <bpt id="p1">**</bpt>ProcessName<ept id="p1">**</ept> コンピューター上の各プロセスのプロパティです。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When using the script block format, in addition to using the script block that describes the operations that are performed on each input object, you can provide two additional script blocks.</source>
          <target state="translated">スクリプト ブロック形式を使用すると、各入力オブジェクトに対して実行される操作を記述したスクリプト ブロックを使用するだけでなく、追加スクリプト ブロックを 2 つ指定できます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The Begin script block, which is the value of the <bpt id="p1">*</bpt>Begin<ept id="p1">*</ept> parameter, runs before this cmdlet processes the first input object.</source>
          <target state="translated">Begin スクリプト ブロックの値である、 <bpt id="p1">*</bpt>開始<ept id="p1">*</ept> パラメーターは、このコマンドレットは、最初の入力オブジェクトを処理する前に実行します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The End script block, which is the value of the <bpt id="p1">*</bpt>End<ept id="p1">*</ept> parameter, runs after this cmdlet processes the last input object.</source>
          <target state="translated">End スクリプト ブロックの値である、 <bpt id="p1">*</bpt>エンド<ept id="p1">*</ept> パラメーターでは、このコマンドレットは、最後の入力オブジェクトを処理した後で実行します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Example 1: Divide integers in an array</source>
          <target state="translated">例 1: 配列内の整数を除算します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This command takes an array of three integers and divides each one of them by 1024.</source>
          <target state="translated">このコマンドは、3 つの整数の配列を受け取り、各整数を 1,024 で除算します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Example 2: Get the length of all the files in a directory</source>
          <target state="translated">例 2: ディレクトリ内のすべてのファイルの長さを取得します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This command gets the files and directories in the Windows PowerShell installation directory ($pshome) and passes them to the <bpt id="p1">**</bpt>ForEach-Object<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">このコマンドは、Windows PowerShell のインストール ディレクトリ ($pshome) 内のファイルおよびディレクトリを取得し、コマンドを渡し、 <bpt id="p1">**</bpt>Foreach-object<ept id="p1">**</ept> コマンドレットです。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If the object is not a directory, the script block gets the name of the file, divides the value of its <bpt id="p1">**</bpt>Length<ept id="p1">**</ept> property by 1024, and adds a space (" ") to separate it from the next entry.</source>
          <target state="translated">オブジェクトは、ディレクトリではなく、スクリプト ブロック、ファイルの名前を取得の値を除算その <bpt id="p1">**</bpt>長さ<ept id="p1">**</ept> 1,024 でプロパティにスペースを追加し、("")、次のエントリと区別するためです。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The cmdlet uses the <bpt id="p1">**</bpt>PSISContainer<ept id="p1">**</ept> property to determine whether an object is a directory.</source>
          <target state="translated">コマンドレットを使用して、 <bpt id="p1">**</bpt>PSISContainer<ept id="p1">**</ept> プロパティ オブジェクトがディレクトリであるかどうかを確認します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Example 3: Operate on the most recent System events</source>
          <target state="translated">例 3: が最新のシステム イベントの動作します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This command gets the 1000 most recent events from the System event log and stores them in the $Events variable.</source>
          <target state="translated">このコマンドは、システム イベント ログから 1,000 件の最新のイベントを取得し、$Events 変数に格納します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>It then pipes the events to the <bpt id="p1">**</bpt>ForEach-Object<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">パイプを使用して、 <bpt id="p1">**</bpt>Foreach-object<ept id="p1">**</ept> コマンドレットです。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>Begin<ept id="p1">*</ept> parameter displays the current date and time.</source>
          <target state="translated"> <bpt id="p1">*</bpt>開始<ept id="p1">*</ept> パラメーターは、現在の日付と時刻が表示されます。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Next, the <bpt id="p1">*</bpt>Process<ept id="p1">*</ept> parameter uses the <bpt id="p2">**</bpt>Out-File<ept id="p2">**</ept> cmdlet to create a text file that is named events.txt and stores the message property of each of the events in that file.</source>
          <target state="translated">次に、 <bpt id="p1">*</bpt>プロセス<ept id="p1">*</ept> パラメーターを使用して、 <bpt id="p2">**</bpt>Out-file<ept id="p2">**</ept> コマンドレットは、events.txt という名前でそのファイル内の各イベントのメッセージ プロパティを格納するテキスト ファイルに作成します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Last, the <bpt id="p1">*</bpt>End<ept id="p1">*</ept> parameter is used to display the date and time after all of the processing has completed.</source>
          <target state="translated">最後に、 <bpt id="p1">*</bpt>エンド<ept id="p1">*</ept> 日付を表示するパラメーターを使用して、時間後にすべての処理が完了します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Example 4: Change the value of a Registry key</source>
          <target state="translated">例 4: レジストリ キーの値を変更します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This command changes the value of the <bpt id="p1">**</bpt>RemotePath<ept id="p1">**</ept> registry entry in all of the subkeys under the HKCU:\Network key to uppercase text.</source>
          <target state="translated">このコマンドの値を変更する、 <bpt id="p1">**</bpt>RemotePath<ept id="p1">**</ept> すべて大文字のテキストを hkc u:\network キーの下のサブキーのレジストリ エントリ。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can use this format to change the form or content of a registry entry value.</source>
          <target state="translated">このフォーマットを使用して、レジストリ エントリ値の形式や内容を変更することができます。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Each subkey in the <bpt id="p1">**</bpt>Network<ept id="p1">**</ept> key represents a mapped network drive that will reconnect at logon.</source>
          <target state="translated">内の各サブキー、 <bpt id="p1">**</bpt>ネットワーク<ept id="p1">**</ept> キーはログオン時に再接続するマップ済みネットワーク ドライブを表します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>RemotePath<ept id="p1">**</ept> entry contains the UNC path of the connected drive.</source>
          <target state="translated"> <bpt id="p1">**</bpt>RemotePath<ept id="p1">**</ept> エントリには、接続されているドライブの UNC パスが含まれています。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For example, if you map the E: drive to <ph id="ph1">\\\\</ph>Server\Share, there will be an E subkey of HKCU:\Network and the value of the <bpt id="p1">**</bpt>RemotePath<ept id="p1">**</ept> registry entry in the E subkey will be <ph id="ph2">\\\\</ph>Server\Share.</source>
          <target state="translated">たとえば、e: ドライブをマップする <ph id="ph1">\\\\</ph>だったらとがあります hkc u:\network の E サブキーの値、 <bpt id="p1">**</bpt>RemotePath<ept id="p1">**</ept> E サブキーにレジストリ エントリになります <ph id="ph2">\\\\</ph>だったらします。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The command uses the Get-ItemProperty cmdlet to get all of the subkeys of the <bpt id="p1">**</bpt>Network<ept id="p1">**</ept> key and the Set-ItemProperty cmdlet to change the value of the <bpt id="p2">**</bpt>RemotePath<ept id="p2">**</ept> registry entry in each key.</source>
          <target state="translated">コマンドは、すべてのサブキーを取得、Get-itemproperty コマンドレットを使用して、 <bpt id="p1">**</bpt>ネットワーク<ept id="p1">**</ept> キーと値を変更する、Set-itemproperty コマンドレット、 <bpt id="p2">**</bpt>RemotePath<ept id="p2">**</ept> 各キーのレジストリ エントリ。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Set-ItemProperty<ept id="p1">**</ept> command, the path is the value of the <bpt id="p2">**</bpt>PSPath<ept id="p2">**</ept> property of the registry key.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Set-itemproperty<ept id="p1">**</ept> コマンド、パスの値は、 <bpt id="p2">**</bpt>PSPath<ept id="p2">**</ept> レジストリ キーのプロパティです。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This is a property of the Microsoft .NET Framework object that represents the registry key, not a registry entry.</source>
          <target state="translated">これは、レジストリ キーのレジストリ エントリではないが表す Microsoft .NET Framework オブジェクトのプロパティです。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">**</bpt>ToUpper()<ept id="p1">**</ept> method of the <bpt id="p2">**</bpt>RemotePath<ept id="p2">**</ept> value, which is a string (REG_SZ).</source>
          <target state="translated">コマンドを使用して、 <bpt id="p1">**</bpt>ToUpper()<ept id="p1">**</ept> のメソッド、 <bpt id="p2">**</bpt>RemotePath<ept id="p2">**</ept> これは、文字列 (REG_SZ) 値です。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Because <bpt id="p1">**</bpt>Set-ItemProperty<ept id="p1">**</ept> is changing the property of each key, the <bpt id="p2">**</bpt>ForEach-Object<ept id="p2">**</ept> cmdlet is required to access the property.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Set-itemproperty<ept id="p1">**</ept> 各キーのプロパティを変更する、 <bpt id="p2">**</bpt>Foreach-object<ept id="p2">**</ept> コマンドレットは、プロパティにアクセスするために必要なです。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Example 5: Use the $Null automatic variable</source>
          <target state="translated">例 5: $Null 自動変数を使用します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This example shows the effect of piping the $Null automatic variable to the <bpt id="p1">**</bpt>ForEach-Object<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">この例は、$Null 自動変数をパイプ処理の効果を示します、 <bpt id="p1">**</bpt>Foreach-object<ept id="p1">**</ept> コマンドレットです。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Because Windows PowerShell treats null as an explicit placeholder, the <bpt id="p1">**</bpt>ForEach-Object<ept id="p1">**</ept> cmdlet generates a value for $Null, just as it does for other objects that you pipe to it.</source>
          <target state="translated">Windows PowerShell は、null を明示的なプレース ホルダーとして扱われるため、 <bpt id="p1">**</bpt>Foreach-object<ept id="p1">**</ept> コマンドレットでは、パイプを使って、他のオブジェクトと同様、$Null の値を生成します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For more information about the $Null automatic variable, see about_Automatic_Variables.</source>
          <target state="translated">$Null 自動変数の詳細については、「about_automatic_variables」を参照してください。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Example 6: Get property values</source>
          <target state="translated">例 6: プロパティ値を取得します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>These commands gets the value of the <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> property of all installed Windows PowerShell modules.</source>
          <target state="translated">これらのコマンドの値を取得する、 <bpt id="p1">**</bpt>パス<ept id="p1">**</ept> すべてのプロパティは、Windows PowerShell モジュールをインストールします。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>They use the <bpt id="p1">*</bpt>MemberName<ept id="p1">*</ept> parameter to specify the <bpt id="p2">**</bpt>Path<ept id="p2">**</ept> property of modules.</source>
          <target state="translated">使用する、 <bpt id="p1">*</bpt>MemberName<ept id="p1">*</ept> を指定するパラメーター、 <bpt id="p2">**</bpt>パス<ept id="p2">**</ept> モジュールのプロパティです。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The second command is equivalent to the first.</source>
          <target state="translated">2 番目のコマンドは、1 番目のコマンドと同等です。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">**</bpt>Foreach<ept id="p1">**</ept> alias of the <bpt id="p2">**</bpt>ForEach-Object<ept id="p2">**</ept> cmdlet and omits the name of the <bpt id="p3">*</bpt>MemberName<ept id="p3">*</ept> parameter, which is optional.</source>
          <target state="translated">使用して、 <bpt id="p1">**</bpt>Foreach<ept id="p1">**</ept> のエイリアス、 <bpt id="p2">**</bpt>Foreach-object<ept id="p2">**</ept> コマンドレットの名前を省略し、 <bpt id="p3">*</bpt>MemberName<ept id="p3">*</ept> パラメーターは省略可能です。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ForEach-Object<ept id="p1">**</ept> cmdlet is very useful for getting property values, because it gets the value without changing the type, unlike the <bpt id="p2">**</bpt>Format<ept id="p2">**</ept> cmdlets or the Select-Object cmdlet, which change the property value type.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Foreach-object<ept id="p1">**</ept> とは異なり、型を変更することがなく、値を取得するため、コマンドレットがプロパティ値を取得するのに便利ですが、 <bpt id="p2">**</bpt>形式<ept id="p2">**</ept> コマンドレットか Select-object コマンドレットは、プロパティを変更する値の型。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Example 7: Split module names into component names</source>
          <target state="translated">コンポーネント名にモジュール名を分割する例 7。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>These commands split two dot-separated module names into their component names.</source>
          <target state="translated">これらのコマンドは、2 つのドットで区切られたモジュール名をコンポーネント名に分けます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The commands call the <bpt id="p1">**</bpt>Split<ept id="p1">**</ept> method of strings.</source>
          <target state="translated">コマンドの呼び出し、 <bpt id="p1">**</bpt>分割<ept id="p1">**</ept> 文字列のメソッドです。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The three commands use different syntax, but they are equivalent and interchangeable.</source>
          <target state="translated">3 つのコマンドは、別の構文を使用しますが、すべて同等であり、交換可能です。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The first command uses the traditional syntax, which includes a script block and the current object operator ($_).</source>
          <target state="translated">最初のコマンドは、スクリプト ブロックと現在のオブジェクト演算子 ($_) を含む、従来の構文を使用します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>It uses the dot syntax to specify the method and parentheses to enclose the delimiter argument.</source>
          <target state="translated">メソッドの指定にドット構文を使用し、区切り記号の引数を囲むためにかっこを使用します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The second command uses the <bpt id="p1">*</bpt>MemberName<ept id="p1">*</ept> parameter to specify the <bpt id="p2">**</bpt>Split<ept id="p2">**</ept> method and the <bpt id="p3">*</bpt>ArgumentName<ept id="p3">*</ept> parameter to identify the dot (".") as the split delimiter.</source>
          <target state="translated">2 番目のコマンドを使用して、 <bpt id="p1">*</bpt>MemberName<ept id="p1">*</ept> を指定するパラメーター、 <bpt id="p2">**</bpt>分割<ept id="p2">**</ept> メソッドと <bpt id="p3">*</bpt>ArgumentName<ept id="p3">*</ept> をドットを識別するパラメーター ("です。") 分割の区切り記号として。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The third command uses the <bpt id="p1">**</bpt>Foreach<ept id="p1">**</ept> alias of the <bpt id="p2">**</bpt>Foreach-Object<ept id="p2">**</ept> cmdlet and omits the names of the <bpt id="p3">*</bpt>MemberName<ept id="p3">*</ept> and <bpt id="p4">*</bpt>ArgumentList<ept id="p4">*</ept> parameters, which are optional.</source>
          <target state="translated">3 番目のコマンドを使用して、 <bpt id="p1">**</bpt>Foreach<ept id="p1">**</ept> のエイリアス、 <bpt id="p2">**</bpt>Foreach-object<ept id="p2">**</ept> コマンドレットの名前は省略されています、 <bpt id="p3">*</bpt>MemberName<ept id="p3">*</ept> と <bpt id="p4">*</bpt>ArgumentList<ept id="p4">*</ept> パラメーターはオプションです。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The output of these three commands, shown below, is identical.</source>
          <target state="translated">以下に示す 3 つのコマンドの出力は同一です。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Split<ept id="p1">**</ept> is just one of many useful methods of strings.</source>
          <target state="translated"><bpt id="p1">**</bpt>分割<ept id="p1">**</ept> は文字列の多くの便利なメソッドの 1 つです。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To see all of the properties and methods of strings, pipe a string to the Get-Member cmdlet.</source>
          <target state="translated">すべてのプロパティとメソッドの文字列を表示するにはするには、文字列を Get-member コマンドレットにパイプを使用します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">パラメータ</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>-ArgumentList</source>
          <target state="translated">-ArgumentList</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Specifies an array of arguments to a method call.</source>
          <target state="translated">メソッドの呼び出しに引数の配列を指定します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">このパラメーターは Windows PowerShell 3.0 で導入されました。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>-Begin</source>
          <target state="translated">-開始します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Specifies a script block that runs before this cmdlet processes any input objects.</source>
          <target state="translated">このコマンドレットは、その入力オブジェクトを処理する前に実行するスクリプト ブロックを指定します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>-Confirm</source>
          <target state="translated">-Confirm</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Prompts you for confirmation before running the cmdlet.Prompts you for confirmation before running the cmdlet.</source>
          <target state="translated">コマンドレットを実行する前に確認するように求められます。コマンドレットを実行する前に確認するように求められます。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>-End</source>
          <target state="translated">バックエンド</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Specifies a script block that runs after this cmdlet processes all input objects.</source>
          <target state="translated">このコマンドレットは、すべての入力オブジェクトを処理した後に実行するスクリプト ブロックを指定します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>-InputObject</source>
          <target state="translated">-Inputobject</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Specifies the input objects.</source>
          <target state="translated">入力オブジェクトを指定します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>ForEach-Object<ept id="p1">*</ept> runs the script block or operation statement on each input object.</source>
          <target state="translated"><bpt id="p1">*</bpt>Foreach-object<ept id="p1">*</ept> 各入力オブジェクトに対して、スクリプト ブロックまたは操作のステートメントを実行します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Enter a variable that contains the objects, or type a command or expression that gets the objects.</source>
          <target state="translated">オブジェクトが格納されている変数を入力するか、オブジェクトを取得するコマンドまたは式を入力します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When you use the <bpt id="p1">*</bpt>InputObject<ept id="p1">*</ept> parameter with <bpt id="p2">**</bpt>ForEach-Object<ept id="p2">**</ept>, instead of piping command results to <bpt id="p3">**</bpt>ForEach-Object<ept id="p3">**</ept>, the <bpt id="p4">*</bpt>InputObject<ept id="p4">*</ept> value is treated as a single object.</source>
          <target state="translated">使用すると、 <bpt id="p1">*</bpt>InputObject<ept id="p1">*</ept> パラメーターと <bpt id="p2">**</bpt>Foreach-object<ept id="p2">**</ept>, 、コマンドの結果をパイプ処理ではなく <bpt id="p3">**</bpt>Foreach-object<ept id="p3">**</ept>, 、 <bpt id="p4">*</bpt>InputObject<ept id="p4">*</ept> 値が 1 つのオブジェクトとして扱われます。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This is true even if the value is a collection that is the result of a command, such as <ph id="ph1">`-InputObject (Get-Process)`</ph>.</source>
          <target state="translated">これは、値は、コレクションなど、コマンドの結果である場合でも <ph id="ph1">`-InputObject (Get-Process)`</ph>します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Because <bpt id="p1">*</bpt>InputObject<ept id="p1">*</ept> cannot return individual properties from an array or collection of objects, we recommend that if you use <bpt id="p2">**</bpt>ForEach-Object<ept id="p2">**</ept> to perform operations on a collection of objects for those objects that have specific values in defined properties, you use <bpt id="p3">**</bpt>ForEach-Object<ept id="p3">**</ept> in the pipeline, as shown in the examples in this topic.</source>
          <target state="translated"> <bpt id="p1">*</bpt>InputObject<ept id="p1">*</ept> 個々 のプロパティを返すことはできません、配列またはオブジェクトのコレクションのことをお勧めを使用する場合 <bpt id="p2">**</bpt>Foreach-object<ept id="p2">**</ept> をプロパティに定義された特定の値を持つオブジェクトのオブジェクトのコレクションに対する操作を実行する使用する <bpt id="p3">**</bpt>Foreach-object<ept id="p3">**</ept> パイプラインでは、このトピックの例に示すようにします。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>-MemberName</source>
          <target state="translated">-電子メール アドレス</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Specifies the property to get or the method to call.</source>
          <target state="translated">取得するプロパティまたは呼び出すメソッドを指定します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Wildcard characters are permitted, but work only if the resulting string resolves to a unique value.</source>
          <target state="translated">ワイルドカード文字では、許可されますが、結果の文字列が一意の値に解決される場合にのみ機能します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If, for example, you run <ph id="ph1">`Get-Process | ForEach -MemberName *Name`</ph>, and more than one member exists with a name that contains the string Name, such as the <bpt id="p1">**</bpt>ProcessName<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Name<ept id="p2">**</ept> properties, the command fails.</source>
          <target state="translated">などを実行する場合は、 <ph id="ph1">`Get-Process | ForEach -MemberName *Name`</ph>, 、文字列の名前を含む名前の 1 つ以上のメンバーが存在して、 <bpt id="p1">**</bpt>ProcessName<ept id="p1">**</ept> と <bpt id="p2">**</bpt>名<ept id="p2">**</ept> プロパティでは、このコマンドは失敗します。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">このパラメーターは Windows PowerShell 3.0 で導入されました。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>-Process</source>
          <target state="translated">インプロセス</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Specifies the operation that is performed on each input object.</source>
          <target state="translated">各入力オブジェクトに対して実行する操作を指定します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Enter a script block that describes the operation.</source>
          <target state="translated">操作を記述するスクリプト ブロックを入力します。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>-RemainingScripts</source>
          <target state="translated">-RemainingScripts</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Specifies all script blocks that are not taken by the <bpt id="p1">*</bpt>Process<ept id="p1">*</ept> parameter.</source>
          <target state="translated">によって取得されないすべてのスクリプト ブロックを指定する、 <bpt id="p1">*</bpt>プロセス<ept id="p1">*</ept> パラメーター。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">このパラメーターは Windows PowerShell 3.0 で導入されました。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>-WhatIf</source>
          <target state="translated">-WhatIf</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Shows what would happen if the cmdlet runs.</source>
          <target state="translated">コマンドレットを実行するとどのような結果になるかを表示します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The cmdlet is not run.Shows what would happen if the cmdlet runs.</source>
          <target state="translated">コマンドレットは実行されません。コマンドレットが実行された場合の処理を示しています。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The cmdlet is not run.</source>
          <target state="translated">コマンドレットは実行されません。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">このコマンドレットは、共通のパラメーターをサポートしています:-デバッグ、-erroraction、-errorvariable、- InformationAction-InformationVariable、- OutVariable、-OutBuffer、- PipelineVariable、- Verbose、および - WarningVariable です。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">詳細については、about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216) を参照してください。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">入力</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.PSObject</source>
          <target state="translated">System.Management.Automation.PSObject</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>You can pipe any object to this cmdlet.</source>
          <target state="translated">このコマンドレットでは任意のオブジェクトをパイプすることができます。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">出力</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.PSObject</source>
          <target state="translated">System.Management.Automation.PSObject</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>This cmdlet returns objects that are determined by the input.</source>
          <target state="translated">このコマンドレットでは、入力によって決定されるオブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">ノート</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ForEach-Object<ept id="p1">**</ept> cmdlet works much like the <bpt id="p2">**</bpt>Foreach<ept id="p2">**</ept> statement, except that you cannot pipe input to a <bpt id="p3">**</bpt>Foreach<ept id="p3">**</ept> statement.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Foreach-object<ept id="p1">**</ept> コマンドレットの動作と同様、 <bpt id="p2">**</bpt>Foreach<ept id="p2">**</ept> ステートメントへの入力をパイプすることはできませんが、 <bpt id="p3">**</bpt>Foreach<ept id="p3">**</ept> ステートメントです。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For more information about the <bpt id="p1">**</bpt>Foreach<ept id="p1">**</ept> statement, see about_Foreach (http://go.microsoft.com/fwlink/?LinkID=113229) in the Microsoft TechNet library.</source>
          <target state="translated">詳細については、 <bpt id="p1">**</bpt>Foreach<ept id="p1">**</ept> ステートメント、Microsoft TechNet ライブラリを参照してください about_foreach」(http://go.microsoft.com/fwlink/?LinkID=113229)。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">関連リンク</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>about_Automatic_Variables</source>
          <target state="translated">about_Automatic_Variables</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>about_ForEach</source>
          <target state="translated">about_ForEach</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>about_Script_Blocks</source>
          <target state="translated">about_Script_Blocks</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Get-ItemProperty</source>
          <target state="translated">Get-itemproperty</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Get-Member</source>
          <target state="translated">Get-Member</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Select-Object</source>
          <target state="translated">Select-Object</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Set-ItemProperty</source>
          <target state="translated">Set-ItemProperty</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>