<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acd52c1271013320dafa7f7bf5c72b752e07574b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\cookbooks\Viewing-Object-Structure--Get-Member-.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd3f095c1439375e778e99abbf2866290832c062</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f295fb56fbbda19bf6f6ee41e25a07001610444f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Viewing Object Structure  Get Member</source>
          <target state="translated">オブジェクトの構造の表示 (Get-member)</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell,cmdlet</source>
          <target state="translated">PowerShell, コマンドレット</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Viewing Object Structure (Get-Member)</source>
          <target state="translated">オブジェクトの構造を表示する (Get-member)</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Because objects play such a central role in Windows PowerShell, there are several native commands designed to work with arbitrary object types.</source>
          <target state="translated">オブジェクトは、Windows PowerShell において非常に中心的な役割を担っているため、任意のオブジェクトの種類で動作するよう設計されたネイティブ コマンドがいくつかあります。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The most important one is the <bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> command.</source>
          <target state="translated">最も重要なコマンドは、<bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> コマンドです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The simplest technique for analyzing the objects that a command returns is to pipe the output of that command to the <bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">コマンドで返されるオブジェクトを分析するための最も単純な手法は、パイプを使用してそのコマンドの出力を <bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> コマンドレットに渡すことです。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> cmdlet shows you the formal name of the object type and a complete listing of its members.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> コマンドレットでは、オブジェクトの種類の正式な名前とそのメンバーの完全な一覧が表示されます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The number of elements that are returned can sometimes be overwhelming.</source>
          <target state="translated">返される要素の数が非常に多いことがあります。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, a process object can have over 100 members.</source>
          <target state="translated">たとえば、プロセス オブジェクトには 100 を超えるメンバーが含まれることがあります。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To see all the members of a Process object and page the output so you can view all of it, type:</source>
          <target state="translated">プロセス オブジェクトのすべてのメンバーを表示して、出力をすべて確認できるようにページングするには、次のように入力します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The output from this command will look something like this:</source>
          <target state="translated">このコマンドの出力は次のようになります。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>We can make this long list of information more usable by filtering for elements we want to see.</source>
          <target state="translated">表示する要素をフィルター処理することで、この長い情報の一覧をより使いやすくできます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> command lets you list only members that are properties.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> コマンドを使用すると、プロパティであるメンバーのみを一覧表示できます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>There are several forms of properties.</source>
          <target state="translated">プロパティにはいくつかの形式があります。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The cmdlet displays properties of any type if we set the <bpt id="p1">**</bpt>Get-MemberMemberType<ept id="p1">**</ept> parameter to the value <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get-MemberMemberType<ept id="p1">**</ept> パラメーターを値 <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept> に設定すると、コマンドレットはすべての種類のプロパティを表示します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The resulting list is still very long, but a bit more manageable:</source>
          <target state="translated">結果の一覧はこれでもまだ非常に長いですが、より管理しやすくなります。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The allowed values of MemberType are AliasProperty, CodeProperty, Property, NoteProperty, ScriptProperty, Properties, PropertySet, Method, CodeMethod, ScriptMethod, Methods, ParameterizedProperty, MemberSet, and All.</source>
          <target state="translated">MemberType の指定できる値は、AliasProperty、CodeProperty、Property、NoteProperty、ScriptProperty、Properties、PropertySet、Method、CodeMethod、ScriptMethod、Methods、ParameterizedProperty、MemberSet、および All です。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>There are over 60 properties for a process.</source>
          <target state="translated">プロセスには、60 を超えるプロパティがあります。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The reason Windows PowerShell often shows only a handful of properties for any well-known object is that showing all of them would produce an unmanageable amount of information.</source>
          <target state="translated">Windows PowerShell では、既知のオブジェクトのほんの一部のプロパティしか表示されません。これは、すべてを表示すると管理が困難なほどの大量の情報が生成されるためです。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Windows PowerShell determines how to display an object type by using information stored in XML files that have names ending in .format.ps1xml.</source>
          <target state="translated">Windows PowerShell は、.format.ps1xml で終わる名前を持つ XML ファイルに保存されている情報を使用して、オブジェクトの種類を表示する方法を決定します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The formatting data for process objects, which are .NET System.Diagnostics.Process objects, is stored in PowerShellCore.format.ps1xml.</source>
          <target state="translated">プロセス オブジェクトの書式設定データは、.NET System.Diagnostics.Process オブジェクトであり、PowerShellCore.format.ps1xml に保存されます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you need to look at properties other than those that Windows PowerShell displays by default, you will need to format the output data yourself.</source>
          <target state="translated">Windows PowerShell が既定で表示する以外のプロパティを確認する必要がある場合は、出力データを自分で書式設定する必要があります。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This can be done by using the format cmdlets.</source>
          <target state="translated">これは、書式設定コマンドレットを使用して行えます。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>