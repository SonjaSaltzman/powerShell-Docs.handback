<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-56a7a5e" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e6f58860c7aebcf60d8df562f009fce0db3c955</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\cookbooks\Getting-WMI-Objects--Get-WmiObject-.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">680809545ec4f06e2a2f6fcacacd14ba3c89f051</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting WMI Objects  Get WmiObject</source>
          <target state="translated">WMI 개체 가져오기(Get-WmiObject)</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell,cmdlet</source>
          <target state="translated">powershell,cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Getting WMI Objects (Get-WmiObject)</source>
          <target state="translated">WMI 개체 가져오기(Get-WmiObject)</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting WMI Objects (Get<ph id="ph1">\-</ph>WmiObject)</source>
          <target state="translated">WMI 개체 가져오기('Get<ph id="ph1">\-</ph>WmiObject')</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Windows Management Instrumentation (WMI) is a core technology for Windows system administration because it exposes a wide range of information in a uniform manner.</source>
          <target state="translated">WMI(Windows Management Instrumentation)는 다양한 정보를 일관되게 표시하므로 Windows 시스템 관리를 위한 핵심 기술입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Because of how much WMI makes possible, the Windows PowerShell cmdlet for accessing WMI objects, <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>WmiObject<ept id="p1">**</ept>, is one of the most useful for doing real work.</source>
          <target state="translated">WMI가 표시하는 정보의 양이 제한되어 있기 때문에 WMI 개체에 액세스하기 위한 Windows PowerShell cmdlet인 <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>WmiObject<ept id="p1">**</ept>는 실제 작업을 수행하는 데 있어서 가장 유용한 도구 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>We are going to discuss how to use Get<ph id="ph1">\-</ph>WmiObject to access WMI objects and then how to use WMI objects to do specific things.</source>
          <target state="translated">이 장에서는 Get<ph id="ph1">\-</ph>WmiObject를 사용하여 WMI 개체에 액세스하는 방법과 WMI 개체를 사용하여 특정 작업을 수행하는 방법을 차례로 설명합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Listing WMI Classes</source>
          <target state="translated">WMI 클래스 표시</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The first problem most WMI users encounter is trying to find out what can be done with WMI.</source>
          <target state="translated">대부분의 WMI 사용자가 겪는 첫 번째 문제는 WMI를 사용하여 수행할 수 있는 작업을 검색하려고 할 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>WMI classes describe the resources that can be managed.</source>
          <target state="translated">WMI 클래스는 관리 가능한 리소스를 설명합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>There are hundreds of WMI classes, some of which contain dozens of properties.</source>
          <target state="translated">이러한 WMI 클래스는 수백 개가 있고 일부 클래스에는 수십 개의 속성이 포함되어 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>WmiObject<ept id="p1">**</ept> addresses this problem by making WMI discoverable.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>WmiObject<ept id="p1">**</ept>는 이 문제를 해결하기 위해 WMI를 검색 가능하게 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can get a list of the WMI classes available on the local computer by typing:</source>
          <target state="translated">다음과 같이 입력하면 로컬 컴퓨터에서 사용할 수 있는 WMI 클래스의 목록을 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can retrieve the same information from a remote computer by using the ComputerName parameter, specifying a computer name or IP address:</source>
          <target state="translated">다음과 같이 ComputerName 매개 변수를 사용하여 컴퓨터 이름과 IP 주소를 지정하면 원격 컴퓨터에서도 이 정보를 검색할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The class listing returned by remote computers may vary due to the specific operating system the computer is running and the particular WMI extensions added by installed applications.</source>
          <target state="translated">원격 컴퓨터에서 반환되는 클래스 목록은 컴퓨터가 실행 중인 운영 체제와 설치된 응용 프로그램에서 추가한 WMI 확장에 따라 다를 수 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When using Get<ph id="ph1">\-</ph>WmiObject to connect to a remote computer, the remote computer must be running WMI and, under the default configuration, the account you are using must be in the local administrators group on the remote computer.</source>
          <target state="translated">Get<ph id="ph1">\-</ph>WmiObject를 사용하여 원격 컴퓨터에 연결할 때는 원격 컴퓨터에서 WMI를 실행 중이어야 하고, 기본 구성에서는 사용 중인 계정이 원격 컴퓨터의 로컬 관리자 그룹에 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The remote system does not need to have Windows PowerShell installed.</source>
          <target state="translated">원격 시스템에는 Windows PowerShell을 설치하지 않아도 됩니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This allows you to administer operating systems that are not running Windows PowerShell, but do have WMI available.</source>
          <target state="translated">이 경우 관리자는 Windows PowerShell을 실행 중이지 않지만 WMI를 사용할 수 있는 운영 체제를 관리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can even include the ComputerName when connecting to the local system.</source>
          <target state="translated">로컬 시스템에 연결할 때 ComputerName을 포함할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can use the local computer's name, its IP address (or the loopback address 127.0.0.1), or the WMI<ph id="ph1">\-</ph>style '.' as the computer name.</source>
          <target state="translated">로컬 컴퓨터의 이름, IP 주소(또는 루프백 주소 127.0.0.1) 또는 WMI 스타일 '.'를 컴퓨터 이름으로 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you are running Windows PowerShell on a computer named Admin01 with IP address 192.168.1.90, the following commands will all return the WMI class listing for that computer:</source>
          <target state="translated">IP 주소가 192.168.1.90이고 이름이 Admin01인 컴퓨터에서 Windows PowerShell을 실행 중인 경우 다음 명령을 실행하면 이 컴퓨터에서 사용할 수 있는 모든 WMI 클래스 목록이 반환됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Get<ph id="ph1">\-</ph>WmiObject uses the root<ph id="ph2">\/</ph>cimv2 namespace by default.</source>
          <target state="translated">Get<ph id="ph1">\-</ph>WmiObject는 기본적으로 root<ph id="ph2">\/</ph>cimv2 네임스페이스를 사용합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you want to specify another WMI namespace, use the <bpt id="p1">**</bpt>Namespace<ept id="p1">**</ept> parameter and specify the corresponding namespace path:</source>
          <target state="translated">다른 WMI 네임스페이스를 지정하려면 다음과 같이 <bpt id="p1">**</bpt>Namespace<ept id="p1">**</ept> 매개 변수를 사용하고 해당 네임스페이스 경로를 지정합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Displaying WMI Class Details</source>
          <target state="translated">WMI 클래스 세부 정보 표시</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you already know the name of a WMI class, you can use it to get information immediately.</source>
          <target state="translated">WMI 클래스의 이름을 알고 있으면 이 이름을 사용하여 정보를 즉시 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, one of the WMI classes commonly used for retrieving information about a computer is <bpt id="p1">**</bpt>Win32<ph id="ph1">\_</ph>OperatingSystem<ept id="p1">**</ept>.</source>
          <target state="translated">예를 들어 컴퓨터에 대한 정보를 검색하는 데 일반적으로 사용되는 WMI 클래스 중 하나는 <bpt id="p1">**</bpt>Win32<ph id="ph1">\_</ph>OperatingSystem<ept id="p1">**</ept>입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Although we are showing all of the parameters, the command can be expressed in a more succinct way.</source>
          <target state="translated">이 명령에는 매개 변수가 모두 나와 있지만 불필요한 매개 변수를 표시하지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ComputerName<ept id="p1">**</ept> parameter is not necessary when connecting to the local system.</source>
          <target state="translated">로컬 시스템에 연결할 때는 <bpt id="p1">**</bpt>ComputerName<ept id="p1">**</ept> 매개 변수가 필요하지 않습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>We show it to demonstrate the most general case and remind you about the parameter.</source>
          <target state="translated">여기에 이 매개 변수를 표시한 것은 가장 일반적인 경우를 보여 주고 이 매개 변수가 있다는 것을 알려 주기 위한 것입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Namespace<ept id="p1">**</ept> defaults to root<ph id="ph1">\/</ph>cimv2, and can be omitted as well.</source>
          <target state="translated"><bpt id="p1">**</bpt>Namespace<ept id="p1">**</ept>는 기본적으로 root<ph id="ph1">\/</ph>cimv2로 설정되며 마찬가지로 생략될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Finally, most cmdlets allow you to omit the name of common parameters.</source>
          <target state="translated">마지막으로 대부분의 cmdlet에서는 일반적인 매개 변수의 이름을 생략할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>With Get<ph id="ph1">\-</ph>WmiObject, if no name is specified for the first parameter, Windows PowerShell treats it as the <bpt id="p1">**</bpt>Class<ept id="p1">**</ept> parameter.</source>
          <target state="translated">Get<ph id="ph1">\-</ph>WmiObject를 사용할 때 첫 번째 매개 변수의 이름을 지정하지 않으면 Windows PowerShell은 이 매개 변수를 <bpt id="p1">**</bpt>Class<ept id="p1">**</ept> 매개 변수로 처리합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This means the last command could have been issued by typing:</source>
          <target state="translated">즉, 다음과 같이 입력하여 위 명령을 실행할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Win32<ph id="ph1">\_</ph>OperatingSystem<ept id="p1">**</ept> class has many more properties than those displayed here.</source>
          <target state="translated"><bpt id="p1">**</bpt>Win32<ph id="ph1">\_</ph>OperatingSystem<ept id="p1">**</ept> 클래스에는 여기에 표시된 것보다 훨씬 더 많은 속성이 있습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can use Get<ph id="ph1">\-</ph>Member to see all the properties.</source>
          <target state="translated">Get<ph id="ph1">\-</ph>Member를 사용하면 이러한 속성을 모두 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The properties of a WMI class are automatically available like other object properties:</source>
          <target state="translated">다음과 같이 WMI 클래스의 속성도 다른 개체 속성처럼 자동으로 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Displaying Non<ph id="ph1">\-</ph>Default Properties with Format Cmdlets</source>
          <target state="translated">Format Cmdlet을 사용하여 기본 속성이 아닌 속성 표시</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you want information contained in the <bpt id="p1">**</bpt>Win32<ph id="ph1">\_</ph>OperatingSystem<ept id="p1">**</ept> class that is not displayed by default, you can display it by using the <bpt id="p2">**</bpt>Format<ept id="p2">**</ept> cmdlets.</source>
          <target state="translated">기본적으로 표시되지 않는 <bpt id="p1">**</bpt>Win32<ph id="ph1">\_</ph>OperatingSystem<ept id="p1">**</ept> 클래스에 포함된 정보를 보려면 <bpt id="p2">**</bpt>Format<ept id="p2">**</ept> cmdlet을 사용하여 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, if you want to display available memory data, type:</source>
          <target state="translated">예를 들어 사용 가능한 메모리 데이터를 보려면 다음과 같이 입력합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Wildcards work with property names in <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Table<ept id="p1">**</ept>, so the final pipeline element can be reduced to <bpt id="p2">**</bpt>Format<ph id="ph2">\-</ph>Table <ph id="ph3">\-</ph>Property TotalV<ph id="ph4">\&amp;</ph>#42;,Free<ph id="ph5">\&amp;</ph>#42;<ept id="p2">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Table<ept id="p1">**</ept>의 속성 이름에 와일드카드를 사용할 수 있으므로 마지막 파이프라인 요소를 <bpt id="p2">**</bpt>Format<ph id="ph2">\-</ph>Table <ph id="ph3">\-</ph>Property TotalV<ph id="ph4">\&amp;</ph>#42;,Free<ph id="ph5">\&amp;</ph>#42;<ept id="p2">**</ept>로 줄일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The memory data might be more readable if you format it as a list by typing:</source>
          <target state="translated">다음과 같이 입력하여 메모리 데이터를 목록으로 표시하면 더 쉽게 읽을 수 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>