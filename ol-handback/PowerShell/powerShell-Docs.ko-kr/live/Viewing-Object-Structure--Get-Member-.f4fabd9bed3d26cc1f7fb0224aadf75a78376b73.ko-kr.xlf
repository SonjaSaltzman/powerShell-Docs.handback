<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-56a7a5e" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8cd074bc4314aeb8d50fa31d74d9a1b2d2a37469</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\cookbooks\Viewing-Object-Structure--Get-Member-.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e7b17026dc81e8a9f6a47790c3b77362021c3e4</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Viewing Object Structure  Get Member</source>
          <target state="translated">개체 구조 보기(Get-Member)</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell,cmdlet</source>
          <target state="translated">powershell,cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Viewing Object Structure (Get-Member)</source>
          <target state="translated">개체 구조 보기(Get-Member)</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Because objects play such a central role in Windows PowerShell, there are several native commands designed to work with arbitrary object types.</source>
          <target state="translated">Windows PowerShell에서 개체는 중요한 역할을 하므로 임의의 개체 유형에 사용할 여러 개의 기본 명령이 설계되어 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The most important one is the <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>Member<ept id="p1">**</ept> command.</source>
          <target state="translated">이러한 명령 중 가장 중요한 명령은 <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>Member<ept id="p1">**</ept>입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The simplest technique for analyzing the objects that a command returns is to pipe the output of that command to the <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>Member<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">명령이 반환하는 개체를 분석하는 가장 간단한 방법은 명령의 출력을 <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>Member<ept id="p1">**</ept> cmdlet에 파이프하는 것입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>Member<ept id="p1">**</ept> cmdlet shows you the formal name of the object type and a complete listing of its members.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>Member<ept id="p1">**</ept> cmdlet은 개체 유형의 정식 이름과 해당 멤버의 전체 목록을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The number of elements that are returned can sometimes be overwhelming.</source>
          <target state="translated">이때 매우 많은 요소가 반환될 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, a process object can have over 100 members.</source>
          <target state="translated">예를 들어 프로세스 개체에는 100개 이상의 멤버가 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To see all the members of a Process object and page the output so you can view all of it, type:</source>
          <target state="translated">프로세스 개체의 멤버를 모두 표시하고 출력을 페이징하여 해당 내용을 모두 표시하려면 다음과 같이 입력합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The output from this command will look something like this:</source>
          <target state="translated">이 명령을 실행하면 다음과 같은 내용이 출력됩니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>We can make this long list of information more usable by filtering for elements we want to see.</source>
          <target state="translated">이 긴 정보 목록은 원하는 요소만 표시되도록 필터링하여 보다 간단하게 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>Member<ept id="p1">**</ept> command lets you list only members that are properties.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>Member<ept id="p1">**</ept> 명령을 사용하면 속성 멤버만 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>There are several forms of properties.</source>
          <target state="translated">속성에는 여러 가지 유형이 있는데,</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The cmdlet displays properties of any type if we set the <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>MemberMemberType<ept id="p1">**</ept> parameter to the value <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>MemberMemberType<ept id="p1">**</ept> 매개 변수를 값 <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept>로 설정하면 이 cmdlet이 모든 유형의 속성을 표시합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The resulting list is still very long, but a bit more manageable:</source>
          <target state="translated">결과 목록은 다음과 같이 아직도 매우 길지만 읽기가 조금 더 쉬워집니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The allowed values of MemberType are AliasProperty, CodeProperty, Property, NoteProperty, ScriptProperty, Properties, PropertySet, Method, CodeMethod, ScriptMethod, Methods, ParameterizedProperty, MemberSet, and All.</source>
          <target state="translated">MemberType에 사용할 수 있는 값으로는 AliasProperty, CodeProperty, Property, NoteProperty, ScriptProperty, Properties, PropertySet, Method, CodeMethod, ScriptMethod, Methods, ParameterizedProperty, MemberSet 및 All이 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>There are over 60 properties for a process.</source>
          <target state="translated">프로세스에는 60개 이상의 속성이 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The reason Windows PowerShell often shows only a handful of properties for any well<ph id="ph1">\-</ph>known object is that showing all of them would produce an unmanageable amount of information.</source>
          <target state="translated">Windows PowerShell이 종종 잘 알려진 개체의 속성을 일부만 표시하는 이유는 속성을 모두 표시하면 관리할 수 없는 정보의 양이 많아지기 때문입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Windows PowerShell determines how to display an object type by using information stored in XML files that have names ending in .format.ps1xml.</source>
          <target state="translated">Windows PowerShell은 이름이 .format.ps1xml로 끝나는 XML 파일에 저장된 정보를 사용하여 개체의 표시 방법을 결정합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The formatting data for process objects, which are .NET System.Diagnostics.Process objects, is stored in PowerShellCore.format.ps1xml.</source>
          <target state="translated">예를 들어 .NET System.Diagnostics.Process 개체인 프로세스 개체의 서식 데이터는 PowerShellCore.format.ps1xml에 저장됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you need to look at properties other than those that Windows PowerShell displays by default, you will need to format the output data yourself.</source>
          <target state="translated">Windows PowerShell이 기본적으로 표시하는 속성이 아닌 다른 속성을 보려면 출력 데이터의 형식을 사용자가 직접 지정해야 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This can be done by using the format cmdlets.</source>
          <target state="translated">이렇게 하려면 Format cmdlet을 사용하면 됩니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>