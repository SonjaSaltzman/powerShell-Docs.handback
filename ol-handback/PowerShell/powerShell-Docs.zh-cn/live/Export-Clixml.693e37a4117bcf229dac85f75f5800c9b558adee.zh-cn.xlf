<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba185115ed4d25c52d3006d5cfba59b98eadf230</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Utility\Export-Clixml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a4c4fd6a4f048ef528b4f908e2f57b94c1b46fc9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4f4f12dade76e7517534db33a5458ce975f81911</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Export-Clixml</source>
          <target state="translated">Export-clixml</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Export-Clixml</source>
          <target state="translated">Export-clixml</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">简述</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Creates an XML-based representation of an object or objects and stores it in a file.</source>
          <target state="translated">创建一个或多个对象的基于 XML 的表示形式，并将其存储在文件中。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">语法</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>ByPath (Default)</source>
          <target state="translated">ByPath （默认值）</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>ByLiteralPath</source>
          <target state="translated">ByLiteralPath</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Export-CliXml<ept id="p1">**</ept> cmdlet creates an XML-based representation of an object or objects and stores it in a file.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept> cmdlet 创建的基于 XML 的表示形式的对象或对象，并将其存储在文件中。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can then use the Import-Clixml cmdlet to re-create the saved object based on the contents of that file.</source>
          <target state="translated">然后可以使用 Import-clixml cmdlet 来重新创建已保存的对象基于该文件的内容。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This cmdlet is similar to ConvertTo-Xml, except that <bpt id="p1">**</bpt>Export-CliXml<ept id="p1">**</ept> stores the resulting XML in a file.</source>
          <target state="translated">此 cmdlet 类似于 Convertto-xml，不同之处在于是 <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept> 将生成的 XML 存储在文件中。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ConvertTo-XML<ept id="p1">**</ept> returns the XML, so you can continue to process it in Windows PowerShell.</source>
          <target state="translated"><bpt id="p1">**</bpt>CONVERTTO-XML<ept id="p1">**</ept> 返回 XML，以便可以继续在 Windows PowerShell 中对其进行处理。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A valuable use of <bpt id="p1">**</bpt>Export-CliXml<ept id="p1">**</ept> is to export credentials and secure strings securely as XML.</source>
          <target state="translated">使用有价值的 <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept> 是导出凭据，并以 XML 形式安全地保护字符串。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For an example of how to do this, see Example 3.</source>
          <target state="translated">有关如何执行此操作的示例，请参阅示例 3。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">示例</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example 1: Export a string to an XML file</source>
          <target state="translated">示例 1︰ 将一个字符串，导出到 XML 文件</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This command creates an XML file that stores a representation of the string, "This is a test".</source>
          <target state="translated">此命令可创建存储字符串“This is a test”的表示形式的 XML 文件。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example 2: Export an object to an XML file</source>
          <target state="translated">示例 2︰ 将对象导出到 XML 文件</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This example shows how to export an object to an XML file and then create an object by importing the XML from the file.</source>
          <target state="translated">此示例演示如何将对象导出到 XML 文件，然后通过从该文件导入 XML 来创建对象。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The first command uses the Get-Acl cmdlet to get the security descriptor of the Test.txt file.</source>
          <target state="translated">第一个命令使用 Get-acl cmdlet 获取 Test.txt 文件的安全描述符。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It uses a pipeline operator to pass the security descriptor to <bpt id="p1">**</bpt>Export-Clixml<ept id="p1">**</ept>, which stores an XML-based representation of the object in a file named FileACL.xml.</source>
          <target state="translated">它使用管道运算符将传递到的安全描述符 <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept>, ，它将基于 XML 的对象表示形式存储在名为 FileACL.xml 的文件。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The second command uses the Import-Clixml cmdlet to create an object from the XML in the FileACL.xml file.</source>
          <target state="translated">第二个命令使用 Import-Clixml cmdlet 从 FileACL.xml 文件中的 XML 创建对象。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Then, it saves the object in the $FileAcl variable.</source>
          <target state="translated">然后，它将该对象保存在 $FileAcl 变量中。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example 3: Encrypt an exported credential object</source>
          <target state="translated">示例 3︰ 加密导出的凭据对象</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Export-CliXml<ept id="p1">**</ept> cmdlet encrypts credential objects by using the Windows Data Protection APIhttp://msdn.microsoft.com/library/windows/apps/xaml/hh464970.aspx.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept> cmdlet 通过使用 Windows 数据保护 APIhttp://msdn.microsoft.com/library/windows/apps/xaml/hh464970.aspx 加密凭据对象。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This ensures that only your user account can decrypt the contents of the credential object.</source>
          <target state="translated">这可确保您的用户帐户可以解密凭据对象的内容。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In this example, given a credential that you've stored in the $Credential variable by running the Get-Credential cmdlet, you can run the <bpt id="p1">**</bpt>Export-CliXml<ept id="p1">**</ept> cmdlet to save the credential to disk.In the example, the file in which the credential is stored is represented by TestScript.ps1.credential.</source>
          <target state="translated">在此示例中，指定您已通过运行 Get-credential cmdlet 在 $Credential 变量中存储的凭据可以运行 <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept> cmdlet 将凭据保存到磁盘。在示例中，由 TestScript.ps1.credential 表示在其中存储凭据的文件。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Replace TestScript with the name of the script with which you are loading the credential.</source>
          <target state="translated">TestScript 替换的脚本与其加载凭据的名称。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the second command, pipe the credential object to <bpt id="p1">**</bpt>Export-CliXml<ept id="p1">**</ept>, and save it to the path, $CredXmlPath, that you specified in the first command.</source>
          <target state="translated">在第二个命令中，通过管道传递凭据对象传递给 <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept>, ，并将其保存到路径，$CredXmlPath，您在第一个命令中指定。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To import the credential automatically into your script, run the final two commands.</source>
          <target state="translated">若要将凭据自动导入您的脚本，运行在最终的两个命令。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This time, you are running Import-Clixml to import the secured credential object into your script.</source>
          <target state="translated">此时，您正在运行 Import-clixml 导入您的脚本的安全的凭据对象。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This eliminates the risk of exposing plain-text passwords in your script.</source>
          <target state="translated">这消除了泄露您的脚本中使用纯文本密码的风险。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">参数</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>-Confirm</source>
          <target state="translated">-Confirm</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Prompts you for confirmation before running the cmdlet.Prompts you for confirmation before running the cmdlet.</source>
          <target state="translated">将提示您在运行 cmdlet 前进行确认。将提示您在运行 cmdlet 前进行确认。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>-Depth</source>
          <target state="translated">防御</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Specifies how many levels of contained objects are included in the XML representation.</source>
          <target state="translated">指定 XML 表示形式中所包含的包含对象的级别数。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The default value is 2.</source>
          <target state="translated">默认值为 2。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The default value can be overridden for the object type in the Types.ps1xml files.</source>
          <target state="translated">可以覆盖 Types.ps1xml 文件中对象类型的默认值。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see about_Types.ps1xml.</source>
          <target state="translated">有关详细信息，请参阅 about_Types.ps1xml。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>-Encoding</source>
          <target state="translated">编码</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Specifies the type of encoding for the target file.</source>
          <target state="translated">指定目标文件的编码类型。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The acceptable values for this parameter are:</source>
          <target state="translated">此参数的可接受的值是：</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>ASCII</source>
          <target state="translated">ASCII</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>UTF8</source>
          <target state="translated">UTF8</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>UTF7</source>
          <target state="translated">UTF7</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>UTF32</source>
          <target state="translated">UTF32</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Unicode</source>
          <target state="translated">Unicode</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>BigEndianUnicode</source>
          <target state="translated">BigEndianUnicode</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Default</source>
          <target state="translated">默认值</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>OEM</source>
          <target state="translated">OEM</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The default value is Unicode.</source>
          <target state="translated">默认值为 Unicode。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>-Force</source>
          <target state="translated">-Force</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Forces the command to run without asking for user confirmation.</source>
          <target state="translated">强制运行命令而不要求用户确认。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Causes the cmdlet to clear the read-only attribute of the output file if necessary.</source>
          <target state="translated">使该 cmdlet 清除输出文件的只读属性（如有必要）。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The cmdlet will attempt to reset the read-only attribute when the command completes.</source>
          <target state="translated">该 cmdlet 将在命令完成时尝试重置只读属性。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>-InputObject</source>
          <target state="translated">-InputObject</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Specifies the object to be converted.</source>
          <target state="translated">指定要转换的对象。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Enter a variable that contains the objects, or type a command or expression that gets the objects.</source>
          <target state="translated">输入一个包含对象的变量，或键入可获取对象的命令或表达式。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can also pipe objects to <bpt id="p1">**</bpt>Export-Clixml<ept id="p1">**</ept>.</source>
          <target state="translated">您还可以通过管道对象传递给 <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>-LiteralPath</source>
          <target state="translated">-LiteralPath</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Specifies the path to the file where the XML representation of the object will be stored.</source>
          <target state="translated">指定指向将存储对象的 XML 表示形式的文件的路径。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Unlike <bpt id="p1">*</bpt>Path<ept id="p1">*</ept>, the value of the <bpt id="p2">*</bpt>LiteralPath<ept id="p2">*</ept> parameter is used exactly as it is typed.</source>
          <target state="translated">与不同 <bpt id="p1">*</bpt>路径<ept id="p1">*</ept>, ，值 <bpt id="p2">*</bpt>LiteralPath<ept id="p2">*</ept> 完全按照其键入使用参数。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>No characters are interpreted as wildcards.</source>
          <target state="translated">不会将任何字符解释为通配符。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If the path includes escape characters, enclose it in single quotation marks.</source>
          <target state="translated">如果路径包括转义符，请将其括在单引号中。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</source>
          <target state="translated">单引号会告知 Windows PowerShell 不要将所有字符都解释为转义序列。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>-NoClobber</source>
          <target state="translated">-NoClobber</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Indicates that the cmdlet does not overwrite the contents of an existing file.</source>
          <target state="translated">指示该 cmdlet 不会覆盖现有文件的内容。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>By default, if a file exists in the specified path, <bpt id="p1">**</bpt>Export-Clixml<ept id="p1">**</ept> overwrites the file without warning.</source>
          <target state="translated">默认情况下，如果文件存在于指定的路径、 <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept> 将覆盖该文件而不发出警告。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>-Path</source>
          <target state="translated">-Path</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Specifies the path to the file where the XML representation of the object will be stored.</source>
          <target state="translated">指定指向将存储对象的 XML 表示形式的文件的路径。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>-WhatIf</source>
          <target state="translated">-WhatIf</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Shows what would happen if the cmdlet runs.</source>
          <target state="translated">显示如果运行 cmdlet 则会发生什么情况。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The cmdlet is not run.Shows what would happen if the cmdlet runs.</source>
          <target state="translated">该 cmdlet 不会运行。显示在 cmdlet 运行时，会发生什么情况。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The cmdlet is not run.</source>
          <target state="translated">cmdlet 未运行。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">此 cmdlet 支持以下常见参数:-调试-ErrorAction、-ErrorVariable、-InformationAction、-InformationVariable、-OutVariable、-OutBuffer、-PipelineVariable、-Verbose、-WarningAction 和-WarningVariable。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">有关详细信息，请参阅 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">输入</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.PSObject</source>
          <target state="translated">System.Management.Automation.PSObject</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You can pipe any object to <bpt id="p1">**</bpt>Export-Clixml<ept id="p1">**</ept>.</source>
          <target state="translated">您可以通过管道传递任何对象传递给 <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">输出</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>System.IO.FileInfo</source>
          <target state="translated">System.IO.FileInfo</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Export-Clixml<ept id="p1">**</ept> creates a file that contains the XML.</source>
          <target state="translated"><bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept> 创建包含的 XML 文件。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">相关的链接</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Use PowerShell to Pass Credentials to Legacy Systems</source>
          <target state="translated">使用 PowerShell 将凭据传递到原来的系统</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Securely Store Credentials on Disk</source>
          <target state="translated">在磁盘上安全地存储凭据</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>ConvertTo-Html</source>
          <target state="translated">ConvertTo-Html</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>ConvertTo-Xml</source>
          <target state="translated">ConvertTo-Xml</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Export-Csv</source>
          <target state="translated">Export-Csv</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Import-Clixml</source>
          <target state="translated">导入 Clixml</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>