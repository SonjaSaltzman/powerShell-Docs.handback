<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-56a7a5e" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e6f58860c7aebcf60d8df562f009fce0db3c955</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\cookbooks\Getting-WMI-Objects--Get-WmiObject-.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">680809545ec4f06e2a2f6fcacacd14ba3c89f051</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting WMI Objects  Get WmiObject</source>
          <target state="translated">获取 WMI 对象 (Get WmiObject)</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell,cmdlet</source>
          <target state="translated">powershell,cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Getting WMI Objects (Get-WmiObject)</source>
          <target state="translated">获取 WMI 对象 (Get-WmiObject)</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting WMI Objects (Get<ph id="ph1">\-</ph>WmiObject)</source>
          <target state="translated">获取 WMI 对象 (Get<ph id="ph1">\-</ph>WmiObject)</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Windows Management Instrumentation (WMI) is a core technology for Windows system administration because it exposes a wide range of information in a uniform manner.</source>
          <target state="translated">Windows Management Instrumentation (WMI) 是 Windows 系统管理的核心技术，因为它以统一的方式公开大量信息。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Because of how much WMI makes possible, the Windows PowerShell cmdlet for accessing WMI objects, <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>WmiObject<ept id="p1">**</ept>, is one of the most useful for doing real work.</source>
          <target state="translated">由于 WMI 可实现的效果，用于访问 WMI 对象的 Windows PowerShell cmdlet <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>WmiObject<ept id="p1">**</ept> 是进行实际工作最有用的对象之一。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>We are going to discuss how to use Get<ph id="ph1">\-</ph>WmiObject to access WMI objects and then how to use WMI objects to do specific things.</source>
          <target state="translated">我们将讨论如何使用 Get<ph id="ph1">\-</ph>WmiObject 访问 WMI 对象以及如何使用 WMI 对象执行特定操作。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Listing WMI Classes</source>
          <target state="translated">列出 WMI 类</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The first problem most WMI users encounter is trying to find out what can be done with WMI.</source>
          <target state="translated">大多数 WMI 用户遇到的第一个问题就是尝试了解 WMI 可执行的操作。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>WMI classes describe the resources that can be managed.</source>
          <target state="translated">WMI 类描述了可管理的资源。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>There are hundreds of WMI classes, some of which contain dozens of properties.</source>
          <target state="translated">有成百上千的 WMI 类，其中一些包含数十个属性。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>WmiObject<ept id="p1">**</ept> addresses this problem by making WMI discoverable.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>WmiObject<ept id="p1">**</ept> 通过使 WMI 可发现来解决此问题。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can get a list of the WMI classes available on the local computer by typing:</source>
          <target state="translated">通过键入以下内容，可以获取在本地计算机上可用的 WMI 类的列表：</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can retrieve the same information from a remote computer by using the ComputerName parameter, specifying a computer name or IP address:</source>
          <target state="translated">可以通过使用 ComputerName 参数指定计算机名称或 IP 地址，而从远程计算机中检索相同信息：</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The class listing returned by remote computers may vary due to the specific operating system the computer is running and the particular WMI extensions added by installed applications.</source>
          <target state="translated">由于计算机正在运行的特定操作系统和已安装应用程序添加的特定 WMI 扩展，远程计算机返回的类列表可能不同。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When using Get<ph id="ph1">\-</ph>WmiObject to connect to a remote computer, the remote computer must be running WMI and, under the default configuration, the account you are using must be in the local administrators group on the remote computer.</source>
          <target state="translated">使用 Get<ph id="ph1">\-</ph>WmiObject 连接到远程计算机时，远程计算机必须正在运行 WMI，并且在默认配置下，所用帐户在远程计算机上必须位于本地管理员组中。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The remote system does not need to have Windows PowerShell installed.</source>
          <target state="translated">远程系统不需要安装 Windows PowerShell。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This allows you to administer operating systems that are not running Windows PowerShell, but do have WMI available.</source>
          <target state="translated">这让你能够管理未运行 Windows PowerShell 的操作系统，但爱你过务必使 WMI 可用。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can even include the ComputerName when connecting to the local system.</source>
          <target state="translated">连接到本地系统时，甚至可以包括 ComputerName。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can use the local computer's name, its IP address (or the loopback address 127.0.0.1), or the WMI<ph id="ph1">\-</ph>style '.' as the computer name.</source>
          <target state="translated">可以将本地计算机的名称、IP 地址（或环回地址 127.0.0.1）或 WMI 样式“.”作为计算机名。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you are running Windows PowerShell on a computer named Admin01 with IP address 192.168.1.90, the following commands will all return the WMI class listing for that computer:</source>
          <target state="translated">如果在名为 Admin01 且 IP 地址为 192.168.1.90 计算机上运行 Windows PowerShell，以下所有命令将返回该计算机的 WMI 类列表：</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Get<ph id="ph1">\-</ph>WmiObject uses the root<ph id="ph2">\/</ph>cimv2 namespace by default.</source>
          <target state="translated">Get<ph id="ph1">\-</ph>WmiObject 默认使用 root<ph id="ph2">\/</ph>cimv2 命名空间。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you want to specify another WMI namespace, use the <bpt id="p1">**</bpt>Namespace<ept id="p1">**</ept> parameter and specify the corresponding namespace path:</source>
          <target state="translated">如果你想指定其他 WMI 命名空间，请使用 <bpt id="p1">**</bpt>Namespace<ept id="p1">**</ept> 参数并指定相应的命名空间路径：</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Displaying WMI Class Details</source>
          <target state="translated">显示 WMI 类详细信息</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you already know the name of a WMI class, you can use it to get information immediately.</source>
          <target state="translated">如果已知 WMI 类的名称，即可使用它获取信息。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, one of the WMI classes commonly used for retrieving information about a computer is <bpt id="p1">**</bpt>Win32<ph id="ph1">\_</ph>OperatingSystem<ept id="p1">**</ept>.</source>
          <target state="translated">例如，常用于检索有关计算机信息的 WMI 类之一是 <bpt id="p1">**</bpt>Win32<ph id="ph1">\_</ph>OperatingSystem<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Although we are showing all of the parameters, the command can be expressed in a more succinct way.</source>
          <target state="translated">尽管我们显示了所有参数，但可以用更简洁的方式表达该命令。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ComputerName<ept id="p1">**</ept> parameter is not necessary when connecting to the local system.</source>
          <target state="translated">连接到本地系统时不需要使用 <bpt id="p1">**</bpt>ComputerName<ept id="p1">**</ept> 参数。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>We show it to demonstrate the most general case and remind you about the parameter.</source>
          <target state="translated">我们显示它是为了演示最常见的情况以及提醒与参数有关的事项。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Namespace<ept id="p1">**</ept> defaults to root<ph id="ph1">\/</ph>cimv2, and can be omitted as well.</source>
          <target state="translated"><bpt id="p1">**</bpt>Namespace<ept id="p1">**</ept> 默认为 root<ph id="ph1">\/</ph>cimv2，也可以省略。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Finally, most cmdlets allow you to omit the name of common parameters.</source>
          <target state="translated">最后，大多数 cmdlet 都允许省略通用参数的名称。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>With Get<ph id="ph1">\-</ph>WmiObject, if no name is specified for the first parameter, Windows PowerShell treats it as the <bpt id="p1">**</bpt>Class<ept id="p1">**</ept> parameter.</source>
          <target state="translated">使用 Get<ph id="ph1">\-</ph>WmiObject 时，如果未指定第一个参数的名称，则 Windows PowerShell 会将其视为 <bpt id="p1">**</bpt>Class<ept id="p1">**</ept> 参数。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This means the last command could have been issued by typing:</source>
          <target state="translated">这意味着最后一个命令可能是通过键入以下内容发出的：</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Win32<ph id="ph1">\_</ph>OperatingSystem<ept id="p1">**</ept> class has many more properties than those displayed here.</source>
          <target state="translated"><bpt id="p1">**</bpt>Win32<ph id="ph1">\_</ph>OperatingSystem<ept id="p1">**</ept> 类拥有的属性远多于此处显示的属性。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can use Get<ph id="ph1">\-</ph>Member to see all the properties.</source>
          <target state="translated">可以使用 Get<ph id="ph1">\-</ph>Member 查看所有属性。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The properties of a WMI class are automatically available like other object properties:</source>
          <target state="translated">WMI 类的属性与其他对象属性一样自动可用：</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Displaying Non<ph id="ph1">\-</ph>Default Properties with Format Cmdlets</source>
          <target state="translated">通过 Format Cmdlet 显示非默认属性</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you want information contained in the <bpt id="p1">**</bpt>Win32<ph id="ph1">\_</ph>OperatingSystem<ept id="p1">**</ept> class that is not displayed by default, you can display it by using the <bpt id="p2">**</bpt>Format<ept id="p2">**</ept> cmdlets.</source>
          <target state="translated">如果需要 <bpt id="p1">**</bpt>Win32<ph id="ph1">\_</ph>OperatingSystem<ept id="p1">**</ept> 类中所包含的默认不显示的信息，可以通过使用 <bpt id="p2">**</bpt>Format<ept id="p2">**</ept> cmdlet 显示它们。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, if you want to display available memory data, type:</source>
          <target state="translated">例如，如果你想显示可用内存数据，请键入：</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Wildcards work with property names in <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Table<ept id="p1">**</ept>, so the final pipeline element can be reduced to <bpt id="p2">**</bpt>Format<ph id="ph2">\-</ph>Table <ph id="ph3">\-</ph>Property TotalV<ph id="ph4">\&amp;</ph>#42;,Free<ph id="ph5">\&amp;</ph>#42;<ept id="p2">**</ept></source>
          <target state="translated">由于通配符可与 <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Table<ept id="p1">**</ept> 中的属性名配合使用，因此最终的管道元素可缩减为 <bpt id="p2">**</bpt>Format<ph id="ph2">\-</ph>Table <ph id="ph3">\-</ph>Property TotalV<ph id="ph4">\&amp;</ph>#42;,Free<ph id="ph5">\&amp;</ph>#42;<ept id="p2">**</ept></target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The memory data might be more readable if you format it as a list by typing:</source>
          <target state="translated">通过键入以下内容将内存数据的格式设置为列表可提高其可读性：</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>