<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a05e4c942ee70d02675c5dcffc9acfdb9e898df9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\New-Module.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de57bdcd7976db6d1375067ed2ea0bdee1c8431b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">857478771e86fbb3f381f716b6d53d57e2f2bd5f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>New-Module</source>
          <target state="translated">New-Module</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>New-Module</source>
          <target state="translated">New-Module</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">简述</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Creates a new dynamic module that exists only in memory.</source>
          <target state="translated">创建一个仅存在于内存中的新动态模块。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">语法</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>ScriptBlock (Default)</source>
          <target state="translated">ScriptBlock （默认值）</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">名称</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>New-Module<ept id="p1">**</ept> cmdlet creates a dynamic module from a script block.</source>
          <target state="translated"> <bpt id="p1">**</bpt>New-module<ept id="p1">**</ept> cmdlet 可从脚本块中创建动态模块。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The members of the dynamic module, such as functions and variables, are immediately available in the session and remain available until you close the session.</source>
          <target state="translated">动态模块的成员（如函数和变量）在会话中立即可用并保持可用状态，直到关闭此会话。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Like static modules, by default, the cmdlets and functions in a dynamic module are exported and the variables and aliases are not.</source>
          <target state="translated">类似于静态模块，默认情况下，将导出动态模块中的 cmdlet 和函数，而不导出变量和别名。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, you can use the Export-ModuleMember cmdlet and the parameters of <bpt id="p1">**</bpt>New-Module<ept id="p1">**</ept> to override the defaults.</source>
          <target state="translated">但是，可以使用 Export-modulemember cmdlet 和参数的 <bpt id="p1">**</bpt>New-module<ept id="p1">**</ept> 重写默认值。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can also use the <bpt id="p1">*</bpt>AsCustomObject<ept id="p1">*</ept> parameter of <bpt id="p2">**</bpt>New-Module<ept id="p2">**</ept> to return the dynamic module as a custom object.</source>
          <target state="translated">您还可以使用 <bpt id="p1">*</bpt>AsCustomObject<ept id="p1">*</ept> 参数 <bpt id="p2">**</bpt>New-module<ept id="p2">**</ept> 返回作为自定义对象的动态模块。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The members of the modules, such as functions, are implemented as script methods of the custom object instead of being imported into the session.</source>
          <target state="translated">将模块的成员（例如函数）实现为自定义对象的脚本方法，而不是将其导入到会话中。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Dynamic modules exist only in memory, not on disk.</source>
          <target state="translated">动态模块只存在于内存，不是磁盘上。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Like all modules, the members of dynamic modules run in a private module scope that is a child of the global scope.</source>
          <target state="translated">类似于所有模块，动态模块的成员在专用模块作用域中运行，此作用域是全局作用域的子级。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Get-Module cannot get a dynamic module, but Get-Command can get the exported members.</source>
          <target state="translated">Get-Module 无法获取动态模块，但 Get-Command 可以获取导出的成员。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To make a dynamic module available to <bpt id="p1">**</bpt>Get-Module<ept id="p1">**</ept>, pipe a <bpt id="p2">**</bpt>New-Module<ept id="p2">**</ept> command to Import-Module, or pipe the module object that <bpt id="p3">**</bpt>New-Module<ept id="p3">**</ept> returns to <bpt id="p4">**</bpt>Import-Module<ept id="p4">**</ept>.</source>
          <target state="translated">要使动态模块可用于 <bpt id="p1">**</bpt>Get-module<ept id="p1">**</ept>, ，管道 <bpt id="p2">**</bpt>New-module<ept id="p2">**</ept> 命令可以导入模块或管道将模块对象 <bpt id="p3">**</bpt>New-module<ept id="p3">**</ept> 返回 <bpt id="p4">**</bpt>导入模块<ept id="p4">**</ept>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This action adds the dynamic module to the <bpt id="p1">**</bpt>Get-Module<ept id="p1">**</ept> list, but it does not save the module to disk or make it persistent.</source>
          <target state="translated">此操作将添加到的动态模块 <bpt id="p1">**</bpt>Get-module<ept id="p1">**</ept> 列表中，但它不会保存到磁盘或让其保持不变的模块。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">示例</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example 1: Create a dynamic module</source>
          <target state="translated">示例 1︰ 创建动态模块</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This command creates a new dynamic module with a function called Hello.</source>
          <target state="translated">此命令创建一个新的动态模块名为 Hello 的函数。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The command returns a module object that represents the new dynamic module.</source>
          <target state="translated">此命令返回表示新的动态模块的模块对象。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example 2: Working with dynamic modules and Get-Module and Get-Command</source>
          <target state="translated">示例 2︰ 处理动态模块和 Get-module 以及 Get 命令</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This example demonstrates that dynamic modules are not returned by the <bpt id="p1">**</bpt>Get-Module<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">此示例演示动态模块不由 <bpt id="p1">**</bpt>Get-module<ept id="p1">**</ept> cmdlet。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The members that they export are returned by the <bpt id="p1">**</bpt>Get-Command<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">他们将导出的成员返回的 <bpt id="p1">**</bpt>Get-command<ept id="p1">**</ept> cmdlet。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Example 3: Export a variable into the current session</source>
          <target state="translated">示例 3︰ 将导出到当前会话的变量</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This command uses the <bpt id="p1">**</bpt>Export-ModuleMember<ept id="p1">**</ept> cmdlet to export a variable into the current session.</source>
          <target state="translated">此命令使用 <bpt id="p1">**</bpt>Export-modulemember<ept id="p1">**</ept> cmdlet 导出到当前会话的变量。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Without the <bpt id="p1">**</bpt>Export-ModuleMember<ept id="p1">**</ept> command, only the function is exported.</source>
          <target state="translated">而无需 <bpt id="p1">**</bpt>Export-modulemember<ept id="p1">**</ept> 命令时，该函数只导出。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The output shows that both the variable and the function were exported into the session.</source>
          <target state="translated">输出显示已将变量和函数导出到会话中。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Example 4: Make a dynamic module available to Get-Module</source>
          <target state="translated">示例 4︰ 供动态模块获取模块</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This command demonstrates that you can make a dynamic module available to <bpt id="p1">**</bpt>Get-Module<ept id="p1">**</ept> by piping the dynamic module to <bpt id="p2">**</bpt>Import-Module<ept id="p2">**</ept>.</source>
          <target state="translated">此命令演示，您可以将动态模块提供给 <bpt id="p1">**</bpt>Get-module<ept id="p1">**</ept> 通过管道传送到的动态模块 <bpt id="p2">**</bpt>导入模块<ept id="p2">**</ept>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The first command uses a pipeline operator (|) to send the module object that <bpt id="p1">**</bpt>New-Module<ept id="p1">**</ept> generates to the <bpt id="p2">**</bpt>Import-Module<ept id="p2">**</ept> cmdlet.</source>
          <target state="translated">第一个命令使用管道运算符 (|) 将发送该模块对象 <bpt id="p1">**</bpt>New-module<ept id="p1">**</ept> 生成到 <bpt id="p2">**</bpt>导入模块<ept id="p2">**</ept> cmdlet。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">*</bpt>Name<ept id="p1">*</ept> parameter of <bpt id="p2">**</bpt>New-Module<ept id="p2">**</ept> to assign a friendly name to the module.</source>
          <target state="translated">该命令使用 <bpt id="p1">*</bpt>名称<ept id="p1">*</ept> 参数 <bpt id="p2">**</bpt>New-module<ept id="p2">**</ept> 要分配给该模块的友好名称。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Because <bpt id="p1">**</bpt>Import-Module<ept id="p1">**</ept> does not return any objects by default, there is no output from this command.</source>
          <target state="translated">因为 <bpt id="p1">**</bpt>导入模块<ept id="p1">**</ept> 不返回任何对象默认情况下，此命令从没有输出。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The second command uses <bpt id="p1">**</bpt>Get-Module<ept id="p1">**</ept> to get the modules in the session.</source>
          <target state="translated">第二个命令使用 <bpt id="p1">**</bpt>Get-module<ept id="p1">**</ept> 来获取会话中的模块。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The result shows that <bpt id="p1">**</bpt>Get-Module<ept id="p1">**</ept> can get the new dynamic module.</source>
          <target state="translated">结果显示 <bpt id="p1">**</bpt>Get-module<ept id="p1">**</ept> 可以获得新的动态模块。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The third command uses the <bpt id="p1">**</bpt>Get-Command<ept id="p1">**</ept> cmdlet to get the Hello function that the dynamic module exports.</source>
          <target state="translated">第三个命令使用 <bpt id="p1">**</bpt>Get-command<ept id="p1">**</ept> cmdlet 来获取动态模块导出的 Hello 函数。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Example 5: Generate a custom object that has exported functions</source>
          <target state="translated">示例 5︰ 生成已导出的函数的自定义对象</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">*</bpt>AsCustomObject<ept id="p1">*</ept> parameter of <bpt id="p2">**</bpt>New-Module<ept id="p2">**</ept> to generate a custom object that has script methods that represent the exported functions.</source>
          <target state="translated">此示例演示如何使用 <bpt id="p1">*</bpt>AsCustomObject<ept id="p1">*</ept> 参数 <bpt id="p2">**</bpt>New-module<ept id="p2">**</ept> 来生成一个具有表示导出的函数的脚本方法的自定义对象。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The first command uses the <bpt id="p1">**</bpt>New-Module<ept id="p1">**</ept> cmdlet to generate a dynamic module with two functions, Hello and Goodbye.</source>
          <target state="translated">第一个命令使用 <bpt id="p1">**</bpt>New-module<ept id="p1">**</ept> cmdlet 以 Hello 和 Goodbye 生成两个函数的动态模块。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">*</bpt>AsCustomObject<ept id="p1">*</ept> parameter to generate a custom object instead of the PSModuleInfo object that <bpt id="p2">**</bpt>New-Module<ept id="p2">**</ept> generates by default.</source>
          <target state="translated">该命令使用 <bpt id="p1">*</bpt>AsCustomObject<ept id="p1">*</ept> 参数来生成自定义对象而不是 PSModuleInfo 对象 <bpt id="p2">**</bpt>New-module<ept id="p2">**</ept> 默认情况下生成。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The command saves the custom object in the $m variable.</source>
          <target state="translated">该命令将自定义对象保存在 $m 变量中。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The second command attempts to display the value of the $m variable.</source>
          <target state="translated">第二个命令尝试显示 $m 变量的值。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>No content appears.</source>
          <target state="translated">不显示任何内容。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The third command uses a pipeline operator to send the custom object to the <bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> cmdlet, which displays the properties and methods of the custom object.</source>
          <target state="translated">第三个命令使用管道运算符将发送到的自定义对象 <bpt id="p1">**</bpt>Get-member<ept id="p1">**</ept> cmdlet，后者会显示的属性和自定义对象的方法。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The output shows that the object has script methods that represent the Hello and Goodbye functions.</source>
          <target state="translated">输出显示对象具有表示 Hello 和 Goodbye 函数的脚本方法。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The fourth and fifth commands use the script method format to call the Hello and Goodbye functions.</source>
          <target state="translated">第四个和第五个命令使用脚本方法格式来调用 Hello 和 Goodbye 函数。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Example 6: Get the results of the script block</source>
          <target state="translated">示例 6︰ 获取该脚本块的结果</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This command uses the <bpt id="p1">*</bpt>ReturnResult<ept id="p1">*</ept> parameter to request the results of running the script block instead of requesting a module object.</source>
          <target state="translated">此命令使用 <bpt id="p1">*</bpt>ReturnResult<ept id="p1">*</ept> 参数来请求运行而不是请求模块对象的脚本块的结果。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The script block in the new module defines the SayHello function and then calls the function.</source>
          <target state="translated">新模块中的脚本块定义 SayHello 函数，然后调用该函数。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">参数</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>-ArgumentList</source>
          <target state="translated">-ArgumentList</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Specifies an array of arguments which are parameter values that are passed to the script block.</source>
          <target state="translated">指定参数传递到脚本块的参数值的数组。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>-AsCustomObject</source>
          <target state="translated">-AsCustomObject</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Indicates that this cmdlet returns a custom object that represents the dynamic module.</source>
          <target state="translated">指示此 cmdlet 返回一个表示动态模块的自定义对象。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The module members are implemented as script methods of the custom object, but they are not imported into the session.</source>
          <target state="translated">将模块成员实现为自定义对象的脚本方法，但是不将它们导入到会话中。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can save the custom object in a variable and use dot notation to invoke the members.</source>
          <target state="translated">可以在变量中保存自定义对象，并使用点表示法来调用成员。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If the module has multiple members with the same name, such as a function and a variable that are both named A, only one member with each name can be accessed from the custom object.</source>
          <target state="translated">如果模块有一个同名的多个成员，如函数和变量，都名为 A，每个名称只有一个成员可以从访问自定义对象。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>-Cmdlet</source>
          <target state="translated">-Cmdlet</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Specifies an array of cmdlets that this cmdlet exports from the module into the current session.</source>
          <target state="translated">指定此 cmdlet 将从到当前会话的模块导出的 cmdlet 的数组。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Enter a comma-separated list of cmdlets.</source>
          <target state="translated">输入以逗号分隔的 cmdlet 列表。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Wildcard characters are permitted.</source>
          <target state="translated">允许使用通配符。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>By default, all cmdlets in the module are exported.</source>
          <target state="translated">默认情况下，导出模块中的所有 cmdlet。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You cannot define cmdlets in a script block, but a dynamic module can include cmdlets if it imports the cmdlets from a binary module.</source>
          <target state="translated">你无法在脚本块中定义 cmdlet，但如果从二进制模块导入 cmdlet，则动态模块可以包含 cmdlet。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>-Function</source>
          <target state="translated">函数指针</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Specifies an array of functions that this cmdlet exports from the module into the current session.</source>
          <target state="translated">指定此 cmdlet 将从到当前会话的模块导出的函数的数组。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Enter a comma-separated list of functions.</source>
          <target state="translated">输入以逗号分隔的函数列表。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Wildcard characters are permitted.</source>
          <target state="translated">允许使用通配符。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>By default, all functions defined in a module are exported.</source>
          <target state="translated">默认情况下，导出模块中定义的所有函数。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>-Name</source>
          <target state="translated">-Name</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Specifies a name for the new module.</source>
          <target state="translated">指定新模块的名称。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can also pipe a module name to New-Module.</source>
          <target state="translated">还可以通过管道将模块的名称传递给 New-Module。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The default value is an autogenerated name that starts with <ph id="ph1">`__DynamicModule_`</ph> and is followed by a GUID that specifies the path of the dynamic module.</source>
          <target state="translated">默认值是自动生成的名称开头 <ph id="ph1">`__DynamicModule_`</ph> 后, 跟一个 GUID，用于指定动态模块的路径。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>-ReturnResult</source>
          <target state="translated">-ReturnResult</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Indicates that this cmdlet runs the script block and returns the script block results instead of returning a module object.</source>
          <target state="translated">指示此 cmdlet 运行该脚本块，并返回脚本块结果，而不是返回模块对象。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>-ScriptBlock</source>
          <target state="translated">-ScriptBlock</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Specifies the contents of the dynamic module.</source>
          <target state="translated">指定动态模块的内容。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Enclose the contents in braces ( { } ) to create a script block.</source>
          <target state="translated">用大括号 ({ }) 括起内容以创建脚本块。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This parameter is required.</source>
          <target state="translated">此参数是必需的。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">此 cmdlet 支持以下常见参数:-调试-ErrorAction、-ErrorVariable、-InformationAction、-InformationVariable、-OutVariable、-OutBuffer、-PipelineVariable、-Verbose、-WarningAction 和-WarningVariable。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">有关详细信息，请参阅 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">输入</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>System.String</source>
          <target state="translated">System.String</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You can pipe a module name to this cmdlet.</source>
          <target state="translated">您可以通过管道将模块名称传递给此 cmdlet。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">输出</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.PSModuleInfo, System.Management.Automation.PSCustomObject, or None</source>
          <target state="translated">System.Management.Automation.PSModuleInfo、 System.Management.Automation.PSCustomObject，或无。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This cmdlet generates a <bpt id="p1">**</bpt>PSModuleInfo<ept id="p1">**</ept> object, by default.</source>
          <target state="translated">此 cmdlet 生成 <bpt id="p1">**</bpt>PSModuleInfo<ept id="p1">**</ept> 对象，默认情况下的。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If you use the <bpt id="p1">*</bpt>AsCustomObject<ept id="p1">*</ept> parameter, it generates a <bpt id="p2">**</bpt>PSCustomObject<ept id="p2">**</ept> object.</source>
          <target state="translated">如果您使用 <bpt id="p1">*</bpt>AsCustomObject<ept id="p1">*</ept> 参数，它会生成 <bpt id="p2">**</bpt>PSCustomObject<ept id="p2">**</ept> 对象。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If you use the <bpt id="p1">*</bpt>ReturnResult<ept id="p1">*</ept> parameter, it returns the result of evaluating the script block in the dynamic module.</source>
          <target state="translated">如果您使用 <bpt id="p1">*</bpt>ReturnResult<ept id="p1">*</ept> 参数，它将返回对动态模块中的脚本块评估的结果。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You can also refer to <bpt id="p1">**</bpt>New-Module<ept id="p1">**</ept> by its alias, <bpt id="p2">**</bpt>nmo<ept id="p2">**</ept>.</source>
          <target state="translated">此外可以指 <bpt id="p1">**</bpt>New-module<ept id="p1">**</ept> 别名来对其 <bpt id="p2">**</bpt>nmo<ept id="p2">**</ept>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For more information, see about_Aliases.</source>
          <target state="translated">有关详细信息，请参阅 about_Aliases。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">相关的链接</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Export-ModuleMember</source>
          <target state="translated">Export-ModuleMember</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Get-Module</source>
          <target state="translated">Get-Module</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Import-Module</source>
          <target state="translated">Import-Module</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Remove-Module</source>
          <target state="translated">Remove-Module</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>about_Modules</source>
          <target state="translated">about_Modules</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>