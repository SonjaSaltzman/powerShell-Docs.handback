<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e620fef5b62433070bfd04bc495056e564de41e9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Command_Syntax.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb14a85e5d6bab6ede692b8def05bad9317ec96c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c96b9be7b0637652b65b752c362b6c889bd55ba</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Command_Syntax</source>
          <target state="translated">about_Command_Syntax</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Command Syntax</source>
          <target state="translated">有关命令语法</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Command_Syntax</source>
          <target state="translated">about_Command_Syntax</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Command_Syntax</source>
          <target state="translated">about_Command_Syntax</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">简短说明</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes the syntax diagrams that are used in Windows PowerShell.</source>
          <target state="translated">介绍了 Windows PowerShell 中使用的语法关系图。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">详细说明</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The Get-Help and Get-Command cmdlets display syntax diagrams to help you construct commands correctly.</source>
          <target state="translated">Get-help 和 Get-command cmdlet 显示语法关系图来帮助您正确构造的命令。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This topic explains how to interpret the syntax diagrams.</source>
          <target state="translated">本主题说明如何解释的语法关系图。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Syntax Diagrams Each paragraph in a command syntax diagram represents a valid form of the command.</source>
          <target state="translated">语法关系图的每个段落的命令语法关系图表示有效的命令形式。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To construct a command, follow the syntax diagram from left to right.</source>
          <target state="translated">若要构造一个命令，按照此语法关系图从左到右。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Select from among the optional parameters and provide values for the placeholders.</source>
          <target state="translated">从可选的参数中进行选择，并提供的占位符的值。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Windows PowerShell uses the following notation for syntax diagrams.</source>
          <target state="translated">Windows PowerShell 语法关系图中使用以下表示法。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>&lt;command-name&gt; -<ph id="ph1">&lt;Required Parameter Name&gt;</ph> <ph id="ph2">&lt;Required Parameter Value&gt;</ph> [-<ph id="ph3">&lt;Optional Parameter Name&gt;</ph> <ph id="ph4">&lt;Optional Parameter Value&gt;</ph>] [-<ph id="ph5">&lt;Optional Switch Parameters&gt;</ph>] [-<ph id="ph6">&lt;Optional Parameter Name&gt;</ph>]</source>
          <target state="translated">&lt; 命令-名称 &gt;-<ph id="ph1">&lt;Required Parameter Name&gt;</ph> <ph id="ph2">&lt;Required Parameter Value&gt;</ph> [-<ph id="ph3">&lt;Optional Parameter Name&gt;</ph> <ph id="ph4">&lt;Optional Parameter Value&gt;</ph>] [-<ph id="ph5">&lt;Optional Switch Parameters&gt;</ph>] [-<ph id="ph6">&lt;Optional Parameter Name&gt;</ph>]</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following is the syntax for the New-Alias cmdlet.</source>
          <target state="translated">下面是 New-alias cmdlet 的语法。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>New-Alias [-Name] <ph id="ph1">&lt;string&gt;</ph> [-Value] <ph id="ph2">&lt;string&gt;</ph> [-Description <ph id="ph3">&lt;string&gt;</ph>] [-Force] [-Option {None | ReadOnly | Constant | Private | AllScope}] [-PassThru] [-Scope <ph id="ph4">&lt;string&gt;</ph>] [-Confirm] [-WhatIf] [<ph id="ph5">&lt;CommonParameters&gt;</ph>]</source>
          <target state="translated">新别名 [-名称] <ph id="ph1">&lt;string&gt;</ph> [-值] <ph id="ph2">&lt;string&gt;</ph> [-说明 <ph id="ph3">&lt;string&gt;</ph>] [-Force] [-选项 {None |ReadOnly |常量 |专用 |AllScope}] [-PassThru] [-作用域 <ph id="ph4">&lt;string&gt;</ph>] [-确认] [-WhatIf] [<ph id="ph5">&lt;CommonParameters&gt;</ph>]</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The syntax is capitalized for readability, but Windows PowerShell is case-insensitive.</source>
          <target state="translated">语法采用大写形式，为了提高可读性，但 Windows PowerShell 不区分大小写。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The syntax diagram has the following elements.</source>
          <target state="translated">此语法关系图具有以下元素。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Command name</source>
          <target state="translated">命令名称</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Commands always begin with a command name, such as New-Alias.</source>
          <target state="translated">命令始终以开头的命令名称，如 New-alias。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Type the command name or its alias, such a "gcm" for Get-Command.</source>
          <target state="translated">键入命令名称或其别名，这种"gcm"Get 命令。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">参数</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The parameters of a command are options that determine what the command does.</source>
          <target state="translated">命令的参数是确定该命令的行为的选项。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Some parameters take a "value," which is user input to the command.</source>
          <target state="translated">某些参数采用"值，"这是命令的用户输入。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, the Get-Help command has a Name parameter that lets you specify the name of the topic for which help is displayed.</source>
          <target state="translated">例如，Get-help 命令具有一个名称参数，它允许您指定将显示帮助主题的名称。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The topic name is the value of the Name parameter.</source>
          <target state="translated">主题名称是 Name 参数的值。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In a Windows PowerShell command, parameter names always begin with a hyphen.</source>
          <target state="translated">在 Windows PowerShell 命令中，参数名称始终以连字符开头。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The hyphen tells Windows PowerShell that the item in the command is a parameter name.</source>
          <target state="translated">连字符的位置告知 Windows PowerShell 命令中的项是参数名称。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, to use the Name parameter of New-Alias, you type the following:</source>
          <target state="translated">例如，若要使用 New-alias 的 Name 参数，则键入以下命令︰</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>-Name</source>
          <target state="translated">-Name</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Parameters can be mandatory or optional.</source>
          <target state="translated">参数可以是强制的还是可选。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In a syntax diagram, optional items are enclosed in brackets ([ ]).</source>
          <target state="translated">在语法关系图中，可选项括在方括号 ([])。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information about parameters, see about_Parameters.</source>
          <target state="translated">有关参数的详细信息，请参阅 about_Parameters。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Parameter Values</source>
          <target state="translated">参数值</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A parameter value is the input that the parameter takes.</source>
          <target state="translated">参数值是此参数采用的输入。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Because Windows PowerShell is based on the Microsoft .NET Framework, parameter values are represented in the syntax diagram by their .NET type.</source>
          <target state="translated">由于 Windows PowerShell 基于 Microsoft.NET Framework，参数值按其.NET 类型表示在此语法关系图中。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, the Name parameter of Get-Help takes a String value, which is a text string, such as a single word or multiple words enclosed in quotation marks.</source>
          <target state="translated">例如，获取帮助的 Name 参数采用一个字符串值，这是一个文本字符串，例如单个单词或用引号引起来的多个单词。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>[-Name]</source>
          <target state="translated">[-名称]</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The .NET type of a parameter value is enclosed in angle brackets (&lt; &gt;) to indicate that it is placeholder for a value and not a literal that you type in a command.</source>
          <target state="translated">参数值的.NET 类型被括在尖括号 （&lt;&gt;） 以指示它是一个值，并不在命令中键入的文本的占位符。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To use the parameter, replace the .NET type placeholder with an object that has the specified .NET type.</source>
          <target state="translated">若要使用该参数，将.NET 类型占位符替换为具有指定的.NET 类型的对象。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For example, to use the Name parameter, type "-Name" followed by a string, such as the following:</source>
          <target state="translated">例如，若要使用 Name 参数，请键入"-名称"后面是一个字符串，如下所示︰</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>-Name MyAlias</source>
          <target state="translated">-名称 MyAlias</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Parameters with no values</source>
          <target state="translated">具有任何值的参数</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Some parameters do not accept input, so they do not have a parameter value.</source>
          <target state="translated">某些参数不接受输入，因此它们不具有参数值。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Parameters without values are called "switch parameters" because they work like on/off switches.</source>
          <target state="translated">因为关闭开关可以像参数而无需值称为"开关参数"。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You include them (on) or you omit them (off) from a command.</source>
          <target state="translated">你将其包含 （打开） 或忽略这些参数 (off) 从命令。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To use a switch parameter, just type the parameter name, preceded by a hyphen.</source>
          <target state="translated">若要使用开关参数，只需键入参数名称后, 跟一个连字符。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, to use the WhatIf parameter of the New-Alias cmdlet, type the following:</source>
          <target state="translated">例如，若要使用 New-alias cmdlet 的 WhatIf 参数，键入以下命令︰</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>-WhatIf</source>
          <target state="translated">-WhatIf</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Parameter Sets</source>
          <target state="translated">参数集</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The parameters of a command are listed in parameter sets.</source>
          <target state="translated">中的参数集列出了命令的参数。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Parameter sets look like the paragraphs of a syntax diagram.</source>
          <target state="translated">参数设置如下所示的语法关系图的各个段落。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The New-Alias cmdlet has one parameter set, but many cmdlets have multiple parameter sets.</source>
          <target state="translated">New-alias cmdlet 都有一个参数集，但许多 cmdlet 有多个参数集。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Some of the cmdlet parameters are unique to a parameter set, and others appear in multiple parameter sets.</source>
          <target state="translated">某些 cmdlet 参数是唯一的参数集，而其他人出现在多个参数集。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Each parameter set represents the format of a valid command.</source>
          <target state="translated">每个参数集表示一个有效的命令的格式。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A parameter set includes only parameters that can be used together in a command.</source>
          <target state="translated">参数集一起包括在命令中可以使用的参数。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If parameters cannot be used in the same command, they appear in separate parameter sets.</source>
          <target state="translated">如果不能在同一命令中使用参数，它们显示在单独的参数集。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, the Get-Random cmdlet has the following parameter sets:</source>
          <target state="translated">例如，Get-random cmdlet 都具有以下参数集︰</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Get-Random [[-Maximum] <ph id="ph1">&lt;Object&gt;</ph>] [-Minimum <ph id="ph2">&lt;Object&gt;</ph>] [-SetSeed <ph id="ph3">&lt;int&gt;</ph>] [<ph id="ph4">&lt;CommonParameters&gt;</ph>]</source>
          <target state="translated">Get-random [[-最大] <ph id="ph1">&lt;Object&gt;</ph>] [-最小值 <ph id="ph2">&lt;Object&gt;</ph>] [-SetSeed <ph id="ph3">&lt;int&gt;</ph>] [<ph id="ph4">&lt;CommonParameters&gt;</ph>]</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Get-Random [-InputObject] &lt;Object[]&gt; [-Count <ph id="ph1">&lt;int&gt;</ph>] [-SetSeed <ph id="ph2">&lt;int&gt;</ph>] [<ph id="ph3">&lt;CommonParameters&gt;</ph>]</source>
          <target state="translated">Get-random [-InputObject] &lt; 对象 [] &gt; [-计数 <ph id="ph1">&lt;int&gt;</ph>] [-SetSeed <ph id="ph2">&lt;int&gt;</ph>] [<ph id="ph3">&lt;CommonParameters&gt;</ph>]</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The first parameter set, which returns a random number, has the Minimum and Maximum parameters.</source>
          <target state="translated">第一个参数集，它将返回一个随机数字，具有最小值和最大值的参数。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The second parameter set, which returns a randomly selected object from a set of objects, includes the InputObject and Count parameters.</source>
          <target state="translated">第二个参数集，从一组对象返回一个随机选择的对象，包括 InputObject 和计数参数。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Both parameter sets have the Set-Seed parameter and the common parameters.</source>
          <target state="translated">这两个参数集具有设置种子参数和通用参数。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>These parameter sets indicate that you can use the InputObject and Count parameters in the same command, but you cannot use the Maximum and Count parameters in the same command.</source>
          <target state="translated">这些参数集表示可以在同一命令中，使用 InputObject 和计数参数，但不能在同一命令中使用的最大值和计数参数。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You indicate which parameter set you want to use by using the parameters in that parameter set.</source>
          <target state="translated">指示要使用的参数，因为参数设置哪些参数集。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>However, every cmdlet also has a default parameter set.</source>
          <target state="translated">但是，每个 cmdlet 还具有默认参数设置。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The default parameter set is used when you do not specify parameters that are unique to a parameter set.</source>
          <target state="translated">如果不指定参数是唯一的参数集，则使用默认参数集。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For example, if you use Get-Random without parameters, Windows PowerShell assumes that you are using the Number parameter set and it returns a random number.</source>
          <target state="translated">例如，如果 Get-random 使用不带参数后，Windows PowerShell 将假定您使用此数字参数集并返回一个随机数字。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In each parameter set, the parameters appear in position order.</source>
          <target state="translated">每个参数集，参数中的显示顺序位置。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The order of parameters in a command matters only when you omit the optional parameter names.</source>
          <target state="translated">仅当省略可选参数名称时，在命令中的参数的顺序非常重要。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When parameter names are omitted, Windows PowerShell assigns values to parameters by position and type.</source>
          <target state="translated">当省略参数名称时，Windows PowerShell 会将值分配给参数按位置和类型。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information about parameter position, see about_Parameters.</source>
          <target state="translated">有关参数位置的详细信息，请参阅 about_Parameters。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Symbols in Syntax Diagrams The syntax diagram lists the command name, the command parameters, and the parameter values.</source>
          <target state="translated">在语法中的符号图语法关系图中列出的命令名称、 命令参数和参数值。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>It also uses symbols to show how to construct a valid command.</source>
          <target state="translated">它还使用符号来显示如何构造一个有效的命令。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The syntax diagrams use the following symbols:</source>
          <target state="translated">语法关系图使用以下符号︰</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>-- A hyphen (-) indicates a parameter name.</source>
          <target state="translated">-一个连字符 （-） 指示参数名称。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In a command, type the hyphen immediately before the parameter name with no intervening spaces, as shown in the syntax diagram.</source>
          <target state="translated">在命令中，键入紧接在没有插入空格，参数名称之前连字符，此语法关系图中所示。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For example, to use the Name parameter of New-Alias, type:</source>
          <target state="translated">例如，若要使用 New-alias 的 Name 参数，请键入︰</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>-Name</source>
          <target state="translated">-Name</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>-- Angle brackets (&lt;&gt;) indicate placeholder text.</source>
          <target state="translated">-尖括号 （&lt;&gt;） 表示占位符文本。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You do not type the angle brackets or the placeholder text in a command.</source>
          <target state="translated">不要在命令中键入尖括号或占位符文本。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Instead, you replace it with the item that it describes.</source>
          <target state="translated">相反，您将其替换该准确描述的项目。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Angle brackets are used to identify the .NET type of the value that a parameter takes.</source>
          <target state="translated">尖括号用于标识参数采用的值的.NET 类型。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For example, to use the Name parameter of the New-Alias cmdlet, you replace the <ph id="ph1">&lt;string&gt;</ph> with a string, which is a single word or a group of words that are enclosed in quotation marks.</source>
          <target state="translated">例如，若要使用 New-alias cmdlet 的 Name 参数，则更换 <ph id="ph1">&lt;string&gt;</ph> 即，用字符串的单个词或的一组用引号引起来的单词。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>-- Brackets ([ ]) indicate optional items.</source>
          <target state="translated">-方括号 ([]) 表示可选的项目。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A parameter and its value can be optional, or the name of a required parameter can be optional.</source>
          <target state="translated">参数和它的值可以是可选的或所需的参数的名称可以是可选。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For example, the Description parameter of New-Alias and its value are enclosed in brackets because they are both optional.</source>
          <target state="translated">例如，New-alias 和它的值的说明参数括在方括号因为它们是二者均为可选。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>[-Description <ph id="ph1">&lt;string&gt;</ph>]</source>
          <target state="translated">[-说明 <ph id="ph1">&lt;string&gt;</ph>]</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The brackets also indicate that the Name parameter value (<ph id="ph1">&lt;string&gt;</ph>) is required, but the parameter name, "Name," is optional.</source>
          <target state="translated">括号还指示名称参数值 (<ph id="ph1">&lt;string&gt;</ph>) 是必需的参数名称，但是"Name"是可选的。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>[-Name]</source>
          <target state="translated">[-名称]</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>-- A right and left bracket ([]) appended to a .NET type indicates that the parameter can accept one or multiple values of that type.</source>
          <target state="translated">-一个右和向左方括号 ([]) 追加到一个.NET 类型指示该参数可以接受该类型的一个或多个值。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Enter the values in a comma-separated list.</source>
          <target state="translated">以逗号分隔的列表形式输入值。。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For example, the Name parameter of the New-Alias cmdlet takes only one string, but the Name parameter of Get-Process can take one or many strings.</source>
          <target state="translated">例如，New-alias cmdlet 的 Name 参数采用只有一个字符串，但获取进程的 Name 参数可以采用一个或多个字符串。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>New-Alias [-Name]</source>
          <target state="translated">新别名 [-名称]</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>New-Alias -Name MyAlias</source>
          <target state="translated">新别名的命名 MyAlias</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Get-Process [-Name] &lt;string[]&gt;</source>
          <target state="translated">获取进程 [-名称] &lt; string [] &gt;</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Get-Process -Name Explorer, Winlogon, Services</source>
          <target state="translated">Get-process-命名 Winlogon、 资源管理器服务</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>-- Braces ({}) indicate an "enumeration," which is a set of valid values for a parameter.</source>
          <target state="translated">-大括号 （{}） 表示"枚举中，"它是一组参数的有效值。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The values in the braces are separated by vertical bars ( | ).</source>
          <target state="translated">大括号中的值由竖线 (|) 分隔。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>These bars indicate an "exclusive or" choice, meaning that you can choose only one value from the set of values that are listed inside the braces.</source>
          <target state="translated">这些条竖线表示"异或"选择，这意味着，您可以选择只有一个值，从列出的大括号内的值的集合。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For example, the syntax for the New-Alias cmdlet includes the following value enumeration for the Option parameter:</source>
          <target state="translated">例如，New-alias cmdlet 的语法包括下面的值枚举选项参数︰</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>-Option {None | ReadOnly | Constant | Private | AllScope}</source>
          <target state="translated">-选项 {None |ReadOnly |常量 |专用 |AllScope}</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The braces and vertical bars indicate that you can choose any one of the listed values for the Option parameter, such as ReadOnly or AllScope.</source>
          <target state="translated">大括号和竖线表示，您可以选择任一选项参数，如 ReadOnly 或 AllScope 的列出的值。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>-Option ReadOnly</source>
          <target state="translated">选项 ReadOnly</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Optional Items Brackets ([]) surround optional items.</source>
          <target state="translated">可选项目方括号 ([]) 括起可选项目。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For example, in the New-Alias cmdlet syntax description, the Scope parameter is optional.</source>
          <target state="translated">例如，在 New-alias cmdlet 语法说明中，作用域参数是可选的。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This is indicated in the syntax by the brackets around the parameter name and type:</source>
          <target state="translated">这是由方括号的参数名称和类型来表示在语法中︰</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>[-Scope <ph id="ph1">&lt;string&gt;</ph>]</source>
          <target state="translated">[-作用域 <ph id="ph1">&lt;string&gt;</ph>]</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Both the following examples are correct uses of the New-Alias cmdlet:</source>
          <target state="translated">下面的示例是 New-alias cmdlet 的正确用法︰</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>New-Alias -Name utd -Value Update-TypeData New-Alias -Name utd -Value Update-TypeData -Scope global</source>
          <target state="translated">新建别名-名称 utd-值 Update-typedata New-alias-名称 utd-值 Update-typedata-全局作用域</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A parameter name can be optional even if the value for that parameter is required.</source>
          <target state="translated">参数名可以是可选的即使该参数的值是必需的。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This is indicated in the syntax by the brackets around the parameter name but not the parameter type, as in this example from the New-Alias cmdlet:</source>
          <target state="translated">这是由参数名称，但不是参数类型，如 New-alias cmdlet 从本示例中所示方括号来表示在语法中︰</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>[-Name] <ph id="ph1">&lt;string&gt;</ph> [-Value]</source>
          <target state="translated">[-名称] <ph id="ph1">&lt;string&gt;</ph> [-值]</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The following  commands correctly use the New-Alias cmdlet.</source>
          <target state="translated">下面的命令正确地使用 New-alias cmdlet。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The commands produce the same result.</source>
          <target state="translated">命令产生相同的结果。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>New-Alias -Name utd -Value Update-TypeData New-Alias -Name utd Update-TypeData New-Alias utd -Value Update-TypeData New-Alias utd Update-TypeData</source>
          <target state="translated">新建别名-名称 utd-值 Update-typedata New-alias-名称 utd Update-typedata New-alias utd-值 Update-typedata New-alias utd Update-typedata</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If the parameter name is not included in the statement as typed, Windows PowerShell tries to use the position of the arguments to assign the values to parameters.</source>
          <target state="translated">如果参数名称不包含键入的语句中，Windows PowerShell 将尝试使用的参数的位置将值分配给参数。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The following example is not complete:</source>
          <target state="translated">下面的示例不完整︰</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>New-Alias utd</source>
          <target state="translated">新别名 utd</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This cmdlet requires values for both the Name and Value parameters.</source>
          <target state="translated">此 cmdlet 需要的名称和值参数的值。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>In syntax examples, brackets are also used in naming and casting to .NET Framework types.</source>
          <target state="translated">在语法示例中，在命名并强制转换为.NET Framework 类型中也使用方括号。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>In this context, brackets do not indicate an element is optional.</source>
          <target state="translated">在此上下文中，方括号并不表明元素是可选的。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>KEYWORDS</source>
          <target state="translated">关键字</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>about_Symbols about_Punctuation about_Help_Syntax</source>
          <target state="translated">about_Symbols about_Punctuation about_Help_Syntax</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>about_Parameters Get-Command Get-Help</source>
          <target state="translated">about_Parameters Get-command 获取帮助</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>