<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad2a36d4f33f902f70e68b283aa9f28a0d5e38ca</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_While.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e2d2488ddd373a74efb49bdb2a7b234506e9f2a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ed345791b02be043b1e1257f9482088076c67ce1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_While</source>
          <target state="translated">about_While</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About While</source>
          <target state="translated">有关 While</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_While</source>
          <target state="translated">about_While</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_While</source>
          <target state="translated">about_While</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">简短说明</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes a language statement that you can use to run a command block based on the results of a conditional test.</source>
          <target state="translated">介绍可用于运行命令块基于条件的测试结果的语言语句。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">详细说明</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The While statement (also known as a While loop) is a language construct for creating a loop that runs commands in a command block as long as a conditional test evaluates to true.</source>
          <target state="translated">While 语句 （也称为一种 While 循环） 是一种语言构造，创建一个循环来运行的命令的命令块中，只要条件测试的计算结果为 true。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The While statement is easier to construct than a For statement because its syntax is less complicated.</source>
          <target state="translated">While 语句是更轻松地构造比 For 语句，因为它的语法是不太复杂。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In addition, it is more flexible than the Foreach statement because you specify a conditional test in the While statement to control how many times the loop runs.</source>
          <target state="translated">此外，它是比 Foreach 语句更灵活因为指定的条件测试，所以在 While 语句来控制多少次循环运行。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following shows the While statement syntax:</source>
          <target state="translated">下面的示例演示 While 语句的语法︰</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When you run a While statement,  Windows PowerShell� evaluates the <ph id="ph1">&lt;condition&gt;</ph> section of the statement before entering the <ph id="ph2">&lt;statement list&gt;</ph> section.</source>
          <target state="translated">当您运行一段时间语句，Windows PowerShell 的评估结果 <ph id="ph1">&lt;condition&gt;</ph> 之前输入的语句部分 <ph id="ph2">&lt;statement list&gt;</ph> 部分。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The condition portion of the statement resolves to either true or false.</source>
          <target state="translated">该语句的条件部分解析为 true 或 false。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>As long as the condition remains true,  Windows PowerShell reruns the <ph id="ph1">&lt;statement list&gt;</ph> section.</source>
          <target state="translated">只要条件为 true，Windows PowerShell 重新运行 <ph id="ph1">&lt;statement list&gt;</ph> 部分。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;statement list&gt;</ph> section of the statement contains one or more commands that are run each time the loop is entered or repeated.</source>
          <target state="translated"> <ph id="ph1">&lt;statement list&gt;</ph> 该语句的部分包含一个或多个输入或重复该循环每次运行的命令。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, the following While statement displays the numbers 1 through 3 if the $val variable has not been created or if the $val variable has been created and initialized to 0.</source>
          <target state="translated">例如，下面的语句显示数字 1 到 3，如果尚未创建 $val 变量或者创建 $val 变量并将其初始化为 0。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In this example, the condition ($val is not equal to 3) is true while $val <ph id="ph1">\=</ph> 0, 1, 2.</source>
          <target state="translated">在此示例中，该条件 （不等于 3 $val） 为 true 时 $val <ph id="ph1">\=</ph> 0、 1、 2。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Each time through the loop, $val is incremented by 1 using the <ph id="ph1">\+\+</ph> unary increment operator ($val<ph id="ph2">\+\+</ph>).</source>
          <target state="translated">每次循环时，$val 都会增加 1 使用 <ph id="ph1">\+\+</ph> 一元递增运算符 ($val<ph id="ph2">\+\+</ph>)。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The last time through the loop, $val <ph id="ph1">\=</ph> 3.</source>
          <target state="translated">最后一次执行循环时，$val <ph id="ph1">\=</ph> 3。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When $val equals 3, the condition statement evaluates to false, and the loop exits.</source>
          <target state="translated">当 $val 等于 3 时，条件语句的评估结果为 false，并循环退出。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To conveniently write this command at the  Windows PowerShell command prompt, you can enter it in the following way:</source>
          <target state="translated">若要方便地编写此命令在 Windows PowerShell 命令提示符下，可以按以下方式输入︰</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Notice that the semicolon separates the first command that adds 1 to $val from the second command that writes the value of $val to the console.</source>
          <target state="translated">请注意，以分号分隔，从 $val 的值写入控制台第二个命令将 1 添加到 $val 的第一个命令。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>about_Comparison_Operators</source>
          <target state="translated">about_Comparison_Operators</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>about_Do</source>
          <target state="translated">about_Do</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>about_Foreach</source>
          <target state="translated">about_Foreach</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>about_For</source>
          <target state="translated">about_For</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>about_Language_Keywords</source>
          <target state="translated">about_Language_Keywords</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>