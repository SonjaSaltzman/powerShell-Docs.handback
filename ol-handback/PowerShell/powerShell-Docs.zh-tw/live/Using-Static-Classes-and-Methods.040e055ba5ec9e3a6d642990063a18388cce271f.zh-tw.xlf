<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-56a7a5e" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50ebc8a737b50aba5a5af49716b59905da74669a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\cookbooks\Using-Static-Classes-and-Methods.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2ec41061343dd5e59dc5adbefe744f5a9887b813</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using Static Classes and Methods</source>
          <target state="translated">使用靜態類別和方法</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell,cmdlet</source>
          <target state="translated">powershell,cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Using Static Classes and Methods</source>
          <target state="translated">使用靜態類別和方法</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Not all .NET Framework classes can be created by using <bpt id="p1">**</bpt>New<ph id="ph1">\-</ph>Object<ept id="p1">**</ept>.</source>
          <target state="translated">不是所有的 .NET Framework 類別都能使用 <bpt id="p1">**</bpt>New<ph id="ph1">\-</ph>Object<ept id="p1">**</ept> 建立。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, if you try to create a <bpt id="p1">**</bpt>System.Environment<ept id="p1">**</ept> or a <bpt id="p2">**</bpt>System.Math<ept id="p2">**</ept> object with <bpt id="p3">**</bpt>New<ph id="ph1">\-</ph>Object<ept id="p3">**</ept>, you will get the following error messages:</source>
          <target state="translated">例如，如果您嘗試使用 <bpt id="p3">**</bpt>New<ph id="ph1">\-</ph>Object<ept id="p3">**</ept> 來建立 <bpt id="p1">**</bpt>System.Environment<ept id="p1">**</ept> 或 <bpt id="p2">**</bpt>System.Math<ept id="p2">**</ept> 物件，則會收到下列錯誤訊息︰</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>These errors occur because there is no way to create a new object from these classes.</source>
          <target state="translated">這些錯誤的發生原因是沒有方法可透過這些類別建立新的物件。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>These classes are reference libraries of methods and properties that do not change state.</source>
          <target state="translated">這些類別是未變更狀態之方法和屬性的參考程式庫。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You don't need to create them, you simply use them.</source>
          <target state="translated">您不需要建立它們，而只需要使用它們。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Classes and methods such as these are called <bpt id="p1">*</bpt>static classes<ept id="p1">*</ept> because they are not created, destroyed, or changed.</source>
          <target state="translated">這類類別和方法稱為<bpt id="p1">*</bpt>靜態類別<ept id="p1">*</ept>，因為不會建立、破壞或變更它們。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To make this clear we will provide examples that use static classes.</source>
          <target state="translated">為了讓這個概念更為清楚，我們將提供使用靜態類別的範例。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Getting Environment Data with System.Environment</source>
          <target state="translated">使用 System.Environment 取得環境資料</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Usually, the first step in working with an object in Windows PowerShell is to use Get<ph id="ph1">\-</ph>Member to find out what members it contains.</source>
          <target state="translated">通常，在 Windows PowerShell 中使用物件的第一個步驟是使用 Get<ph id="ph1">\-</ph>Member 來找出它包含的成員。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>With static classes, the process is a little different because the actual class is not an object.</source>
          <target state="translated">運用靜態類別時，處理方式會有些不同，因為實際類別不是物件。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Referring to the Static System.Environment Class</source>
          <target state="translated">參考靜態 System.Environment 類別</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can refer to a static class by surrounding the class name with square brackets.</source>
          <target state="translated">使用方括弧括住類別名稱，即可參考靜態類別。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, you can refer to <bpt id="p1">**</bpt>System.Environment<ept id="p1">**</ept> by typing the name within brackets.</source>
          <target state="translated">例如，在方括弧內輸入名稱，即可參考 <bpt id="p1">**</bpt>System.Environment<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Doing so displays some generic type information:</source>
          <target state="translated">這麼做會顯示一些泛型類型資訊︰</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>As we mentioned previously, Windows PowerShell automatically prepends '<bpt id="p1">**</bpt>System.<ept id="p1">**</ept>'</source>
          <target state="translated">如前所述，Windows PowerShell 會自動將 '<bpt id="p1">**</bpt>System.<ept id="p1">**</ept>'</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>to type names when you use <bpt id="p1">**</bpt>New<ph id="ph1">\-</ph>Object<ept id="p1">**</ept>.</source>
          <target state="translated">加到類型名稱的前面 (使用 <bpt id="p1">**</bpt>New<ph id="ph1">\-</ph>Object<ept id="p1">**</ept> 時)。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The same thing happens when using a bracketed type name, so you can specify <bpt id="p1">**</bpt><ph id="ph1">\[</ph>System.Environment]<ept id="p1">**</ept> as <bpt id="p2">**</bpt><ph id="ph2">\[</ph>Environment]<ept id="p2">**</ept>.</source>
          <target state="translated">使用以方括弧括住的類型名稱時會發生相同的作業，因此您可以將 <bpt id="p1">**</bpt><ph id="ph1">\[</ph>System.Environment]<ept id="p1">**</ept> 指定為 <bpt id="p2">**</bpt><ph id="ph2">\[</ph>Environment]<ept id="p2">**</ept>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>System.Environment<ept id="p1">**</ept> class contains general information about the working environment for the current process, which is powershell.exe when working within Windows PowerShell.</source>
          <target state="translated"><bpt id="p1">**</bpt>System.Environment<ept id="p1">**</ept> 類別包含目前處理處序之運作環境的一般資訊 (在 Windows PowerShell 內運作時為 powershell.exe)。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you try to view details of this class by typing <bpt id="p1">**</bpt><ph id="ph1">\[</ph>System.Environment] | Get<ph id="ph2">\-</ph>Member<ept id="p1">**</ept>, the object type is reported as being <bpt id="p2">**</bpt>System.RuntimeType<ept id="p2">**</ept> , not <bpt id="p3">**</bpt>System.Environment<ept id="p3">**</ept>:</source>
          <target state="translated">如果您輸入 <bpt id="p1">**</bpt><ph id="ph1">\[</ph>System.Environment] | Get<ph id="ph2">\-</ph>Member<ept id="p1">**</ept> 來嘗試檢視這個類別的詳細資訊，則物件類型會回報為 <bpt id="p2">**</bpt>System.RuntimeType<ept id="p2">**</ept> ，而非 <bpt id="p3">**</bpt>System.Environment<ept id="p3">**</ept>：</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To view static members with Get<ph id="ph1">\-</ph>Member, specify the <bpt id="p1">**</bpt>Static<ept id="p1">**</ept> parameter:</source>
          <target state="translated">若要使用 Get<ph id="ph1">\-</ph>Member 來檢視靜態成員，請指定 <bpt id="p1">**</bpt>Static<ept id="p1">**</ept> 參數︰</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>We can now select properties to view from System.Environment.</source>
          <target state="translated">我們現在可以從 System.Environment 中選取要檢視的屬性。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Displaying Static Properties of System.Environment</source>
          <target state="translated">顯示 System.Environment 的靜態屬性</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The properties of System.Environment are also static, and must be specified in a different way than normal properties.</source>
          <target state="translated">System.Environment 的屬性也是靜態的，而且指定的方式必須與一般屬性不同。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>We use <bpt id="p1">**</bpt>::<ept id="p1">**</ept> to indicate to Windows PowerShell that we want to work with a static method or property.</source>
          <target state="translated">我們使用 <bpt id="p1">**</bpt>::<ept id="p1">**</ept> 向 Windows PowerShell 表示我們想要使用靜態方法或屬性。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To see the command that was used to launch Windows PowerShell, we check the <bpt id="p1">**</bpt>CommandLine<ept id="p1">**</ept> property by typing:</source>
          <target state="translated">若要查看已用來啟動 Windows PowerShell 的命令，我們會檢查 <bpt id="p1">**</bpt>CommandLine<ept id="p1">**</ept> 屬性，方法是輸入︰</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To check the operating system version, display the OSVersion property by typing:</source>
          <target state="translated">若要檢查作業系統版本，請顯示 OSVersion 屬性，方法是輸入︰</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>We can check whether the computer is in the process of shutting down by displaying the <bpt id="p1">**</bpt>HasShutdownStarted<ept id="p1">**</ept> property:</source>
          <target state="translated">顯示 <bpt id="p1">**</bpt>HasShutdownStarted<ept id="p1">**</ept> 屬性，即可檢查電腦是否正在進行關機：</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Doing Math with System.Math</source>
          <target state="translated">使用 System.Math 執行數學運算</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The System.Math static class is useful for performing some mathematical operations.</source>
          <target state="translated">System.Math 靜態類別適用於執行一些數學運算。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The important members of <bpt id="p1">**</bpt>System.Math<ept id="p1">**</ept> are mostly methods, which we can display by using <bpt id="p2">**</bpt>Get<ph id="ph1">\-</ph>Member<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>System.Math<ept id="p1">**</ept> 的重要成員主要是方法，而使用 <bpt id="p2">**</bpt>Get<ph id="ph1">\-</ph>Member<ept id="p2">**</ept> 即可顯示這些方法。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>System.Math has several methods with the same name, but they are distinguished by the type of their parameters.</source>
          <target state="translated">System.Math 有數種同名的方法，但透過其參數的類型予以區分。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Type the following command to list the methods of the <bpt id="p1">**</bpt>System.Math<ept id="p1">**</ept> class.</source>
          <target state="translated">輸入下列命令來列出 <bpt id="p1">**</bpt>System.Math<ept id="p1">**</ept> 類別的方法。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This displays several mathematical methods.</source>
          <target state="translated">這會顯示數個數學方法。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Here is a list of commands that demonstrate how some of the common methods work:</source>
          <target state="translated">以下是示範一些常見方法之運作方式的命令清單 ︰</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>