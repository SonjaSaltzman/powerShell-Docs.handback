<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5b8e579930c6ff20a32be902992a0774b5ebfe89</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c28d666461edba01bcdd7b7831302554d8583c6d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cde7cb1dca8bcc02b87d8648daa30265095a6c75</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Functions</source>
          <target state="translated">about_Functions</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">PowerShell-Cmdlets</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Functions</source>
          <target state="translated">Informationen zu Funktionen</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Functions</source>
          <target state="translated">about_Functions</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Functions</source>
          <target state="translated">about_Functions</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">KURZE BESCHREIBUNG</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes how to create and use functions in Windows PowerShell.</source>
          <target state="translated">Beschreibt das Erstellen und Verwenden von Funktionen in Windows PowerShell.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">LANGE BESCHREIBUNG</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A function is a list of Windows PowerShell statements that has a name that you assign.</source>
          <target state="translated">Eine Funktion ist eine Liste der Windows PowerShell-Anweisungen, die über einen Namen verfügt, den Sie zuweisen.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When you run a function, you type the function name.</source>
          <target state="translated">Wenn Sie eine Funktion ausführen, geben Sie den Namen der Funktion.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The statements in the list run as if you had typed them at the command prompt.</source>
          <target state="translated">Die Anweisungen in der Liste ausgeführt, als ob Sie diese in der Befehlszeile eingegeben hätten.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Functions can be as simple as:</source>
          <target state="translated">Funktionen sind so einfach wie möglich:</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>function Get-PowerShellProcess {Get-Process PowerShell}</source>
          <target state="translated">Get-PowerShellProcess {Get-Process PowerShell}-Funktion</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>or as complex as a cmdlet or an application program.</source>
          <target state="translated">oder so komplex wie ein Cmdlet oder einer Anwendung.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Like cmdlets, functions can have parameters.</source>
          <target state="translated">Funktionen können wie Cmdlets über Parameter verfügen.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The parameters can be named, positional, switch, or dynamic parameters.</source>
          <target state="translated">Die Parameter können benannte, mit Feldern fester Breite, Switch oder dynamische Parameter sein.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Function parameters can be read from the command line or from the pipeline.</source>
          <target state="translated">Die Parameter können über die Befehlszeile oder über die Pipeline gelesen werden.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Functions can return values that can be displayed, assigned to variables, or passed to other functions or cmdlets.</source>
          <target state="translated">Funktionen können Werte, die angezeigt, in der Variablen zugewiesen oder übergeben werden können, Funktionen und Cmdlets zurück.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The function's statement list can contain different types of statement lists with the keywords Begin, Process, and End.</source>
          <target state="translated">Die Funktion Anweisungsliste kann verschiedene Typen von Anweisungslisten mit den Schlüsselwörtern Begin, Process und End enthalten.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These statement lists handle input from the pipeline differently.</source>
          <target state="translated">Diese Anweisung Listen Eingabe aus der Pipeline unterschiedlich behandelt.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A filter is a special kind of function that uses the Filter keyword.</source>
          <target state="translated">Ein Filter ist eine besondere Art von Funktion, die das Filter-Schlüsselwort verwendet wird.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Functions can also act like cmdlets.</source>
          <target state="translated">Funktionen können auch wie Cmdlets fungieren.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can create a function that works just like a cmdlet without using C# programming.</source>
          <target state="translated">Sie können eine Funktion erstellen, die genau wie ein Cmdlet funktioniert ohne Verwendung von C#-Programmierung.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see about_Functions_Advanced (http://go.microsoft.com/fwlink/?LinkID=144511).</source>
          <target state="translated">Weitere Informationen finden Sie unter About_Functions_Advanced (http://go.microsoft.com/fwlink/?LinkID=144511).</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Syntax The following is the syntax for a function:</source>
          <target state="translated">Die folgende Syntax ist die Syntax für eine Funktion:</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>function [&lt;scope:&gt;]<ph id="ph1">&lt;name&gt;</ph> [([type]$parameter1[,[type]$parameter2])] { param([type]$parameter1 [,[type]$parameter2])</source>
          <target state="translated">Funktion [&lt; Bereich: &gt;]<ph id="ph1">&lt;name&gt;</ph> [([type]$parameter1[,[type]$parameter2])] {Param ([Typ] $parameter1 [, [Typ] $parameter2])</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>dynamicparam {<ph id="ph1">&lt;statement list&gt;</ph>}</source>
          <target state="translated">Dynamicparam {<ph id="ph1">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>begin {<ph id="ph1">&lt;statement list&gt;</ph>} process {<ph id="ph2">&lt;statement list&gt;</ph>} end {<ph id="ph3">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">Begin {<ph id="ph1">&lt;statement list&gt;</ph>} Prozess {<ph id="ph2">&lt;statement list&gt;</ph>} Ende {<ph id="ph3">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A function includes the following items:</source>
          <target state="translated">Eine Funktion enthält die folgenden Elemente:</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A Function keyword</source>
          <target state="translated">Function-Schlüsselwort</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A scope (optional)</source>
          <target state="translated">Ein Bereich (optional)</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A name that you select</source>
          <target state="translated">Eine, den von Ihnen ausgewählten Namen</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Any number of named parameters (optional)</source>
          <target state="translated">Eine beliebige Anzahl benannter Parameter (optional)</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>One or more Windows PowerShell commands enclosed in braces ({})</source>
          <target state="translated">Ein oder mehrere Windows PowerShell-Befehle, die in geschweifte Klammern ({}) eingeschlossen</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information about the Dynamicparam keyword and dynamic parameters in functions, see about_Functions_Advanced_Parameters.</source>
          <target state="translated">Weitere Informationen über das Dynamicparam-Schlüsselwort und die von dynamischen Parametern in Funktionen finden Sie unter About_Functions_Advanced_Parameters.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Simple Functions Functions do not have to be complicated to be useful.</source>
          <target state="translated">Einfache Funktionen müssen nicht kompliziert, nützlich sein.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The simplest functions have the following format:</source>
          <target state="translated">Die einfachsten Funktionen haben das folgende Format:</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>function &lt;function-name&gt; {statements}</source>
          <target state="translated">die Funktion &lt; Funktionsname &gt; {Anweisungen}</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, the following function starts Windows PowerShell with the Run as Administrator option.</source>
          <target state="translated">Die folgende Funktion wird z. B. Windows PowerShell mit der Option als Administrator gestartet.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>function Start-PSAdmin {Start-Process PowerShell -Verb RunAs}</source>
          <target state="translated">Start-PSAdmin Funktion {Start-Process PowerShell-Verb "runas"}</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To use the function, type: Start-PSAdmin</source>
          <target state="translated">Um die Funktion zu verwenden, geben: Start PSAdmin</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To add statements to the function, use a semi-colon (;) to separate the statements, or type each statement on a separate line.</source>
          <target state="translated">Anweisungen für die Funktion hinzufügen, verwenden Sie ein Semikolon (;) trennen Sie die Anweisungen, oder geben Sie jede Anweisung in einer separaten Zeile.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For example, the following function finds all .jpg files in the current user's directories that were changed after the start date.</source>
          <target state="translated">Die folgende Funktion findet z. B. allen JPG-Dateien in den aktuellen Benutzer Verzeichnisse, die nach dem Startdatum geändert wurden.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>function Get-NewPix { $start = Get-Date -Month 1 -Day 1 -Year 2010 $allpix = Get-ChildItem -Path $env:UserProfile<ph id="ph1">\*</ph>.jpg -Recurse $allpix | where {$_.LastWriteTime -gt $Start} }</source>
          <target state="translated">Get-NewPix Funktion {$start = Get-Date-Monat 1 - Tag 1 - Jahr 2010 $allpix = Get-ChildItem-Pfad $env: UserProfile<ph id="ph1">\*</ph>JPG-$allpix Recurse |, {$_. LastWriteTime - Gt $Start}}</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can create a toolbox of useful small functions.</source>
          <target state="translated">Sie können eine Toolbox mit nützlichen kleine Funktionen erstellen.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Add these functions to your Windows PowerShell profile, as described in about_Profiles and later in this topic.</source>
          <target state="translated">Fügen Sie diese Funktionen zu Ihrem Windows PowerShell-Profil hinzu, wie in About_Profiles und später in diesem Thema beschrieben.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Function Names You can assign any name to a function, but functions that you share with others should follow the naming rules that have been established for all Windows PowerShell commands.</source>
          <target state="translated">Funktion Namen Sie können einen beliebigen Namen zuweisen, um eine Funktion, jedoch Funktionen, die Sie für andere freigeben sollte den Benennungsregeln der, die für alle Windows PowerShell-Befehle eingerichtet wurden.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Functions names should consist of a verb-noun pair in which the verb identifies the action that the function performs and the noun identifies the item on which the cmdlet performs its action.</source>
          <target state="translated">Funktionsnamen sollte ein Verb-Nomen-Paars bestehen, in dem das Verb bezeichnet die Aktion, die die Funktion ausführt, und das Nomen identifiziert das Element, auf dem das Cmdlet die Aktion ausführt.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Functions should use the standard verbs that have been approved for all Windows PowerShell commands.</source>
          <target state="translated">Funktionen dürfen Standardverben, die genehmigt wurden für alle Windows PowerShell-Befehle verwenden.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>These verbs help us to keep our command names simple, consistent, and easy for users to understand.</source>
          <target state="translated">Diese Verben helfen Sie uns, unsere Befehlsnamen zu halten, einfache, einheitliche und leicht zu verstehen.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information about the standard Windows PowerShell verbs, see "Cmdlet Verbs" on MSDN at http://go.microsoft.com/fwlink/?LinkID=160773.</source>
          <target state="translated">Weitere Informationen zu den standardmäßigen Windows PowerShell-Verben finden Sie unter "Cmdlet Verbs" auf MSDN unter http://go.microsoft.com/fwlink/?LinkID=160773.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Functions with Parameters You can use parameters with functions, including named parameters, positional parameters, switch parameters, and dynamic parameters.</source>
          <target state="translated">Funktionen mit Parametern Sie können Parameter mit Funktionen, einschließlich benannte Parameter, Positionsparameter, Switch-Parameter und dynamische Parameter verwenden.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more information about dynamic parameters in functions, see about_Functions_Advanced_Parameters (http://go.microsoft.com/fwlink/?LinkID=135173).</source>
          <target state="translated">Weitere Informationen zu dynamischen Parametern in Funktionen finden Sie unter About_Functions_Advanced_Parameters (http://go.microsoft.com/fwlink/?LinkID=135173).</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Named Parameters You can define any number of named parameters.</source>
          <target state="translated">Benannte Parameter Sie können eine beliebige Anzahl benannter Parameter definieren.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can include a default value for named parameters, as described later in this topic.</source>
          <target state="translated">Sie können einen Standardwert für benannte Parameter einschließen, wie weiter unten in diesem Thema beschrieben.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can define parameters inside the braces using the Param keyword, as shown in the following sample syntax:</source>
          <target state="translated">Sie können Parameter innerhalb der geschweiften Klammern, die mit dem Schlüsselwort Param definieren, wie in der folgenden Beispielsyntax dargestellt:</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>function <ph id="ph1">&lt;name&gt;</ph> { param ([type]$parameter1[,[type]$parameter2]) <ph id="ph2">&lt;statement list&gt;</ph> }</source>
          <target state="translated">Funktion <ph id="ph1">&lt;name&gt;</ph> {Param ([type]$parameter1[,[type]$parameter2]) <ph id="ph2">&lt;statement list&gt;</ph> }</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can also define parameters outside the braces without the Param keyword, as shown in the following sample syntax:</source>
          <target state="translated">Sie können auch Parameter außerhalb der Klammern ohne das Schlüsselwort Param definieren, wie in der folgenden Beispielsyntax dargestellt:</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>function <ph id="ph1">&lt;name&gt;</ph> [([type]$parameter1[,[type]$parameter2])] { <ph id="ph2">&lt;statement list&gt;</ph> }</source>
          <target state="translated">Funktion <ph id="ph1">&lt;name&gt;</ph> [([type]$parameter1[,[type]$parameter2])] { <ph id="ph2">&lt;statement list&gt;</ph> }</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>There is no difference between these two methods.</source>
          <target state="translated">Es gibt keinen Unterschied zwischen diesen beiden Methoden.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Use the method that you prefer.</source>
          <target state="translated">Verwenden Sie die von Ihnen bevorzugte Methode.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>When you run the function, the value you supply for a parameter is assigned to a variable that contains the parameter name.</source>
          <target state="translated">Beim Ausführen der Funktion ist der Wert, den Sie für einen Parameter angeben einer Variablen zugewiesen, die den Namen des Parameters enthält.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The value of that variable can be used in the function.</source>
          <target state="translated">Der Wert dieser Variablen kann in der Funktion verwendet werden.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following example is a function called Get-SmallFiles.</source>
          <target state="translated">Im folgende Beispiel wird eine Funktion namens Get-SmallFiles.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This function has a $size parameter.</source>
          <target state="translated">Diese Funktion hat einen $size-Parameter.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The function displays all the files that are smaller than the value of the $size parameter, and it excludes directories:</source>
          <target state="translated">Die Funktion zeigt alle Dateien, die kleiner als der Wert des Parameters $size sind und Verzeichnisse ausgeschlossen:</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>function Get-SmallFiles { param ($size) Get-ChildItem c:\ | where {$.Length -lt $Size -and !$.PSIsContainer} }</source>
          <target state="translated">Get-SmallFiles Funktion {Param ($size) Get-ChildItem c:\ |, {$. Länge - Lt $Size- und! $. PSIsContainer}}</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In the function, you can use the $size variable, which is the name defined for the parameter.</source>
          <target state="translated">In der Funktion können Sie die $size-Variable, die den Namen für den Parameter definiert ist.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To use this function, type the following command:</source>
          <target state="translated">Um diese Funktion zu verwenden, geben Sie den folgenden Befehl ein:</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; function Get-SmallFiles –Size 50</source>
          <target state="translated">C:\PS &gt; Get-SmallFiles-Funktion – Größe von 50</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You can also enter a value for a named parameter without the parameter name.</source>
          <target state="translated">Sie können auch einen Wert für einen benannten Parameter ohne die Parameternamen eingeben.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For example, the following command gives the same result as a command that names the Size parameter:</source>
          <target state="translated">Beispielsweise gibt der folgende Befehl zum gleiche Ergebnis wie ein Befehl, der den Namen den Parameter:</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; function Get-SmallFiles 50</source>
          <target state="translated">C:\PS &gt; Get-SmallFiles 50-Funktion</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To define a default value for a parameter, type an equal sign and the value after the parameter name, as shown in the following variation of the Get-SmallFiles example:</source>
          <target state="translated">Um einen Standardwert für einen Parameter zu definieren, geben Sie ein Gleichheitszeichen und der Wert nach der Name des Parameters, siehe die folgende Abwandlung des Beispiels Get-SmallFiles:</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>function Get-SmallFiles ($size = 100) { Get-ChildItem c:\ | where {$.Length -lt $Size -and !$.PSIsContainer} }</source>
          <target state="translated">Get-SmallFiles-Funktion ($size = 100) {Get-ChildItem c:\ |, {$. Länge - Lt $Size- und! $. PSIsContainer}}</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If you type "Get-SmallFiles" without a value, the function assigns 100 to $size.</source>
          <target state="translated">Wenn Sie "Get-SmallFiles" ohne einen Wert eingeben, mit die Funktion $size 100 zugewiesen.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If you provide a value, the function uses that value.</source>
          <target state="translated">Wenn Sie einen Wert angeben, verwendet die Funktion den Wert an.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Optionally, you can provide a brief help string that describes the default value of your parameter, by adding the PSDefaultValue attribute to the description of your parameter, and specifying the Help property of PSDefaultValue.</source>
          <target state="translated">Optional können Sie eine kurze Hilfezeichenfolge bereitstellen, die den Standardwert des Parameters an, durch das PSDefaultValue-Attribut in der Beschreibung des Parameters hinzufügen und Angeben der Hilfe-Eigenschaft des PSDefaultValue beschreibt.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>To provide a help string that describes the default value (100) of the Size parameter in the Get-SmallFiles function, add the PSDefaultValue attribute as shown in the following example.</source>
          <target state="translated">Um einen Hilfetext bereitstellen, der Standardwert (100) der Parameter in der Get-SmallFiles-Funktion beschrieben wird, wird fügen Sie das PSDefaultValue-Attribut hinzu, wie im folgenden Beispiel gezeigt.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>function Get-SmallFiles { param ( [PSDefaultValue(Help = '100')] $size = 100</source>
          <target state="translated">Get-SmallFiles Funktion {Param ([PSDefaultValue (Hilfe = '100')] $size = 100</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For more information about the PSDefaultValue attribute class, see PSDefaultValue Attribute Members on MSDN.</source>
          <target state="translated">Weitere Informationen über die Klasse PSDefaultValue finden Sie unter PSDefaultValue Attributelemente auf MSDN.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>(http://msdn.microsoft.com/library/windows/desktop/system.management.automation.psdefaultvalueattribute_members(v=vs.85).aspx</source>
          <target state="translated">(http://msdn.microsoft.com/library/windows/desktop/system.management.automation.psdefaultvalueattribute_members (v=vs.85).aspx</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Positional Parameters A positional parameter is a parameter without a parameter name.</source>
          <target state="translated">Positionelle Parameter ein Positionsparameter ist ein Parameter ohne einen Parameternamen an.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Windows PowerShell uses the parameter value order to associate each parameter value with a parameter in the function.</source>
          <target state="translated">Windows PowerShell verwendet die Reihenfolge der Parameter-Wert eines Parameters in der Funktion jeder Parameterwert zugeordnet.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When you use positional parameters, type one or more values after the function name.</source>
          <target state="translated">Wenn Sie positionelle Parameter verwenden, geben Sie einen oder mehrere Werte nach den Namen der Funktion.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Positional parameter values are assigned to the $args array variable.</source>
          <target state="translated">Positionsparameter Werte werden der $args Arrayvariablen zugewiesen.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The value that follows the function name is assigned to the first position in the $args array, $args[0].</source>
          <target state="translated">Der Wert, der den Namen der Funktion folgt, wird die erste Position im Array $args $args [0] zugewiesen.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The following Get-Extension function adds the .txt file name extension to a file name that you supply:</source>
          <target state="translated">Die folgenden Get-Erweiterungsfunktion hinzugefügt einen Dateinamen ein, dem Sie bereitstellen die Erweiterung ".txt":</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>function Get-Extension { $name = $args[0] + ".txt" $name }</source>
          <target state="translated">Get-Erweiterung funktioniert {$name = $args [0] + ".txt" $name}</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Get-Extension myTextFile myTextFile.txt</source>
          <target state="translated">C:\PS &gt; Get-Erweiterung MyTextFile myTextFile.txt</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Switch Parameters A switch is a parameter that does not require a value.</source>
          <target state="translated">Switches-Parameter ein ist ein Parameter, der keinen Wert benötigt wird.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Instead, you type the function name followed by the name of the switch parameter.</source>
          <target state="translated">Stattdessen geben Sie den Funktionsnamen, gefolgt vom Namen der Befehlszeilenoption.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>To define a switch parameter, specify the type [switch] before the parameter name, as shown in the following example:</source>
          <target state="translated">Um einen Switch-Parameter zu definieren, geben Sie den [Option] vor dem Parameternamen, wie im folgenden Beispiel gezeigt:</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>function Switch-Item { param ([switch]$on) if ($on) { "Switch on" } else { "Switch off" } }</source>
          <target state="translated">Switch-Item-Funktion {Param ($auf [Option]) Wenn ($auf) {"Schalter"} else {"abschalten"}}</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>When you type the On switch parameter after the function name, the function displays "Switch on".</source>
          <target state="translated">Wenn Sie nach dem Funktionsnamen auf Switch-Parameter eingeben, Schalter"zeigt die Funktion".</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Without the switch parameter, it displays "Switch off".</source>
          <target state="translated">Ohne den Schalterparameter wird angezeigt "Deaktivieren".</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Switch-Item -on Switch on</source>
          <target state="translated">C:\PS &gt; Switch-Element-Switches auf</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Switch-Item Switch off</source>
          <target state="translated">C:\PS &gt; Switch-Element-Switch</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You can also assign a Boolean value to a switch when you run the function, as shown in the following example:</source>
          <target state="translated">Sie können auch einen booleschen Wert zuweisen an einen Switch beim Ausführen der Funktion, wie im folgenden Beispiel gezeigt:</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Switch-Item -on:$true Switch on</source>
          <target state="translated">C:\PS &gt; Switch-Element-auf: $true Schalter</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Switch-Item -on:$false Switch off</source>
          <target state="translated">C:\PS &gt; Switch-Element-auf: $false deaktivieren</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Using Splatting to Represent Command Parameters You can use splatting to represent the parameters of a command.</source>
          <target state="translated">Verwendung Verteilung darstellen Befehl Parameter Sie verwenden Verteilung, um die Parameter für einen Befehl darstellen.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This feature is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">Diese Funktion ist in Windows PowerShell 3.0 eingeführt.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Use this technique in functions that call commands in the session.</source>
          <target state="translated">Verwenden Sie diese Technik in Funktionen, die Befehle in der Sitzung aufrufen.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>You do not need to declare or enumerate the command parameters, or change the function when command parameters change.</source>
          <target state="translated">Sie nicht benötigen deklarieren oder die Befehlsparameter aufzählen, oder ändern Sie die Funktion, wenn Parameter ändern.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The following sample function calls the Get-Command cmdlet.</source>
          <target state="translated">Die folgende Beispielfunktion Ruft das Get-Command-Cmdlet.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The command uses @Args to represent the parameters of Get-Command.</source>
          <target state="translated">Der Befehl verwendet @Args, um die Parameter von Get-Command darstellen.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>function Get-MyCommand { Get-Command @Args }</source>
          <target state="translated">Get-MyCommand {Get-Command @Args}-Funktion</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>You can use all of the parameters of Get-Command when you call the Get-MyCommand function.</source>
          <target state="translated">Sie können alle Parameter von Get-Command verwenden, wenn Sie die Get-MyCommand-Funktion aufrufen.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The parameters and parameter values are passed to the command using @Args.</source>
          <target state="translated">Die Parameter und Parameterwerte werden an den Befehl mit @Args übergeben.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>PS C:&gt;Get-MyCommand -Name Get-ChildItem CommandType     Name                ModuleName</source>
          <target state="translated">PS C: &gt; Get-MyCommand-Get-ChildItem CommandType Namen ModuleName Name</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Cmdlet          Get-ChildItem       Microsoft.PowerShell.Management</source>
          <target state="translated">-Cmdlet Get-ChildItem Microsoft.PowerShell.Management</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The @Args feature uses the $Args automatic parameter, which represents undeclared cmdlet parameters and values from remaining arguments.</source>
          <target state="translated">Die @Args-Funktion verwendet die automatische $Args-Parameter, der nicht deklarierte Cmdlet-Parameter und Werte aus der übrigen Argumente darstellt.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For more information about splatting, see about_Splatting (http://go.microsoft.com/fwlink/?LinkId=262720).</source>
          <target state="translated">Weitere Informationen zur Verteilung finden Sie unter About_Splatting (http://go.microsoft.com/fwlink/?LinkId=262720).</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Piping Objects to Functions Any function can take input from the pipeline.</source>
          <target state="translated">Piping Objekte, Funktionen, die eine Funktion Eingaben über die Pipeline nutzen kann.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You can control how a function processes input from the pipeline using Begin, Process, and End keywords.</source>
          <target state="translated">Sie können steuern, wie eine Funktion Eingabe aus der Pipeline mit Begin, Process und End-Schlüsselwörter verarbeitet.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The following sample syntax shows the three keywords:</source>
          <target state="translated">Die folgende Beispielsyntax zeigt drei Schlüsselwörter:</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>function <ph id="ph1">&lt;name&gt;</ph> { begin {<ph id="ph2">&lt;statement list&gt;</ph>} process {<ph id="ph3">&lt;statement list&gt;</ph>} end {<ph id="ph4">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">Funktion <ph id="ph1">&lt;name&gt;</ph> {beginnen {<ph id="ph2">&lt;statement list&gt;</ph>} Prozess {<ph id="ph3">&lt;statement list&gt;</ph>} Ende {<ph id="ph4">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The Begin statement list runs one time only, at the beginning of the function.</source>
          <target state="translated">Die Liste der Begin-Anweisung wird nur einmal am Anfang der Funktion ausgeführt.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The Process statement list runs one time for each object in the pipeline.</source>
          <target state="translated">Die Anweisungsliste Prozess wird einmal für jedes Objekt in der Pipeline.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>While the Process block is running, each pipeline object is assigned to the $_ automatic variable, one pipeline object at a time.</source>
          <target state="translated">Während der Process-Block ausgeführt wird, wird die Variable $_ automatische, eine Pipelineobjekt gleichzeitig jedes Pipelineobjekt zugewiesen.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>After the function receives all the objects in the pipeline, the End statement list runs one time.</source>
          <target state="translated">Nachdem die Funktion alle Objekte in der Pipeline empfangen hat, wird die End-Anweisungsliste einmal ausgeführt.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If no Begin, Process, or End keywords are used, all the statements are treated like an End statement list.</source>
          <target state="translated">Wenn keine Begin-, Prozess oder End-Schlüsselwörter verwendet werden, werden alle Anweisungen wie eine Liste der End-Anweisung behandelt.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The following function uses the Process keyword.</source>
          <target state="translated">Die folgende Funktion verwendet das Prozess-Schlüsselwort.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The function displays examples from the pipeline:</source>
          <target state="translated">Die Funktion zeigt Beispiele von der Pipeline an:</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>function Get-Pipeline { process {"The value is: $_"} }</source>
          <target state="translated">Get-Pipeline-Funktion {Prozess {"der Wert: $_"}}</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>To demonstrate this function, enter an list of numbers separated by commas, as shown in the following example:</source>
          <target state="translated">Geben Sie eine Liste von Zahlen, die durch Kommas getrennt, um diese Funktion zu demonstrieren, wie im folgenden Beispiel gezeigt:</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 1,2,4 | Get-Pipeline The value is: 1 The value is: 2 The value is: 4</source>
          <target state="translated">C:\PS &gt; 1,2,4 | Get-Pipeline der Wert ist: der Wert ist 1: der Wert ist 2: 4</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>When you use a function in a pipeline, the objects piped to the function are assigned to the $input automatic variable.</source>
          <target state="translated">Wenn Sie eine Funktion in einer Pipeline verwenden, werden die Objekte, die über die Pipeline an die Funktion der automatischen $input-Variablen zugewiesen.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The function runs statements with the Begin keyword before any objects come from the pipeline.</source>
          <target state="translated">Die Funktion führt Anweisungen mit dem Schlüsselwort beginnen, bevor alle Objekte aus der Pipeline stammen.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The function runs statements with the End keyword after all the objects have been received from the pipeline.</source>
          <target state="translated">Die Funktion wird mit dem End-Schlüsselwort Anweisungen ausgeführt, nachdem alle Objekte aus der Pipeline empfangen wurden.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The following example shows the $input automatic variable with Begin and End keywords.</source>
          <target state="translated">Das folgende Beispiel zeigt die automatische $input-Variable mit Schlüsselwörtern Begin und End.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>function Get-PipelineBeginEnd { begin {"Begin: The input is $input"} end {"End:   The input is $input" } }</source>
          <target state="translated">Get-PipelineBeginEnd Funktion {beginnen {"beginnen: die Eingabe ist $input"} Ende {"End: die Eingabe ist $input"}}</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>If this function is run by using the pipeline, it displays the following results:</source>
          <target state="translated">Wenn diese Funktion mithilfe der Pipeline ausgeführt wird, werden die folgenden Ergebnisse:</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 1,2,4 | Get-PipelineBeginEnd Begin: The input is End:   The input is 1 2 4</source>
          <target state="translated">C:\PS &gt; 1,2,4 | Get-PipelineBeginEnd Beginn: Die Eingabe ist Ende: die Eingabe ist 1-2-4</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>When the Begin statement runs, the function does not have the input from the pipeline.</source>
          <target state="translated">Wenn die Begin-Anweisung ausgeführt wird, muss die Funktion nicht die Eingabe aus der Pipeline.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The End statement runs after the function has the values.</source>
          <target state="translated">Die End-Anweisung wird ausgeführt, nachdem die Funktion die Werte hat.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>If the function has a Process keyword, the function reads the data in $input.</source>
          <target state="translated">Wenn die Funktion ein Schlüsselwort Prozess verfügt, liest die Funktion die Daten in $input.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The following example has a Process statement list:</source>
          <target state="translated">Das folgende Beispiel enthält eine Liste der Prozess-Anweisung:</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>function Get-PipelineInput { process {"Processing:  $_ " } end {"End:   The input is: $input" } }</source>
          <target state="translated">Get-PipelineInput Funktion {Prozess {"verarbeitet: $_"} Ende {"End: die Eingabe ist: $input"}}</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>In this example, each object that is piped to the function is sent to the Process statement list.</source>
          <target state="translated">In diesem Beispiel wird jedes Objekt, das an die Funktion weitergeleitet wird an die Anweisungsliste Prozess gesendet.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The Process statements run on each object, one object at a time.</source>
          <target state="translated">Die Prozess-Anweisungen ausgeführt werden, für jedes Objekt ein Objekt zu einem Zeitpunkt.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The $input automatic variable is empty when the function reaches the End keyword.</source>
          <target state="translated">Die automatische $input-Variable ist leer, wenn die Funktion der End-Schlüsselwort erreicht.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 1,2,4 | Get-PipelineInput Processing:  1 Processing:  2 Processing:  4 End:   The input is:</source>
          <target state="translated">C:\PS &gt; 1,2,4 | Verarbeiten von Get-PipelineInput: 1-Verarbeitung: 2 Verarbeitung: 4-End: die Eingabe ist:</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Filters A filter is a type of function that runs on each object in the pipeline.</source>
          <target state="translated">Filter ein Filter ist eine Funktion, die auf jedes Objekt in der Pipeline ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>A filter resembles a function with all its statements in a Process block.</source>
          <target state="translated">Ein Filter ähnelt eine Funktion mit ihre alle-Anweisungen in einem Process-Block.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The syntax of a filter is as follows:</source>
          <target state="translated">Die Syntax eines Filters lautet wie folgt:</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>filter [&lt;scope:&gt;]<ph id="ph1">&lt;name&gt;</ph> {<ph id="ph2">&lt;statement list&gt;</ph>}</source>
          <target state="translated">Filter [&lt; Bereich: &gt;]<ph id="ph1">&lt;name&gt;</ph> {<ph id="ph2">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The following filter takes log entries from the pipeline and then displays either the whole entry or only the message portion of the entry:</source>
          <target state="translated">Der folgende Filter Protokolleinträge aus der Pipeline akzeptiert und zeigt dann die gesamte Eingabe oder nur die Nachricht Teil des Eintrags:</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>filter Get-ErrorLog ([switch]$message) { if ($message) { out-host -inputobject $<bpt id="p1">_</bpt>.Message } else { $<ept id="p1">_</ept> } }</source>
          <target state="translated">Filtern von Get-Fehlerprotokoll ([Option] $message) {Wenn ($message) {Out-host - Eingabeobjekt $<bpt id="p1">_</bpt>. Nachricht} else {$<ept id="p1">_</ept> }}</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Function Scope A function exists in the scope in which it was created.</source>
          <target state="translated">Funktion ein Bereich vorhanden ist, in den Bereich, in dem es erstellt wurde.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If a function is part of a script, the function is available to statements within that script.</source>
          <target state="translated">Ist eine Funktion Teil eines Skripts, ist die Funktion für Anweisungen innerhalb dieses Skripts verfügbar.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>By default, a function in a script is not available at the command prompt.</source>
          <target state="translated">Standardmäßig ist eine Funktion in einem Skript nicht an der Befehlszeile zur Verfügung.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>You can specify the scope of a function.</source>
          <target state="translated">Sie können den Bereich einer Funktion angeben.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>For example, the function is added to the global scope in the following example:</source>
          <target state="translated">Beispielsweise wird die Funktion auf den globalen Bereich im folgenden Beispiel hinzugefügt:</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>function global:Get-DependentSvs { Get-Service | where {$_.DependentServices} }</source>
          <target state="translated">globale Funktion: Get-DependentSvs {Get-Service |, {$_. DependentServices}}</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>When a function is in the global scope, you can use the function in scripts, in functions, and at the command line.</source>
          <target state="translated">Wenn eine Funktion im globalen Gültigkeitsbereich ist, können Sie die Funktion in Skripts, Funktionen, und klicken Sie in der Befehlszeile verwenden.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Functions normally create a scope.</source>
          <target state="translated">Funktionen werden normalerweise einen Bereich erstellen.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The items created in a function, such as variables, exist only in the function scope.</source>
          <target state="translated">Die in einer Funktion, z. B. Variablen, erstellten Elemente existieren nur im Gültigkeitsbereich Funktion.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>For more information about scope in Windows PowerShell, see about_Scopes (http://go.microsoft.com/fwlink/?LinkID=113260).</source>
          <target state="translated">Weitere Informationen zum Bereich in Windows PowerShell finden Sie unter "about_scopes" (http://go.microsoft.com/fwlink/?LinkID=113260).</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Finding and Managing Functions Using the Function: Drive All the functions and filters in Windows PowerShell are automatically stored in the Function: drive.</source>
          <target state="translated">Suchen und Verwalten von Funktionen mithilfe der Funktion: Laufwerk alle Funktionen und Filter in Windows PowerShell automatisch, in der Funktion gespeichert: Laufwerk.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>This drive is exposed by the Windows PowerShell Function provider.</source>
          <target state="translated">Dieses Laufwerk wird von der Funktion von Windows PowerShell-Anbieter verfügbar gemacht.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>When referring to the Function: drive, type a colon after Function, just as you would do when referencing the C or D drive of a computer.</source>
          <target state="translated">Wenn Sie auf die Funktion verweisen:, und geben Sie einen Doppelpunkt nach Funktion, ebenso wie beim Erstellen der Verweis auf das Laufwerk C: oder D: eines Computers.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The following command displays all the functions in the current session of Windows PowerShell:</source>
          <target state="translated">Der folgende Befehl zeigt alle Funktionen in der aktuellen Sitzung von Windows PowerShell:</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Get-ChildItem function:</source>
          <target state="translated">Get-ChildItem-Funktion:</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The commands in the function are stored as a script block in the definition property of the function.</source>
          <target state="translated">Die Befehle in der Funktion werden als Skriptblock in der Definition-Eigenschaft der Funktion gespeichert.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>For example, to display the commands in the Help function that comes with Windows PowerShell, type:</source>
          <target state="translated">Geben Sie beispielsweise, um die Befehle in der Hilfe-Funktion anzuzeigen, die mit Windows PowerShell kommt:</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>(Get-ChildItem function:help).Definition</source>
          <target state="translated">(Get-ChildItem-Funktion: Hilfe). Definition</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>For more information about the Function: drive, see the help topic for the Function provider.</source>
          <target state="translated">Weitere Informationen über die Funktion:-Laufwerk befinden, finden Sie im Hilfethema für den Anbieter für die Funktion.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Type "Get-Help Function" or view it in the TechNet Library at http://go.microsoft.com/fwlink/?LinkID=113436.</source>
          <target state="translated">Geben Sie "Get-Help Function", oder klicken Sie in der TechNet-Bibliothek unter http://go.microsoft.com/fwlink/?LinkID=113436 anzeigen.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Reusing Functions in New Sessions When you type a function at the Windows PowerShell command prompt, the function becomes part of the current session.</source>
          <target state="translated">Wiederverwenden von Funktionen in neuen Sitzungen, wenn Sie eine Funktion in der Windows PowerShell-Befehlszeile eingeben, wird die Funktion Teil der aktuellen Sitzung.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>It is available until the session ends.</source>
          <target state="translated">Es ist verfügbar, bis die Sitzung beendet wird.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>To use your function in all Windows PowerShell sessions, add the function to your Windows PowerShell profile.</source>
          <target state="translated">Um die Funktion in allen Windows PowerShell-Sitzungen zu verwenden, fügen Sie die Funktion der Windows PowerShell-Profil.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For more information about profiles, see about_Profiles (http://go.microsoft.com/fwlink/?LinkID=113729).</source>
          <target state="translated">Weitere Informationen zu Profilen finden Sie unter "about_profiles" (http://go.microsoft.com/fwlink/?LinkID=113729).</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>You can also save your function in a Windows PowerShell script file.</source>
          <target state="translated">Sie können auch die Funktion in einer Windows PowerShell-Skriptdatei speichern.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Type your function in a text file, and then save the file with the .ps1 file name extension.</source>
          <target state="translated">Geben Sie die Funktion in einer Textdatei, und speichern Sie die Datei mit der Erweiterung. ps1-Datei.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Writing Help for Functions The Get-Help cmdlet gets help for functions, as well as for cmdlets, providers, and scripts.</source>
          <target state="translated">Das Schreiben von Hilfe für die Funktionen der Get-Help-Cmdlet Ruft die Hilfe für Funktionen sowie für Cmdlets, Anbieter und Skripts.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>To get help for a function, type Get-Help followed by the function name.</source>
          <target state="translated">Um Hilfe für eine Funktion zu erhalten, geben Sie Get-Help, gefolgt vom Namen Funktion.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>For example, to get help for the Get-MyDisks function, type:</source>
          <target state="translated">Geben Sie beispielsweise, um Hilfe für die Get-MyDisks-Funktion zu erhalten:</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Get-Help Get-MyDisks</source>
          <target state="translated">Get-Help Get-MyDisks</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>You can write help for a function by using either of the two following methods:</source>
          <target state="translated">Sie können die Hilfe für eine Funktion schreiben, mithilfe einer der beiden folgenden Methoden:</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>--  Comment-Based Help  for Functions</source>
          <target state="translated">--Befehlsbasierte Hilfe für Funktionen</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Create a help topic by using special keywords in the comments.</source>
          <target state="translated">Erstellen Sie ein Hilfethema mit speziellen Schlüsselwörter in den Kommentaren.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>To create comment-based help for a function, the comments must be placed at the beginning or end of the function body or on the lines preceding the function keyword.</source>
          <target state="translated">Um befehlsbasierte Hilfe für eine Funktion zu erstellen, müssen die Kommentare am Anfang oder am Ende der Hauptteil der Funktion oder in den Zeilen vor dem Schlüsselwort Function platziert werden.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>For more information about comment-based help, see about_Comment_Based_Help.</source>
          <target state="translated">Weitere Informationen zu befehlsbasierte Hilfe finden Sie unter "About_Comment_Based_Help".</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>--  XML-Based Help  for Functions</source>
          <target state="translated">--XML-basierte Hilfe für Funktionen</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Create an XML-based help topic, such as the type that is typically created for cmdlets.</source>
          <target state="translated">Erstellen Sie eine XML-basierte Hilfethema, z. B. der Typ, der in der Regel für Cmdlets erstellt wird.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>XML-based help is required if you are localizing help topics into multiple languages.</source>
          <target state="translated">XML-basierte Hilfe ist erforderlich, wenn Sie Hilfethemen in mehrere Sprachen lokalisieren.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>To associate the function with the XML-based help topic, use the .ExternalHelp comment-based help keyword.</source>
          <target state="translated">Um die Funktion mit dem XML-basierten zuzuordnen, verwenden Sie die. ExternalHelp Kommentar-basierte Hilfeschlüsselwort.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Without this keyword, Get-Help cannot find the function help topic and calls to Get-Help for the function return only auto-generated help.</source>
          <target state="translated">Ohne dieses Schlüsselwort Get-Help das Hilfethema für die Funktion kann nicht gefunden werden, und Aufrufe von Get-Help für die Funktion nur automatisch generierte Hilfe zurück.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>For more information about the ExternalHelp keyword, see about_Comment_Based_Help.</source>
          <target state="translated">Weitere Informationen zum ExternalHelp-Schlüsselwort finden Sie unter "About_Comment_Based_Help".</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>For more information about XML-based help, see "How to Write Cmdlet Help" in MSDN.</source>
          <target state="translated">Weitere Informationen über die XML-basierte Hilfe finden Sie unter "Wie to Write Cmdlet Help" in MSDN.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">SIEHE AUCH</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>about_Automatic_Variables about_Comment_Based_Help about_Functions_Advanced about_Functions_Advanced_Methods about_Functions_Advanced_Parameters about_Functions_CmdletBindingAttribute about_Functions_OutputTypeAttribute about_Parameters about_Profiles about_Scopes about_Script_Blocks Function (provider)</source>
          <target state="translated">About_Automatic_Variables About_Comment_Based_Help About_Functions_Advanced About_Functions_Advanced_Methods About_Functions_Advanced_Parameters About_Functions_CmdletBindingAttribute About_Functions_OutputTypeAttribute About_Parameters About_Profiles "about_scopes" "about_script_blocks"-Funktion (Anbieter)</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>