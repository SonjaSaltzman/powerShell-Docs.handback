<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ce2ef1ef5bf2d0aa2cbe0428f761383153dd1af5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\About\about_Parsing.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc867c37c50ca14139d306dd22baa7f673f2001c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">755fe011c1c3563ab1fb61ad1889ea72a7ea0ed9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Parsing</source>
          <target state="translated">about_Parsing</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">PowerShell-Cmdlets</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Parsing</source>
          <target state="translated">Zum Analysieren von</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Parsing</source>
          <target state="translated">about_Parsing</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>TOPIC</source>
          <target state="translated">THEMA</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>about_Parsing</source>
          <target state="translated">about_Parsing</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">KURZE BESCHREIBUNG</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Describes how Windows PowerShell parses commands.</source>
          <target state="translated">Beschreibt, wie Windows PowerShell Befehle analysiert.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">LANGE BESCHREIBUNG</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When you enter a command at the command prompt, Windows PowerShell breaks the command text into a series of segments called "tokens" and then determines how to interpret each "token."</source>
          <target state="translated">Wenn Sie einen Befehl an der Befehlszeile eingeben, wird Windows PowerShell unterbricht den Befehlstext in einer Reihe von Segmenten "Token" aufgerufen und bestimmt dann, wie interpretiert jede "Token".</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, if you type:</source>
          <target state="translated">Angenommen, Sie geben:</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Write-Host book</source>
          <target state="translated">Write-Host-Buch</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Windows PowerShell breaks the following command into two tokens, "Write-Host" and "book", and interprets each token independently.</source>
          <target state="translated">Windows PowerShell wird von den folgenden Befehl in zwei Token, "Write-Host" und "Book", und jedes Token unabhängig voneinander interpretiert.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When processing a command, the Windows PowerShell parser operates in expression mode or in argument mode:</source>
          <target state="translated">Bei der Verarbeitung eines Befehls arbeitet der Windows PowerShell-Parser im Ausdruck Modus oder im Argument-Modus:</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In expression mode, character string values must be contained in quotation marks.</source>
          <target state="translated">Im Modus "Ausdruck" müssen Zeichenfolgenwerte in Anführungszeichen eingeschlossen werden.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Numbers not enclosed in quotation marks are treated as numerical values (rather than as a series of characters).</source>
          <target state="translated">Zahlen, die nicht in Anführungszeichen eingeschlossen werden als numerische Werte (und nicht als eine Reihe von Zeichen) behandelt.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In argument mode, each value is treated as an expandable string unless it begins with one of the following special characters: dollar sign ($), at sign (@), single quotation mark ('), double quotation mark ("), or an opening parenthesis (().</source>
          <target state="translated">Im Modus "Argument" wird jeder Wert als erweiterbare Zeichenfolge behandelt, es sei denn, sie mit einem der folgenden Sonderzeichen beginnt: Dollarzeichen ($), at-Zeichen (@), einfache Anführungszeichen ('), doppelte Anführungszeichen (") oder eine öffnende Klammer (().</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If preceded by one of these characters, the value is treated as a value expression.</source>
          <target state="translated">Wenn eines dieser Zeichen vorangestellt, wird der Wert als ein Ausdruck behandelt.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following table provides several examples of commands processed in expression mode and argument mode and the results produced by those commands.</source>
          <target state="translated">Die folgende Tabelle enthält einige Beispiele für Befehle, die im Ausdruck und Argument-Modus und die Ergebnisse dieser Befehle verarbeitet.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Example            Mode         Result</source>
          <target state="translated">Ergebnis der Beispiel-Modus</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>2+2                Expression   4 (integer) Write-Output 2+2   Argument     "2+2" (string) Write-Output (2+2) Expression   4 (integer) $a = 2+2           Expression   $a = 4 (integer) Write-Output $a    Expression   4 (integer) Write-Output $a/H  Argument     "4/H" (string)</source>
          <target state="translated">2 + 2 Ausdruck 4 (Integer) Write-Output 2 + 2 Argument "2 + 2" (Zeichenfolge) Write-Output (2 + 2) Ausdruck 4 (Integer) $eine 2 + 2 = Ausdruck $ein = 4 (Integer) Write-Output $ein Ausdruck 4 (Integer) Write-Output $a/H-Argument "4/H" (Zeichenfolge)</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Every token can be interpreted as some kind of object type, such as Boolean or string.</source>
          <target state="translated">Jedes Token kann als eine Art von Objekttypen, z. B. boolesche Werte oder Zeichenfolge interpretiert werden.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Windows PowerShell attempts to determine the object type from the expression.</source>
          <target state="translated">Windows PowerShell versucht, den Objekttyp aus dem Ausdruck zu bestimmen.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The object type depends on the type of parameter a command expects and on whether Windows PowerShell knows how to convert the argument to the correct type.</source>
          <target state="translated">Der Objekttyp hängt von auf den Typ des Parameters, der ein Befehl erwartet und gibt an, ob Windows PowerShell weiß, wie das Argument in den richtigen Typ zu konvertieren.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following table shows several examples of the types assigned to values returned by the expressions.</source>
          <target state="translated">Die folgende Tabelle zeigt einige Beispiele für die Typen, die vom Ausdruck zurückgegebenen Werte zugewiesen.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Example            Mode         Result</source>
          <target state="translated">Ergebnis der Beispiel-Modus</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Write-Output !1    argument     "!1" (string) Write-Output (!1)  expression   False (Boolean) Write-Output (2)   expression   2 (integer)</source>
          <target state="translated">Write-Output! 1 Argument "! 1" (Zeichenfolge) Write-Output (! 1) False (Boolean) Write-Output (2) Ausdruck 2 (ganze Zahl)</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>STOP PARSING:  --% The stop-parsing symbol (--%), introduced in Windows PowerShell 3.0, directs Windows PowerShell to refrain from interpreting input as Windows PowerShell commands or expressions.</source>
          <target state="translated">ANALYSE BEENDEN:--% das Stop-parsing-Symbol (--%), in Windows PowerShell 3.0 eingeführt wurde, weist Windows PowerShell von Eingabe als Windows PowerShell-Befehle oder Ausdrücke interpretiert.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When calling an executable program in Windows PowerShell, place the stop-parsing symbol before the program arguments.</source>
          <target state="translated">Wenn Sie ein ausführbares Programm in Windows PowerShell aufrufen, platzieren Sie das Stop-parsing-Symbol vor den Argumenten für die Anwendung.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This technique is much easier than using escape characters to prevent misinterpretation.</source>
          <target state="translated">Dieses Verfahren ist viel einfacher als die Verwendung von Escapezeichen um Fehlinterpretationen zu vermeiden.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When it encounters a stop-parsing symbol, Windows PowerShell treats the remaining characters in the line as a literal.</source>
          <target state="translated">Es trifft eine Stop-parsing-Symbol behandelt Windows PowerShell die übrigen Zeichen in der Zeile als Literal an.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The only interpretation it performs is to substitute values for environment variables that use standard Windows notation, such as %USERPROFILE%.</source>
          <target state="translated">Die einzige Interpretation, die er ausführt wird, Werte für Umgebungsvariablen zu ersetzen, die standardmäßige Windows-Schreibweise, wie z. B. %UserProfile% verwenden.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The stop-parsing symbol is effective only until the next newline or pipeline character.</source>
          <target state="translated">Die Stop-parsing-Symbol ist nur bis zum nächsten Zeichen Zeilenumbruch oder Pipeline wirksam.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You cannot use a continuation character (`) to extend its effect or use a command delimiter (;) to terminate its effect.</source>
          <target state="translated">Sie können Fortsetzungszeichen (') als Resultat erweitern oder ein Befehlstrennzeichen (;) verwenden, um die Auswirkung zu beenden.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, the following command calls the Icacls program.</source>
          <target state="translated">Der folgende Befehl ruft z. B. die Icacls-Anwendung.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>icacls X:\VMS /grant Dom\HVAdmin:(CI)(OI)F</source>
          <target state="translated">Icacls X:\VMS/GRANT Dom\HVAdmin:(CI) (OI) F</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To run this command in Windows PowerShell 2.0, you must use escape characters to prevent Windows PowerShell from misinterpreting the parentheses.</source>
          <target state="translated">Zum Ausführen dieses Befehls in Windows PowerShell 2.0 müssen Sie Escapezeichen verwenden, um zu verhindern, dass Windows PowerShell die Klammern Formatelementen.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>icacls X:\VMS /grant Dom\HVAdmin:<ph id="ph1">`(CI`</ph>)<ph id="ph2">`(OI`</ph>)F</source>
          <target state="translated">Icacls X:\VMS/GRANT Dom\HVAdmin:<ph id="ph1">`(CI`</ph>)<ph id="ph2">`(OI`</ph>) F</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, you can use the stop-parsing symbol.</source>
          <target state="translated">Ab Windows PowerShell 3.0 können Sie das Stop-parsing-Symbol.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>icacls X:\VMS --% /grant Dom\HVAdmin:(CI)(OI)F</source>
          <target state="translated">Icacls X:\VMS--% / GRANT Dom\HVAdmin:(CI) (OI) F</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Windows PowerShell sends the following command string to the Icacls  program: X:\VMS /grant Dom\HVAdmin:(CI)(OI)F</source>
          <target state="translated">Windows PowerShell sendet die folgenden Befehlszeichenfolge an das Programm Icacls: X:\VMS/GRANT Dom\HVAdmin:(CI) (OI) F</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">SIEHE AUCH</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>about_Command_Syntax</source>
          <target state="translated">about_Command_Syntax</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>