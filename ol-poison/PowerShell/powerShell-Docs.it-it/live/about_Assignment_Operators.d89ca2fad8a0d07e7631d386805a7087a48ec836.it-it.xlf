<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">65d5bd701009b432d662103368f387402ae06f59</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Assignment_Operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f126ff1ffad139b08ffaa77b15f76d1d7c7aabec</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c403214c5d4507878e0a7e6bf398e5fc7b9e4c11</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Assignment_Operators</source>
          <target state="translated">about_Assignment_Operators</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">cmdlet PowerShell</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Assignment Operators</source>
          <target state="translated">Informazioni sugli operatori di assegnazione</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Assignment_Operators</source>
          <target state="translated">about_Assignment_Operators</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_assignment_operators</source>
          <target state="translated">about_assignment_operators</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">DESCRIZIONE BREVE</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes how to use operators to assign values to variables.</source>
          <target state="translated">Viene descritto come utilizzare gli operatori per assegnare valori alle variabili.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">DESCRIZIONE LUNGA</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Assignment operators assign one or more values to a variable.</source>
          <target state="translated">Operatori di assegnazione assegnano uno o più valori a una variabile.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>They can perform numeric operations on the values before the assignment.</source>
          <target state="translated">Eseguono operazioni numeriche ai valori prima dell'assegnazione.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Windows PowerShell supports the following assignment operators.</source>
          <target state="translated">Windows PowerShell supporta i seguenti operatori di assegnazione.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Operator  Description</source>
          <target state="translated">Descrizione dell'operatore</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>=         Sets the value of a variable to the specified value.</source>
          <target state="translated">= Imposta il valore di una variabile sul valore specificato.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>+=        Increases the value of a variable by the specified value, or appends the specified value to the existing value.</source>
          <target state="translated">+ = Aumenta il valore di una variabile dal valore specificato e aggiunge il valore specificato per il valore esistente.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>-=        Decreases the value of a variable by the specified value.</source>
          <target state="translated">-= Diminuisce il valore di una variabile dal valore specificato.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>*=        Multiplies the value of a variable by the specified value, or appends the specified value to the existing value.</source>
          <target state="translated">* = Moltiplica il valore di una variabile per il valore specificato e aggiunge il valore specificato per il valore esistente.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>/=        Divides the value of a variable by the specified value.</source>
          <target state="translated">/ = Divide il valore di una variabile per il valore specificato.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>%=        Divides the value of a variable by the specified value and then assigns the remainder (modulus) to the variable.</source>
          <target state="translated">% = Divide il valore di una variabile per il valore specificato e quindi assegna il resto (modulo) alla variabile.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>++        Increases the value of a variable, assignable property, or array element by 1.</source>
          <target state="translated">+ + Aumenta il valore di una variabile, una proprietà può essere assegnato o un elemento della matrice 1.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>--        Decreases the value of a variable, assignable property, or array element by 1.</source>
          <target state="translated">-Diminuisce il valore di una variabile, una proprietà può essere assegnato o un elemento della matrice di 1.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">SINTASSI</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The syntax of the assignment operators is as follows:</source>
          <target state="translated">La sintassi degli operatori di assegnazione è come segue:</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>&lt;assignable-expression&gt; &lt;assignment-operator&gt;</source>
          <target state="translated">&lt; assegnabile espressione &gt;&lt; operatore di assegnazione &gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Assignable expressions include variables and properties.</source>
          <target state="translated">Le espressioni assegnabile includere variabili e proprietà.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The value can be a single value, an array of values, or a command, expression, or statement.</source>
          <target state="translated">Il valore può essere un singolo valore, una matrice di valori, o un comando, espressione o istruzione.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The increment and decrement operators are unary operators.</source>
          <target state="translated">Gli operatori di incremento e decremento sono operatori unari.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Each has prefix and postfix versions.</source>
          <target state="translated">Versioni di prefisso e suffisso di ciascuno.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>&lt;assignable-expression&gt;<ph id="ph1">&lt;operator&gt;
&lt;operator&gt;</ph>&lt;assignable-expression&gt;</source>
          <target state="translated">&lt; assegnabile espressione &gt;<ph id="ph1">&lt;operator&gt;
&lt;operator&gt;</ph>&lt; assegnabile espressione &gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The assignable expression must a number or it must be convertible to a number.</source>
          <target state="translated">L'espressione può essere assegnato deve essere un numero o deve essere convertibile in un numero.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>ASSIGNING VALUES</source>
          <target state="translated">L'ASSEGNAZIONE DI VALORI</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Variables are named memory spaces that store values.</source>
          <target state="translated">Le variabili sono denominate spazi di memoria che archiviano i valori.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You store the values in variables by using the assignment operator (=).</source>
          <target state="translated">Archiviare i valori nelle variabili utilizzando l'operatore di assegnazione (=).</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The new value can replace the existing value of the variable, or you can append a new value to the existing value.</source>
          <target state="translated">Il nuovo valore possibile sostituire il valore della variabile esistente oppure è possibile aggiungere un nuovo valore per il valore esistente.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The basic assignment operator is the equal sign (=)(ASCII 61).</source>
          <target state="translated">L'operatore di assegnazione di base è il segno di uguale (=) (61 ASCII).</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, the following statement assigns the value Windows PowerShell to the $MyShell variable:</source>
          <target state="translated">Ad esempio, l'istruzione seguente assegna il valore di Windows PowerShell per la variabile $MyShell:</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>$MyShell = "Windows PowerShell"</source>
          <target state="translated">$MyShell = "Windows PowerShell"</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When you assign a value to a variable in Windows PowerShell, the variable is created if it did not already exist.</source>
          <target state="translated">Quando si assegna un valore a una variabile in Windows PowerShell, la variabile viene creata se non esiste.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, the first of the following two assignement statements creates the $a variable and assigns a value of 6 to $a.</source>
          <target state="translated">Ad esempio, la prima delle due istruzioni assignement seguente crea la variabile $a e assegna un valore pari a 6 per $una.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The second assignment statement assigns a value of 12 to $a.</source>
          <target state="translated">La seconda istruzione di assegnazione assegna un valore pari a 12 per $una.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The first statement creates a new variable.</source>
          <target state="translated">La prima istruzione crea una nuova variabile.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The second statement changes only its value:</source>
          <target state="translated">La seconda istruzione modifica solo il relativo valore:</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>$a = 6 $a = 12</source>
          <target state="translated">$un = 6 $un = 12</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Variables in Windows PowerShell do not have a specific data type unless you cast them.</source>
          <target state="translated">Le variabili in Windows PowerShell non è necessario un tipo di dati specifico, a meno che non si esegue il cast.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When a variable contains only one object, the variable takes the data type of that object.</source>
          <target state="translated">Quando una variabile contiene un solo oggetto, la variabile ha il tipo di dati di tale oggetto.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When a variable contains a collection of objects, the variable has the System.Object data type.</source>
          <target state="translated">Quando una variabile contiene una raccolta di oggetti, la variabile è il tipo di dati System. Object.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Therefore, you can assign any type of object to the collection.</source>
          <target state="translated">Pertanto, è possibile assegnare qualsiasi tipo di oggetto alla raccolta.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following example shows that you can add process objects, service objects, strings, and integers to a variable without generating an error:</source>
          <target state="translated">Nell'esempio seguente viene illustrato che è possibile aggiungere i oggetti processo, gli oggetti del servizio, stringhe e numeri interi a una variabile senza generare un errore:</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>$a = get-process $a += get-service $a += "string" $a += 12</source>
          <target state="translated">$un = $un get-service + = $ get-process un + = "stringa" $a + = 12</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Because the assignment operator (=) has a lower precedence than the pipeline operator (|), parentheses are not required to assign the result of a command pipeline to a variable.</source>
          <target state="translated">Poiché l'operatore di assegnazione (=) ha una precedenza inferiore rispetto all'operatore pipeline (|), parentesi non è necessario assegnare il risultato di una pipeline di comandi a una variabile.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example, the following command sorts the services on the computer and then assigns the sorted services to the $a variable:</source>
          <target state="translated">Ad esempio, il comando seguente Ordina i servizi nel computer e i servizi ordinati assegna alla variabile $a:</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>$a = get-service | sort name</source>
          <target state="translated">$un = get-service | Nome ordinamento</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can also assign the value created by a statement to a variable, as in the following example:</source>
          <target state="translated">È inoltre possibile assegnare il valore creato da un'istruzione a una variabile, come nell'esempio seguente:</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>$a = if ($b -lt 0) { 0 } else { $b }</source>
          <target state="translated">$un = se ($b - lt 0) {0} else {$b}</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This example assigns 0 to the $a variable if the value of $b is less than 0.</source>
          <target state="translated">Questo esempio assegna 0 alla variabile $a se il valore di $b è minore di 0.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It assigns the value of $b to $a if the value of $b is not less than zero.</source>
          <target state="translated">Assegna il valore di $b a $a se il valore di $b non minore di zero.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT OPERATOR (=)</source>
          <target state="translated">L'OPERATORE DI ASSEGNAZIONE (=)</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The assignment operator (=) assigns values to variables.</source>
          <target state="translated">L'operatore di assegnazione (=) vengono assegnati valori alle variabili.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If the variable already has a value, the assignment operator (=) replaces the value without warning.</source>
          <target state="translated">Se la variabile ha già un valore, l'operatore di assegnazione (=) sostituisce il valore senza alcun avviso.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following statement assigns the integer value 6 to the $a variable:</source>
          <target state="translated">L'istruzione seguente assegna il valore integer 6 alla variabile $a:</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>$a = 6</source>
          <target state="translated">$un = 6</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To assign a string value to a variable, enclose the string value in quotation marks, as follows:</source>
          <target state="translated">Per assegnare un valore stringa a una variabile, racchiudere il valore di stringa tra virgolette, come indicato di seguito:</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>$a = "baseball"</source>
          <target state="translated">$a = "baseball"</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To assign an array (multiple values) to a variable, separate the values with commas, as follows:</source>
          <target state="translated">Per assegnare una matrice (più valori) a una variabile, separare i valori con virgole, come indicato di seguito:</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>$a = "apple", "orange", "lemon", "grape"</source>
          <target state="translated">$a = "apple", "arancione", "limone", "uva"</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To assign a hash table to a variable, use the standard hash table notation in Windows PowerShell.</source>
          <target state="translated">Per assegnare una tabella hash per una variabile, utilizzare la notazione di tabella hash standard in Windows PowerShell.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Type an at sign (@) followed by key/value pairs that are separated by semicolons (;) and enclosed in braces ({ }).</source>
          <target state="translated">Tipo di un simbolo di chiocciola (@) seguita da coppie chiave/valore separate da punti e virgola e racchiusi tra parentesi graffe ({}).</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, to assign a hash table to the $a variable, type:</source>
          <target state="translated">Ad esempio, per assegnare la variabile $a una tabella hash, digitare:</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>$a = @{one=1; two=2; three=3}</source>
          <target state="translated">$un = @{uno = 1; due = 2; tre = 3}</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To assign hexadecimal values to a variable, precede the value with "0x".</source>
          <target state="translated">Per assegnare valori esadecimali a una variabile, far precedere il valore con "0x".</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Windows PowerShell converts the hexadecimal value (0x10) to a decimal value (in this case, 16) and assigns that value to the $a variable.</source>
          <target state="translated">Windows PowerShell converte il valore esadecimale (0x10) in un valore decimale (in questo caso, 16) e assegna tale valore alla variabile $a.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, to assign a value of 0x10 to the $a variable, type:</source>
          <target state="translated">Ad esempio, per assegnare un valore di 0x10 alla variabile $a, digitare:</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>$a = 0x10</source>
          <target state="translated">$un = 0x10</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To assign an exponential value to a variable, type the root number, the letter "e", and a number that represents a multiple of 10.</source>
          <target state="translated">Per assegnare un valore esponenziale a una variabile, digitare il numero principale, la lettera "e" e un numero che rappresenta un multiplo pari a 10.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For example, to assign a value of 3.1415 to the power of 1,000 to the $a variable, type:</source>
          <target state="translated">Ad esempio, per assegnare un valore di 3,1415 alla potenza di 1.000 per la variabile $a, digitare:</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>$a = 3.1415e3</source>
          <target state="translated">$un = 3.1415e3</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Windows PowerShell can also convert kilobytes (KB), megabytes (MB), and gigabytes (GB) into bytes.</source>
          <target state="translated">Windows PowerShell può inoltre convertire kilobyte (KB), megabyte (MB) e gigabyte (GB) in byte.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, to assign a value of 10 kilobytes to the $a variable, type:</source>
          <target state="translated">Ad esempio, per assegnare un valore di 10 KB per la variabile $a, digitare:</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>$a = 10kb</source>
          <target state="translated">$un = 10kb</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT BY ADDITION OPERATOR (+=)</source>
          <target state="translated">L'ASSEGNAZIONE DA OPERATORE DI ADDIZIONE (+ =)</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The assignment by addition operator (+=) either increments the value of a variable or appends the specified value to the existing value.</source>
          <target state="translated">L'assegnazione da operatore di addizione (+ =) incrementa il valore di una variabile o aggiunge il valore specificato per il valore esistente.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The action depends on whether the variable has a numeric or string type and whether the variable contains a single value (a scalar) or multiple values (a collection).</source>
          <target state="translated">L'azione dipende da se la variabile contiene un tipo numerico o stringa, se la variabile contiene un singolo valore (scalare) o più valori (insieme).</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The += operator combines two operations.</source>
          <target state="translated">L'operatore + = combina le due operazioni.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>First, it adds, and then it assigns.</source>
          <target state="translated">Innanzitutto, viene aggiunto e quindi assegna.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Therefore, the following statements are equivalent:</source>
          <target state="translated">Di conseguenza, le istruzioni seguenti sono equivalenti:</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>$a += 2 $a = ($a + 2)</source>
          <target state="translated">$ $ a un + = 2 = ($un + 2)</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When the variable contains a single numeric value, the += operator increments the existing value by the amount on the right side of the operator.</source>
          <target state="translated">Quando la variabile contiene un singolo valore numerico, l'operatore + = incrementa il valore esistente della quantità sul lato destro dell'operatore.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Then, the operator assigns the resulting value to the variable.</source>
          <target state="translated">L'operatore, quindi assegna il valore risultante alla variabile.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the += operator to increase the value of a variable:</source>
          <target state="translated">Nell'esempio seguente viene illustrato come utilizzare l'operatore + = per aumentare il valore di una variabile:</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 4 C:\PS&gt; $a += 2 C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $un = 4 c:\ps&gt;Get-applockerpolicy &gt; $un c:\ps&gt;Get-applockerpolicy + = 2 &gt; $un</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>When the value of the variable is a string, the value on the right side of the operator is appended to the string, as follows:</source>
          <target state="translated">Quando il valore della variabile è una stringa, il valore sul lato destro dell'operatore viene aggiunto alla stringa, come indicato di seguito:</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "Windows" C:\PS&gt; $a += " PowerShell" C:\PS&gt; $a Windows PowerShell</source>
          <target state="translated">C:\ps&gt; &gt; $a = "Windows" c:\ps&gt;Get-applockerpolicy &gt; $a + = "PowerShell" c:\ps&gt;Get-applockerpolicy &gt; $ Windows PowerShell</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>When the value of the variable is an array, the += operator appends the values on the right side of the operator to the array.</source>
          <target state="translated">Quando il valore della variabile è una matrice, l'operatore + = accoda i valori sul lato destro dell'operatore nella matrice.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Unless the array is explicitly typed by casting, you can append any type of value to the array, as follows:</source>
          <target state="translated">A meno che la matrice è tipizzata in modo esplicito eseguendo il cast, è possibile aggiungere qualsiasi tipo di valore nella matrice, come indicato di seguito:</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 1,2,3 C:\PS&gt; $a += 2 C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $un c:\ps&gt;Get-applockerpolicy 1,2, 3 = &gt; $un c:\ps&gt;Get-applockerpolicy + = 2 &gt; $un</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a += "String" C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $a + = "Stringa" c:\ps&gt;Get-applockerpolicy &gt; $un</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>When the value of a variable is a hash table, the += operator appends the value on the right side of the operator to the hash table.</source>
          <target state="translated">Quando il valore di una variabile è una tabella hash, l'operatore + = aggiunge il valore sul lato destro dell'operatore per la tabella hash.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>However, because the only type that you can add to a hash table is another hash table, all other assignments fail.</source>
          <target state="translated">Tuttavia, poiché l'unico tipo che è possibile aggiungere a una tabella hash è un'altra tabella di hash, non tutte le altre assegnazioni.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For example, the following command assigns a hash table to the $a variable.</source>
          <target state="translated">Il comando seguente, ad esempio, assegna una tabella hash per la variabile $a.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Then, it uses the += operator to append another hash table to the existing hash table, effectively adding a new key/value pair to the existing hash table.</source>
          <target state="translated">Quindi, utilizza l'operatore + = per aggiungere un'altra tabella di hash per la tabella hash esistente, in modo efficace aggiungendo una nuova coppia chiave/valore della tabella hash.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This command succeeds, as shown in the output:</source>
          <target state="translated">Questo comando ha esito positivo, come illustrato nell'output:</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = @{a = 1; b = 2; c = 3} C:\PS&gt; $a += @{mode = "write"} C:\PS&gt; $a Name                           Value</source>
          <target state="translated">C:\ps&gt; &gt; $un = @{un = 1; b = 2; c = 3} c:\ps&gt;Get-applockerpolicy &gt; $a + = @{modalità = "scrittura"} c:\ps&gt;Get-applockerpolicy &gt; $un valore di nome</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>a                              1 b                              2 mode                           write c                              3</source>
          <target state="translated">a                              1 b                              2 mode                           write c                              3</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The following command attempts to append an integer (1) to the hash table in the $a variable.</source>
          <target state="translated">Il seguente comando tenta di aggiungere un numero intero (1) per la tabella hash nella variabile $a.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This command fails:</source>
          <target state="translated">Questo comando ha esito negativo:</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = @{a = 1; b = 2; c = 3} C:\PS&gt; $a += 1 You can add another hash table only to a hash table.</source>
          <target state="translated">C:\ps&gt; &gt; $un = @{un = 1; b = 2, c = 3} c:\ps&gt;Get-applockerpolicy &gt; $a + = 1, è possibile aggiungere un'altra tabella di hash solo in una tabella hash.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>At line:1 char:6</source>
          <target state="translated">Riga: 1 char: 6</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>$a += &lt;&lt;&lt;&lt;  1</source>
          <target state="translated">$a + = &lt;&lt;&lt;&lt; 1</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT BY SUBTRACTION OPERATOR (-=)</source>
          <target state="translated">L'ASSEGNAZIONE DALL'OPERATORE DI SOTTRAZIONE (-)</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The assignment by subtraction operator (-=) decrements the value of a variable by the value that is specified on the right side of the operator.</source>
          <target state="translated">L'assegnazione da decrementa di sottrazione (operatore) (-) il valore di una variabile per il valore specificato sul lato destro dell'operatore.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This operator cannot be used with string variables, and it cannot be used to remove an element from a collection.</source>
          <target state="translated">Questo operatore non può essere utilizzato con variabili di stringa e non può essere utilizzato per rimuovere un elemento da una raccolta.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The -= operator combines two operations.</source>
          <target state="translated">Il-= operatore combina le due operazioni.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>First, it subtracts, and then it assigns.</source>
          <target state="translated">Innanzitutto, viene sottratta, e quindi viene assegnato.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Therefore, the following statements are equivalent:</source>
          <target state="translated">Di conseguenza, le istruzioni seguenti sono equivalenti:</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>$a -= 2 $a = ($a - 2)</source>
          <target state="translated">$a-= 2 $a = ($a - 2)</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The following example shows how to use of the -= operator to decrease the value of a variable:</source>
          <target state="translated">Nell'esempio seguente viene illustrato come utilizzare l'operatore-= per diminuire il valore di una variabile:</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 8 C:\PS&gt; $a -= 2 C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $un = 8 c:\ps&gt; &gt; $a-= c:\ps&gt;Get-applockerpolicy 2 &gt; $un</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>You can also use the -= assignment operator to decrease the value of a member of a numeric array.</source>
          <target state="translated">È inoltre possibile utilizzare l'operatore di assegnazione-= per ridurre il valore di un membro di una matrice numerica.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>To do this, specify the index of the array element that you want to change.</source>
          <target state="translated">A tale scopo, specificare l'indice dell'elemento della matrice che si desidera modificare.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the third element of an array (element 2) is decreased by 1:</source>
          <target state="translated">Nell'esempio seguente, il valore del terzo elemento della matrice (elemento 2) viene diminuito di 1:</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 1,2,3 C:\PS&gt; $a[2] -= 1.</source>
          <target state="translated">C:\ps&gt; &gt; $un c:\ps&gt;Get-applockerpolicy 1,2, 3 = &gt; $un-= [2] 1.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $un</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>You cannot use the -= operator to delete the values of a variable.</source>
          <target state="translated">È possibile utilizzare l'operatore-= per eliminare i valori di una variabile.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>To delete all the values that are assigned to a variable, use the Clear-Item or Clear-Variable cmdlets to assign a value of $null or "" to the variable.</source>
          <target state="translated">Per eliminare tutti i valori assegnati a una variabile, utilizzare il cmdlet Clear-Item o Clear-Variable per assegnare un valore di $null o "" alla variabile.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>$a = $null</source>
          <target state="translated">$un = $null</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>To delete a particular value from an array, use array notation to assign a value of $null to the particular item.</source>
          <target state="translated">Per eliminare un valore specifico da una matrice, utilizzare la notazione di matrice per assegnare un valore di $null a un determinato articolo.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>For example, the following statement deletes the second value (index position 1) from an array:</source>
          <target state="translated">Ad esempio, l'istruzione seguente consente di eliminare il secondo valore (indice della posizione 1) da una matrice:</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 1,2,3 C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $un c:\ps&gt;Get-applockerpolicy 1,2, 3 = &gt; $un</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a[1] = $null C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $[1] = $null c:\ps&gt;Get-applockerpolicy &gt; $un</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>To delete a variable, use the Remove-Variable cmdlet.</source>
          <target state="translated">Per eliminare una variabile, utilizzare il cmdlet Remove-Variable.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>This method is useful when the variable is explicitly cast to a particular data type, and you want an untyped variable.</source>
          <target state="translated">Questo metodo è utile quando la variabile è il cast esplicito a un particolare tipo di dati e si desidera che una variabile non tipizzata.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The following command deletes the $a variable:</source>
          <target state="translated">Il seguente comando Elimina la variabile $a:</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>remove-variable a</source>
          <target state="translated">Remove-variable un</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT BY MULTIPLICATION OPERATOR (*=)</source>
          <target state="translated">L'ASSEGNAZIONE DALL'OPERATORE DI MOLTIPLICAZIONE (* =)</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The assignment by multiplication operator (*=) multiplies a numeric value or appends the specified number of copies of the string value of a variable.</source>
          <target state="translated">L'assegnazione dall'operatore di moltiplicazione (* =) moltiplica un valore numerico o aggiunge il numero specificato di copie del valore di stringa di una variabile.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>When a variable contains a single numeric value, that value is multiplied by the value on the right side of the operator.</source>
          <target state="translated">Quando una variabile contiene un singolo valore numerico, tale valore viene moltiplicato per il valore sul lato destro dell'operatore.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>For example, the following example shows how to use the *= operator to multiply the value of a variable:</source>
          <target state="translated">Ad esempio, nell'esempio seguente viene illustrato come utilizzare il * = operatore per moltiplicare il valore di una variabile:</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 3 C:\PS&gt; $a *= 4 C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $un = 3 c:\ps&gt;Get-applockerpolicy &gt; $un * = 4 c:\ps&gt;Get-applockerpolicy &gt; $un</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>12</source>
          <target state="translated">12</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>In this case, the *= operator combines two operations.</source>
          <target state="translated">In questo caso, i * = (operatore) combina due operazioni.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>First, it multiplies, and then it assigns.</source>
          <target state="translated">Innanzitutto, la quantità predefinita e quindi assegna.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Therefore, the following statements are equivalent:</source>
          <target state="translated">Di conseguenza, le istruzioni seguenti sono equivalenti:</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>$a <bpt id="p1">*</bpt>= 2 $a = ($a <ept id="p1">*</ept> 2)</source>
          <target state="translated">$a <bpt id="p1">*</bpt>= 2 $a = ($a <ept id="p1">*</ept> 2)</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>When a variable contains a string value, Windows PowerShell appends the specified number of strings to the value, as follows:</source>
          <target state="translated">Quando una variabile contiene un valore stringa, Windows PowerShell consente di accodare il numero di stringhe specificato sul valore, come indicato di seguito:</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "file" C:\PS&gt; $a *= 4 C:\PS&gt; $a filefilefilefile</source>
          <target state="translated">C:\ps&gt; &gt; $a = "file" c:\ps&gt;Get-applockerpolicy &gt; $un * = 4 c:\ps&gt;Get-applockerpolicy &gt; $a filefilefilefile</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>To multiply an element of an array, use an index to identify the element that you want to multiply.</source>
          <target state="translated">Per moltiplicare un elemento di una matrice, utilizzare un indice per identificare l'elemento che si desidera moltiplicare.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>For example, the following command multiplies the first element in the array (index position 0) by 2:</source>
          <target state="translated">Ad esempio, il comando seguente moltiplica il primo elemento nella matrice (indice della posizione 0) per 2:</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>$a[0] *= 2</source>
          <target state="translated">$[0] * = 2</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT BY DIVISION OPERATOR (/=)</source>
          <target state="translated">L'ASSEGNAZIONE DALL'OPERATORE DI DIVISIONE (/ =)</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The assignment by division operator (/=) divides a numeric value by the value that is specified on the right side of the operator.</source>
          <target state="translated">L'assegnazione dall'operatore di divisione (/ =) divide un valore numerico per il valore specificato sul lato destro dell'operatore.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The operator cannot be used with string variables.</source>
          <target state="translated">L'operatore non può essere utilizzato con variabili di stringa.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The /= operator combines two operations.</source>
          <target state="translated">I = operatore combina due operazioni.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>First, it divides, and then it assigns.</source>
          <target state="translated">Innanzitutto, divide, e quindi viene assegnato.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Therefore, the following two statements are equivalent:</source>
          <target state="translated">Di conseguenza, le due istruzioni seguenti sono equivalenti:</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>$a /= 2 $a = ($a / 2)</source>
          <target state="translated">$un / 2 = $a = ($un / 2)</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>For example, the following command uses the /= operator to divide the value of a variable:</source>
          <target state="translated">Ad esempio, il seguente comando Usa l'operatore / = per dividere il valore di una variabile:</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 8 C:\PS&gt; $a /=2 C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $un = 8 c:\ps&gt;Get-applockerpolicy &gt; $un / = 2 c:\ps&gt;Get-applockerpolicy &gt; $un</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>To divide an element of an array, use an index to identify the element that you want to change.</source>
          <target state="translated">Per dividere un elemento di una matrice, utilizzare un indice per identificare l'elemento che si desidera modificare.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For example, the following command divides the second element in the array (index position 1) by 2:</source>
          <target state="translated">Ad esempio, il comando seguente suddivide il secondo elemento nella matrice (posizione di indice 1) da 2:</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>$a[1] /= 2</source>
          <target state="translated">$[1] = 2</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>THE  ASSIGNMENT BY MODULUS OPERATOR (%=)</source>
          <target state="translated">L'ASSEGNAZIONE DALL'OPERATORE MODULO (% =)</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The assignment by modulus operator (%=) divides the value of a variable by the value on the right side of the operator.</source>
          <target state="translated">L'assegnazione dall'operatore modulo (% =) divide il valore di una variabile per il valore sul lato destro dell'operatore.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Then, the %= operator assigns the remainder (known as the modulus) to the variable.</source>
          <target state="translated">Quindi, % = operatore di assegnazione di resto (noto come il modulo) alla variabile.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>You can use this operator only when a variable contains a single numeric value.</source>
          <target state="translated">È possibile utilizzare questo operatore solo quando una variabile contiene un singolo valore numerico.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>You cannot use this operator when a variable contains a string variable or an array.</source>
          <target state="translated">È possibile utilizzare questo operatore quando una variabile contiene una variabile di stringa o matrice.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The %= operator combines two operations.</source>
          <target state="translated">% = (Operatore) combina due operazioni.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>First, it divides and determines the remainder, and then it assigns the remainder to the variable.</source>
          <target state="translated">Innanzitutto, divide e determina il resto, e quindi assegna il resto alla variabile.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Therefore, the following statements are equivalent:</source>
          <target state="translated">Di conseguenza, le istruzioni seguenti sono equivalenti:</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>$a %= 2 $a = ($a % 2)</source>
          <target state="translated">$a % 2 = $a = ($a % 2)</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the %= operator to save the modulus of a quotient:</source>
          <target state="translated">Nell'esempio seguente viene illustrato come utilizzare il % = (operatore) per salvare il modulo di un quoziente:</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $a %= 4 C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $un = 7 c:\ps&gt;Get-applockerpolicy &gt; $a % = 4 c:\ps&gt;Get-applockerpolicy &gt; $un</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>THE INCREMENT AND DECREMENT OPERATORS</source>
          <target state="translated">GLI OPERATORI DI INCREMENTO E DECREMENTO</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The increment operator (++) increases the value of a variable by 1.</source>
          <target state="translated">L'operatore di incremento (+ +) aumenta il valore di una variabile di 1.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>When you use the increment operator in a simple statement, no value is returned.</source>
          <target state="translated">Quando si utilizza l'operatore di incremento in una semplice istruzione, non viene restituito alcun valore.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>To view the result, display the value of the variable, as follows:</source>
          <target state="translated">Per visualizzare il risultato, visualizzare il valore della variabile, come indicato di seguito:</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; ++$a C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $un = 7 c:\ps&gt;Get-applockerpolicy &gt; + + $a c:\ps&gt;Get-applockerpolicy &gt; $un</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>To force a value to be returned, enclose the variable and the operator in parentheses, as follows:</source>
          <target state="translated">Per imporre un valore da restituire, racchiudere la variabile e l'operatore parentesi, come indicato di seguito:</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; (++$a)</source>
          <target state="translated">C:\ps&gt; &gt; $un = 7 c:\ps&gt;Get-applockerpolicy &gt; (+ + $un)</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The increment operator can be placed before (prefix) or after (postfix) a variable.</source>
          <target state="translated">L'operatore di incremento può essere inserito prima (prefisso) o dopo (suffisso) una variabile.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The prefix version of the operator increments a variable before its value is used in the statement, as follows:</source>
          <target state="translated">La versione prefisso dell'operatore incrementa una variabile prima che il valore viene utilizzato nell'istruzione, come indicato di seguito:</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $c = ++$a C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $un = 7 c:\ps&gt;Get-applockerpolicy &gt; $c = + $a c:\ps&gt;Get-applockerpolicy &gt; $un</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $c</source>
          <target state="translated">C:\ps&gt; $c &gt;</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The postfix version of the operator increments a variable after its value is used in the statement.</source>
          <target state="translated">La versione in forma suffissa dell'operatore incrementa una variabile dopo che il relativo valore viene utilizzato nell'istruzione.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>In the following example, the $c and $a variables have different values because the value is assigned to $c before $a changes:</source>
          <target state="translated">Nell'esempio seguente viene $c e $ variabili hanno valori diversi, perché il valore viene assegnato a $c prima $un modifiche:</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $c = $a++ C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $un = 7 c:\ps&gt;Get-applockerpolicy &gt; $c = $ + + c:\ps&gt;Get-applockerpolicy &gt; $un</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $c</source>
          <target state="translated">C:\ps&gt; $c &gt;</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>7</source>
          <target state="translated">7</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The decrement operator (--) decreases the value of a variable by 1.</source>
          <target state="translated">L'operatore di decremento (-) diminuisce il valore di una variabile di 1.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>As with the increment operator, no value is returned when you use the operator in a simple statement.</source>
          <target state="translated">Come con l'operatore di incremento, viene restituito alcun valore quando si utilizza l'operatore in un'istruzione semplice.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Use parentheses to return a value, as follows:</source>
          <target state="translated">Utilizzare le parentesi per restituire un valore, come indicato di seguito:</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; --$a C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $un = 7 c:\ps&gt;Get-applockerpolicy &gt;-$a c:\ps&gt;Get-applockerpolicy &gt; $un</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; (--$a)</source>
          <target state="translated">C:\ps&gt; &gt; (-$un)</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="translated">5</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The prefix version of the operator decrements a variable before its value is used in the statement, as follows:</source>
          <target state="translated">La versione di prefisso della decrementa operatore una variabile prima che il valore viene utilizzato nell'istruzione, come indicato di seguito:</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $c = --$a C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $un = 7 c:\ps&gt; $c &gt; =--$a c:\ps&gt;Get-applockerpolicy &gt; $un</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $c</source>
          <target state="translated">C:\ps&gt; $c &gt;</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The postfix version of the operator decrements a variable after its value is used in the statement.</source>
          <target state="translated">La versione in forma suffissa della decrementa operatore una variabile dopo che il relativo valore viene utilizzato nell'istruzione.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>In the following example, the $d and $a variables have different values because the value is assigned to $d before $a changes:</source>
          <target state="translated">Nell'esempio seguente viene $d e $ variabili hanno valori diversi, perché il valore viene assegnato a $d prima $un modifiche:</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $d = $a-- C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $un = 7 c:\ps&gt;Get-applockerpolicy &gt; $d = $ c:\ps&gt;Get-applockerpolicy-- &gt; $un</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $d</source>
          <target state="translated">C:\ps&gt; $d &gt;</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>7</source>
          <target state="translated">7</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>MICROSOFT .NET FRAMEWORK TYPES</source>
          <target state="translated">TIPI DI MICROSOFT .NET FRAMEWORK</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>By default, when a variable has only one value, the value that is assigned to the variable determines the data type of the variable.</source>
          <target state="translated">Per impostazione predefinita, quando una variabile ha un solo valore, il valore assegnato alla variabile determina il tipo di dati della variabile.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>For example, the following command creates a variable that has the Integer (System.Int32) type:</source>
          <target state="translated">Ad esempio, il comando seguente crea una variabile di tipo Integer (System. Int32):</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>$a = 6</source>
          <target state="translated">$un = 6</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>To find the .NET Framework type of a variable, use the GetType method and its FullName property, as follows.</source>
          <target state="translated">Per trovare il tipo di .NET Framework di una variabile, utilizzare il metodo GetType e la relativa proprietà FullName, come indicato di seguito.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Be sure to include the parentheses after the GetType method name, even though the method call has no arguments:</source>
          <target state="translated">Assicurarsi di includere le parentesi dopo il nome del metodo GetType, anche se la chiamata al metodo non dispone di argomenti:</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 6 C:\PS&gt; $a.gettype().fullname System.Int32</source>
          <target state="translated">C:\ps&gt; &gt; $un c:\ps&gt; 6 = &gt; System. Int32 .fullname di $a.gettype)</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>To create a variable that contains a string, assign a string value to the variable.</source>
          <target state="translated">Per creare una variabile che contiene una stringa, assegnare un valore stringa alla variabile.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>To indicate that the value is a string, enclose it in quotation marks, as follows:</source>
          <target state="translated">Per indicare che il valore è una stringa, racchiuderlo tra virgolette, come indicato di seguito:</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "6" C:\PS&gt; $a.gettype().fullname System.String</source>
          <target state="translated">C:\ps&gt; &gt; $un c:\ps&gt;Get-applockerpolicy = "6" &gt; System. String .fullname di $a.gettype)</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>If the first value that is assigned to the variable is a string, Windows PowerShell treats all operations as string operations and casts new values to strings.</source>
          <target state="translated">Se il primo valore assegnato alla variabile è una stringa, Windows PowerShell considera tutte le operazioni come operazioni di stringa ed esegue il cast di nuovi valori in stringhe.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>This occurs in the following example:</source>
          <target state="translated">In questo caso nell'esempio seguente:</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "file" C:\PS&gt; $a += 3 C:\PS&gt; $a file3</source>
          <target state="translated">C:\ps&gt; &gt; $a = "file" c:\ps&gt;Get-applockerpolicy &gt; $a + 3 c:\ps&gt;Get-applockerpolicy &gt; $a file3</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>If the first value is an integer, Windows PowerShell treats all operations as integer operations and casts new values to integers.</source>
          <target state="translated">Se il primo valore è un numero intero, Windows PowerShell considera tutte le operazioni come operazioni su numeri interi e proietta nuovi valori per i numeri interi.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>This occurs in the following example:</source>
          <target state="translated">In questo caso nell'esempio seguente:</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 6 C:\PS&gt; $a += "3" C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $un = c:\ps&gt; 6 &gt; $un c:\ps&gt;Get-applockerpolicy + = "3" &gt; $un</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>9</source>
          <target state="translated">9</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>You can cast a new scalar variable as any .NET Framework type by placing the type name in brackets that precede either the variable name or the first assignment value.</source>
          <target state="translated">È possibile impostare una nuova variabile scalare come qualsiasi tipo .NET Framework, inserendo il nome del tipo tra parentesi quadre che precedono il nome della variabile o il primo valore di assegnazione.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>When you cast a variable, you can determine the types of data that can be stored in the variable.</source>
          <target state="translated">Quando si esegue il cast di una variabile, è possibile determinare i tipi di dati che possono essere archiviati nella variabile.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>And, you can determine how the variable behaves when you manipulate it.</source>
          <target state="translated">E, è possibile determinare il comportamento la variabile quando si modifica il.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>For example, the following command casts the variable as a string type:</source>
          <target state="translated">Ad esempio, il comando seguente esegue il cast di variabile come tipo stringa:</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [string]$a = 27 C:\PS&gt; $a += 3 C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; [string] $un = 27 c:\ps&gt;Get-applockerpolicy &gt; $a + 3 c:\ps&gt;Get-applockerpolicy &gt; $un</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>273</source>
          <target state="translated">273</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The following example casts the first value, instead of casting the variable:</source>
          <target state="translated">Nell'esempio seguente viene eseguito il cast il primo valore, anziché eseguire il cast la variabile:</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>$a = [string]27</source>
          <target state="translated">$a = [string] 27</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>When you cast a variable to a specific type, the common convention is to cast the variable, not the value.</source>
          <target state="translated">Quando si esegue il cast di una variabile a un tipo specifico, di solito è eseguire il cast di variabile, non il valore.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>However, you cannot recast the data type of an existing variable if its value cannot be converted to the new data type.</source>
          <target state="translated">Tuttavia, è possibile eseguire il cast il tipo di dati di una variabile esistente se il relativo valore non può essere convertito nel nuovo tipo di dati.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>To change the data type, you must replace its value, as follows:</source>
          <target state="translated">Per modificare il tipo di dati, è necessario sostituire il valore, come indicato di seguito:</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "string" C:\PS&gt; [int]$a Cannot convert value "string" to type "System.Int32".</source>
          <target state="translated">C:\ps&gt; &gt; $a "stringa" c:\ps&gt;Get-applockerpolicy = &gt; [int] $un Impossibile convertire il valore "stringa" al tipo "System. Int32".</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Error: "Input string was not in a correct format."</source>
          <target state="translated">Errore: "stringa di Input non è in formato corretto."</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>At line:1 char:8</source>
          <target state="translated">Riga: 1 char: 8</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>[int]$a &lt;&lt;&lt;&lt;</source>
          <target state="translated">[int] $un &lt;&lt;&lt;&lt;</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [int]$a =3</source>
          <target state="translated">C:\ps&gt; &gt; [int] $un = 3</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>In addition, when you precede a variable name with a data type, the type of that variable is locked unless you explicitly override the type by specifying another data type.</source>
          <target state="translated">Inoltre, quando si antepone un nome di variabile con un tipo di dati, il tipo della variabile è bloccato a meno che non è eseguire l'override in modo esplicito il tipo, specificando un altro tipo di dati.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>If you try to assign a value that is incompatible with the existing type, and you do not explicitly override the type, Windows PowerShell displays an error, as shown in the following example:</source>
          <target state="translated">Se si tenta di assegnare un valore che non è compatibile con il tipo esistente e non ignorare in modo esplicito il tipo, Windows PowerShell Visualizza un errore, come illustrato nell'esempio seguente:</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 3 C:\PS&gt; $a = "string"</source>
          <target state="translated">C:\ps&gt; &gt; $un = 3 c:\ps&gt;Get-applockerpolicy &gt; $a = "string"</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [int]$a = 3 C:\PS&gt; $a = "string" Cannot convert value "string" to type "System.Int32".</source>
          <target state="translated">C:\ps&gt; &gt; [int] $un = 3 c:\ps&gt;Get-applockerpolicy &gt; $a = "string" Impossibile convertire il valore "stringa" al tipo "System. Int32".</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Error: "Input string was not in a correct format."</source>
          <target state="translated">Errore: "stringa di Input non è in formato corretto."</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>At line:1 char:3</source>
          <target state="translated">In line: 1 char: 3</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>$a &lt;&lt;&lt;&lt;  = "string"</source>
          <target state="translated">$un &lt;&lt;&lt;&lt; = "string"</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [string]$a = "string"</source>
          <target state="translated">C:\ps&gt; &gt; $ a [string] = "string"</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell, the data types of variables that contain multiple items in an array are handled differently from the data types of variables that contain a single item.</source>
          <target state="translated">In Windows PowerShell, i tipi di dati delle variabili che contengono più elementi nella matrice vengono gestiti in modo diverso dai tipi di dati delle variabili che contengono un singolo elemento.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Unless a data type is specifically assigned to an array variable, the data type is always System.Object [].</source>
          <target state="translated">A meno che un tipo di dati in modo specifico viene assegnato a una variabile di matrice, il tipo di dati è sempre System. Object [].</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>This data type is specific to arrays.</source>
          <target state="translated">Questo tipo di dati è specifico per le matrici.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Sometimes, you can override the default type by specifying another type.</source>
          <target state="translated">In alcuni casi, è possibile sostituire il tipo predefinito specificando un altro tipo.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>For example, the following command casts the variable as a string [] array type:</source>
          <target state="translated">Ad esempio, il comando seguente esegue il cast di variabile come tipo matrice string []:</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>[string []] $a = "one", "two", "three"</source>
          <target state="translated">[string []] $a = "uno", "two", "tre"</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Windows PowerShell variables can be any .NET Framework data type.</source>
          <target state="translated">Variabili di Windows PowerShell possono essere qualsiasi tipo di dati .NET Framework.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>In addition, you can assign any fully qualified .NET Framework data type that is available in the current process.</source>
          <target state="translated">Inoltre, è possibile assegnare qualsiasi tipo di dati .NET Framework completo che è disponibile nel processo corrente.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>For example, the following command specifies a System.DateTime data type:</source>
          <target state="translated">Ad esempio, il comando seguente specifica un tipo di dati System. DateTime:</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>[system.datetime]$a = "5/31/2005"</source>
          <target state="translated">[system.datetime]$a = "31/5/2005"</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The variable will be assigned a value that conforms to the System.DateTime data type.</source>
          <target state="translated">Alla variabile verrà assegnato un valore conforme al tipo di dati System. DateTime.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The value of the $a variable would be the following:</source>
          <target state="translated">Il valore della variabile $a sarebbe il seguente:</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Tuesday, May 31, 2005 12:00:00 AM</source>
          <target state="translated">Martedì 31 maggio 2005 12:00:00 AM</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>ASSIGNING MULTIPLE VARIABLES</source>
          <target state="translated">L'ASSEGNAZIONE DI PIÙ VARIABILI</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell, you can assign values to multiple variables by using a single command.</source>
          <target state="translated">In Windows PowerShell, è possibile assegnare valori alle variabili più utilizzando un unico comando.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The first element of the assignment value is assigned to the first variable, the second element is assigned to the second variable, the third element to the third variable, and so on.</source>
          <target state="translated">Il primo elemento del valore di assegnazione viene assegnato alla prima variabile, il secondo elemento viene assegnato alla seconda variabile, il terzo elemento per la terza variabile e così via.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>For example, the following command assigns the value 1 to the $a variable, the value 2 to the $b variable, and the value 3 to the $c variable:</source>
          <target state="translated">Ad esempio, il comando seguente assegna il valore 1 nella $una variabile, il valore 2 per la variabile $b e il valore 3 alla variabile $c:</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a, $b, $c = 1, 2, 3</source>
          <target state="translated">C:\ps&gt; &gt; $a $b, $c = 1, 2, 3</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>If the assignment value contains more elements than variables, all the remaining values are assigned to the last variable.</source>
          <target state="translated">Se il valore di assegnazione contiene più elementi variabili, tutti i valori rimanenti vengono assegnati all'ultima variabile.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>For example, the following command contains three variables and five values:</source>
          <target state="translated">Ad esempio, il comando seguente contiene cinque valori e le tre variabili:</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>$a, $b, $c = 1, 2, 3, 4, 5</source>
          <target state="translated">$a $b, $c = 1, 2, 3, 4, 5</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Therefore, Windows PowerShell assigns the value 1 to the $a variable and the value 2 to the $b variable.</source>
          <target state="translated">Di conseguenza, Windows PowerShell assegna il valore 1 alla variabile $a e il valore 2 per la variabile $b.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>It assigns the values 3, 4, and 5 to the $c variable.</source>
          <target state="translated">Assegna i valori 3, 4 e 5 per la variabile $c.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>To assign the values in the $c variable to three other variables, use the following format:</source>
          <target state="translated">Per assegnare i valori nella variabile $c con tre altre variabili, utilizzare il formato seguente:</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>$d, $e, $f = $c</source>
          <target state="translated">$d, $e, $f = $c</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>This command assigns the value 3 to the $d variable, the value 4 to the $e variable, and the value 5 to the $f variable.</source>
          <target state="translated">Questo comando Assegna il valore 3 alla variabile $d, il valore 4 alla variabile $e e il valore 5 nella variabile $f.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>You can also assign a single value to multiple variables by chaining the variables.</source>
          <target state="translated">È inoltre possibile assegnare un singolo valore per più variabili concatenando le variabili.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>For example, the following command assigns a value of "three" to all four variables:</source>
          <target state="translated">Ad esempio, il comando seguente assegna il valore "tre" per tutte le quattro variabili:</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>$a = $b = $c = $d = "three"</source>
          <target state="translated">$un = $b = $c = $d = "tre"</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>VARIABLE-RELATED CMDLETS</source>
          <target state="translated">CMDLET CORRELATI ALLA VARIABILE</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>In addition to using an assignment operation to set a variable value, you can also use the Set-Variable cmdlet.</source>
          <target state="translated">Oltre a utilizzare un'operazione di assegnazione per impostare un valore della variabile, è inoltre possibile utilizzare il cmdlet Set-Variable.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>For example, the following command uses Set-Variable to assign an array of 1, 2, 3 to the $a variable.</source>
          <target state="translated">Il comando seguente, ad esempio, utilizza Set-Variable per assegnare una matrice di 1, 2, 3 alla variabile $a.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Set-Variable -name a -value 1, 2, 3</source>
          <target state="translated">Set-Variable - name - un valore 1, 2, 3</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">VEDERE ANCHE</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>about_Arrays about_Hash_Tables about_Variables Clear-Variable Remove-Variable Set-Variable</source>
          <target state="translated">about_Arrays about_Hash_Tables about_Variables Clear-Variable Remove-Variable Set-Variable</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>