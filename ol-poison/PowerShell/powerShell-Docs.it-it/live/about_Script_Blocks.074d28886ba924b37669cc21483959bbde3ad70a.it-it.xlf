<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">953a1b3562456efa88df539ee19e7acd77d34e86</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\About\about_Script_Blocks.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab9b04b1ef96c54f917726b9e100b400f777bfd8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b21d52086f85e7a0477b91f4b110953beacc62e1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Script_Blocks</source>
          <target state="translated">about_Script_Blocks</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">cmdlet PowerShell</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Script Blocks</source>
          <target state="translated">Informazioni sui blocchi di Script</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Script_Blocks</source>
          <target state="translated">about_Script_Blocks</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>TOPIC</source>
          <target state="translated">ARGOMENTO</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>about_Script_Blocks</source>
          <target state="translated">about_Script_Blocks</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">DESCRIZIONE BREVE</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Defines what a script block is and explains how to use script blocks in the Windows PowerShell programming language.</source>
          <target state="translated">Definisce un blocco di script e spiega come utilizzare script in blocco di linguaggio di programmazione di Windows PowerShell.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">DESCRIZIONE LUNGA</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the Windows PowerShell programming language, a script block is a collection of statements or expressions that can be used as a single unit.</source>
          <target state="translated">Nel linguaggio di programmazione di Windows PowerShell, un blocco di script è una raccolta di istruzioni o espressioni che possono essere utilizzate come una singola unità.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A script block can accept arguments and return values.</source>
          <target state="translated">Un blocco di script può accettare argomenti e valori restituiti.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Syntactically, a script block is a statement list in braces, as shown in the following syntax:</source>
          <target state="translated">La sintassi di un blocco di script è un elenco di istruzioni tra parentesi graffe, come illustrato nella sintassi seguente:</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>{<ph id="ph1">&lt;statement list&gt;</ph>}</source>
          <target state="translated">{<ph id="ph1">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A script block returns the output of all the commands in the script block, either as a single object or as an array.</source>
          <target state="translated">Un blocco di script restituisce l'output di tutti i comandi nel blocco di script, come un singolo oggetto o come una matrice.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Like functions, a script block can include parameters.</source>
          <target state="translated">Analogamente alle funzioni, un blocco di script può includere parametri.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use the Param keyword to assign named parameters, as shown in the following syntax:</source>
          <target state="translated">Utilizzare la parola chiave Param per assegnare i parametri denominati, come illustrato nella sintassi seguente:</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>{ param ([type]$parameter1 [,[type]$parameter2]) <ph id="ph1">&lt;statement list&gt;</ph> }</source>
          <target state="translated">{param ([tipo] $parameter1 [, [tipo] $parametro2]) <ph id="ph1">&lt;statement list&gt;</ph> }</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In a script block, unlike a function, you cannot specify parameters outside the braces.</source>
          <target state="translated">In un blocco di script, a differenza di una funzione, è possibile specificare i parametri all'esterno delle parentesi.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Like functions, script blocks can include the DynamicParam, Begin, Process, and End keywords.</source>
          <target state="translated">Analogamente alle funzioni, i blocchi di script possono includere le parole chiave DynamicParam, Begin, Process ed End.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see about_Functions and about_Functions_Advanced.</source>
          <target state="translated">Per ulteriori informazioni, vedere about_Functions e about_Functions_Advanced.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Using Script Blocks</source>
          <target state="translated">Utilizzo di blocchi di Script</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A script block is an instance of a Microsoft .NET Framework type (System.Management.Automation.ScriptBlock).</source>
          <target state="translated">Un blocco di script è un'istanza di un tipo di Microsoft .NET Framework (System.Management.Automation.ScriptBlock).</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Commands can have script block parameter values.</source>
          <target state="translated">Comandi possono avere valori dei parametri di blocco di script.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, the Invoke-Command cmdlet has a ScriptBlock parameter that takes a script block value, as shown in this example:</source>
          <target state="translated">Ad esempio, il cmdlet Invoke-Command ha un parametro ScriptBlock che accetta un valore di blocco di script, come illustrato nel seguente esempio:</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -scriptblock  { get-process } Handles  NPM(K)    PM(K)     WS(K) VM(M)   CPU(s)     Id ProcessName</source>
          <target state="translated">C:\ps&gt; &gt; invoke-command - scriptblock {get-process} gestisce NPM(K) PM(K) WS(K) VM(M) CPU Id ProcessName</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>999      28    39100     45020   262    15.88   1844 communicator 721      28    32696     36536   222    20.84   4028 explorer</source>
          <target state="translated">999 28 39100 45020 262 15.88 1844 communicator 721 28 32696 36536 222 20.84 4028 explorer</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The script block that is used as a value can be more complicated, as shown in the following example:</source>
          <target state="translated">Il blocco di script che viene utilizzato come un valore può essere più complesso, come illustrato nell'esempio seguente:</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -scriptblock { param ($uu = "Parameter"); "$uu assigned."</source>
          <target state="translated">C:\ps&gt; &gt; invoke-command - scriptblock {param ($uu = "Parametro"); "$uu assegnati".</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>} Parameter assigned.</source>
          <target state="translated">} Parametro assegnato.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The script block in the preceding example uses the Param keyword to create a parameter that has a default value.</source>
          <target state="translated">Nell'esempio precedente il blocco di script utilizza la parola chiave Param per creare un parametro che ha un valore predefinito.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example uses the Args parameter of the Invoke-Command cmdlet to assign a different value to the parameter:</source>
          <target state="translated">Nell'esempio seguente usa il parametro Args del cmdlet Invoke-Command per assegnare un valore diverso per il parametro:</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -scriptblock {param ($uu = "Parameter"); "$uu assigned."}</source>
          <target state="translated">C:\ps&gt; &gt; invoke-command - scriptblock {param ($uu = "Parametro"); "$uu assegnato."}</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>-args "Other value" Other value assigned.</source>
          <target state="translated">-args "Altro valore" altro valore assegnato.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can assign a script block to a variable, as shown in the following example:</source>
          <target state="translated">È possibile assegnare un blocco di script a una variabile, come illustrato nell'esempio seguente:</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = {param ($uu = "Parameter"); "$uu assigned."}</source>
          <target state="translated">C:\ps&gt; &gt; $a = {param ($uu = "Parametro"); "$uu assegnato."}</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can use the variable with a cmdlet such as Invoke-Command, as shown in the following example:</source>
          <target state="translated">È possibile utilizzare la variabile con un cmdlet, ad esempio Invoke-Command, come illustrato nell'esempio seguente:</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -scriptblock $a -args "Other value" Other value assigned.</source>
          <target state="translated">C:\ps&gt; &gt; $ a invoke-command - scriptblock - args "Altro valore" altro valore assegnato.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can run a script block that is assigned to a variable by using the call operator (&amp;), as shown in the following example:</source>
          <target state="translated">È possibile eseguire un blocco di script che viene assegnato a una variabile utilizzando l'operatore di chiamata (&amp;), come illustrato nell'esempio seguente:</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; &amp;$a Parameter assigned.</source>
          <target state="translated">C:\ps&gt; &gt; &amp;$ assegnato un parametro.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can also provide a parameter to the script block, as shown in the following example:</source>
          <target state="translated">È anche possibile fornire un parametro al blocco di script, come illustrato nell'esempio seguente:</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; &amp;$a "Other value" Other value assigned.</source>
          <target state="translated">C:\ps&gt; &gt; &amp;$ "altri assegnato un valore" altro valore.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you want to assign the value that is created by a script block to a variable, use the call operator to run the script block directly, as shown in the following example:</source>
          <target state="translated">Se si desidera assegnare il valore creato da un blocco di script a una variabile, utilizzare l'operatore di chiamata per eseguire il blocco di script direttamente, come illustrato nell'esempio seguente:</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = &amp;{param ($uu = "Parameter"); "$uu assigned."}</source>
          <target state="translated">C:\ps&gt; &gt; $a = &amp; {param ($uu = "Parametro"); "$uu assegnato."}</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a Parameter assigned.</source>
          <target state="translated">C:\ps&gt; &gt; $ assegnato un parametro.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information about the call operator, see about_Operators.</source>
          <target state="translated">Per ulteriori informazioni sull'operatore di chiamata, vedere about_Operators.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">VEDERE ANCHE</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>about_Functions about_Functions_Advanced about_Operators</source>
          <target state="translated">about_Functions about_Functions_Advanced about_Operators</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>