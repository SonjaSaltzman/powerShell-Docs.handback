<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e747224a913bf28c66dc4903b7b25ea3b9d4a8c6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Utility\Import-Csv.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a16087a06259b6379e5faca3521100a11625abc4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">61a9c1a3601224d64a9993225a8548cad3c85b72</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell コマンドレット</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Import-Csv</source>
          <target state="translated">Import-Csv</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Import-Csv</source>
          <target state="translated">Import-Csv</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Creates table-like custom objects from the items in a CSV file.</source>
          <target state="translated">CSV ファイルの項目からテーブルに似たカスタム オブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">構文</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Delimiter (Default)</source>
          <target state="translated">区切り記号 (既定値)</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>UseCulture</source>
          <target state="translated">UseCulture</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> cmdlet creates table-like custom objects from the items in CSV files.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> コマンドレットは、CSV ファイル内の項目からテーブルに似たカスタム オブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Each column in the CSV file becomes a property of the custom object and  the items in rows become the property values.</source>
          <target state="translated">CSV ファイルの各列がカスタム オブジェクトのプロパティになり、行内の項目がプロパティ値になります。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> works on any CSV file, including files that are generated by the Export-Csv cmdlet.</source>
          <target state="translated"><bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> Export-csv コマンドレットによって生成されるファイルを含むすべての CSV ファイルで動作します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can use the parameters of the <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> cmdlet to specify the column header row and the item delimiter, or direct <bpt id="p2">**</bpt>Import-Csv<ept id="p2">**</ept> to use the list separator for the current culture as the item delimiter.</source>
          <target state="translated">パラメーターを使用する、 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> コマンドレットでは、列ヘッダー行と項目の区切り記号を指定するか、直接を <bpt id="p2">**</bpt>Import-csv<ept id="p2">**</ept> 項目の区切り記号として、現在のカルチャの区切り記号を使用します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can also use the ConvertTo-Csv and ConvertFrom-Csv cmdlets to convert objects to CSV strings (and back).</source>
          <target state="translated">オブジェクトを CSV 文字列に変換 (および、バックアップを作成する) に、Convertto-csv コマンドレットと Convertfrom-csv コマンドレットを使用することもことができます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These cmdlets are the same as the <bpt id="p1">**</bpt>Export-CSV<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Import-Csv<ept id="p2">**</ept> cmdlets, except that they do not deal with files.</source>
          <target state="translated">これらのコマンドレットと同じ、 <bpt id="p1">**</bpt>EXPORT-CSV<ept id="p1">**</ept> と <bpt id="p2">**</bpt>Import-csv<ept id="p2">**</ept> コマンドレットの場合、ファイルを処理しない点が異なります。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, if a header row entry in a CSV file contains an empty or null value, Windows PowerShell inserts a default header row name and displays a warning message.</source>
          <target state="translated">Windows PowerShell 3.0 以降では、CSV ファイルのヘッダー行エントリに空白の値または null 値が含まれる場合、既定のヘッダー行の名前が挿入され、警告メッセージが表示されます。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In previous versions of Windows PowerShell, if a header row entry in a CSV file contains an empty or null value, the <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> command fails.</source>
          <target state="translated">以前のバージョンの Windows PowerShell、CSV ファイルにヘッダー行エントリには、空または null 値が含まれている場合、 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> コマンドは失敗します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 1 --------------------------</source>
          <target state="translated">-------------------------- 例 1 --------------------------</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This example shows how to export and then import a CSV file of objects.</source>
          <target state="translated">この例は、オブジェクトの CSV ファイルをエクスポートした後でインポートする方法を示します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 2 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 2 --------------------------</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">*</bpt>Delimiter<ept id="p1">*</ept> parameter of the Import-Csv cmdlet.</source>
          <target state="translated">この例では、使用して、 <bpt id="p1">*</bpt>区切り記号<ept id="p1">*</ept> Import-csv コマンドレットのパラメーターです。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In this example, the processes are exported to a file that uses a colon (:) as a delimiter.</source>
          <target state="translated">この例では、プロセスは、区切り記号としてコロン (:) を使用してファイルにエクスポートされます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When importing, the Import-Csv file uses the <bpt id="p1">*</bpt>Delimiter<ept id="p1">*</ept> parameter to indicate the delimiter that is used in the file.</source>
          <target state="translated">Csv のインポート ファイルを使用して、インポートするときに、 <bpt id="p1">*</bpt>区切り記号<ept id="p1">*</ept> ファイルで使用する区切り文字を表すためのパラメーターです。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 3 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 3 --------------------------</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> parameter of the Import-Csv cmdlet.</source>
          <target state="translated">この例では、使用して、 <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> Import-csv コマンドレットのパラメーターです。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The first command imports the objects in the Processes.csv file into the $p variable.</source>
          <target state="translated">最初のコマンドでは、Processes.csv ファイル内のオブジェクトを $p 変数にインポートしています。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> parameter to direct Import-Csv to use the list separator defined for the current culture.</source>
          <target state="translated">使用して、 <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> パラメーターを現在のカルチャに対して定義されている区切り記号を使用するには、Import-csv に指示します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The second command displays the list separator for the current culture.</source>
          <target state="translated">2 番目のコマンドでは、現在のカルチャの区切り記号を表示しています。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It uses the Get-Culture cmdlet to get the current culture.</source>
          <target state="translated">Get-culture コマンドレットを使用して、現在のカルチャを取得します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It uses the dot (.) method to get the TextInfo property of the current culture and the ListSeparator property of the object in TextInfo.</source>
          <target state="translated">現在のカルチャの TextInfo プロパティと、TextInfo 内のオブジェクトの ListSeparator プロパティを取得するために、ドット (.) 表記が使用されています。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In this example, the command returns a comma.</source>
          <target state="translated">この例では、コンマが返されています。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 4 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 4 --------------------------</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This example shows how to use the Header parameter of Import-Csv to change the names of properties in the resulting imported object.</source>
          <target state="translated">この例は、Import-Csv の Header パラメーターを使用して、結果のインポートされたオブジェクトのプロパティの名前を変更する方法を示しています。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 5 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 5 --------------------------</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This example shows how to create a custom object in Windows PowerShell by using a CSV file.</source>
          <target state="translated">この例では、CSV ファイルを使用して Windows PowerShell でカスタム オブジェクトを作成する方法を示します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 6 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 6 --------------------------</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This example shows how the <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> cmdlet in Windows PowerShell 3.0 responds when the header row in a CSV file includes a null or empty value.</source>
          <target state="translated">この例では、どのように <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> CSV ファイルにヘッダー行に null または空の値が含まれている場合の Windows PowerShell 3.0 でのコマンドレットの応答します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> substitutes a default name for the header row.</source>
          <target state="translated"><bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> ヘッダー行の既定の名前に置換します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The default name becomes the name of the property of the object that <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> returns.</source>
          <target state="translated">既定の名前、オブジェクトのプロパティの名前になりますが <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> を返します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">パラメータ</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>-Delimiter</source>
          <target state="translated">区切り記号</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Specifies the delimiter that separates the property values in the CSV file.</source>
          <target state="translated">CSV ファイル内のプロパティ値を区切る区切り記号を指定します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The default is a comma (,).</source>
          <target state="translated">既定値はコンマ (,) です。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Enter a character, such as a colon (:).</source>
          <target state="translated">コロン (:) などの文字を入力します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To specify a semicolon (;), enclose it in quotation marks.</source>
          <target state="translated">セミコロン (;) を指定するには、引用符で囲みます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you specify a character other than the actual string delimiter in the file, Import-Csv cannot create objects from the CSV strings.</source>
          <target state="translated">ファイルで使用されている実際の文字列区切り記号以外の文字を指定した場合は、CSV 文字列からオブジェクトを作成できません。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Instead, it returns the strings.</source>
          <target state="translated">代わりに、その文字列が返されます。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>-Encoding</source>
          <target state="translated">エンコード</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Specifies the type of character encoding that was used in the CSV file.</source>
          <target state="translated">CSV ファイルで使用されていた文字エンコードの種類を指定します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Valid values are Unicode, UTF7, UTF8, ASCII, UTF32, BigEndianUnicode, Default, and OEM.</source>
          <target state="translated">有効な値は、Unicode、UTF7、UTF8、ASCII、UTF32、BigEndianUnicode、Default、OEM です。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The default is ASCII.</source>
          <target state="translated">既定値は ASCII です。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">このパラメーターは、Windows PowerShell 3.0 で導入されました。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>-Header</source>
          <target state="translated">ヘッダー</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Specifies an alternate column header row for the imported file.</source>
          <target state="translated">インポートされたファイルの代替列ヘッダー行を指定します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The column header determines the names of the properties of the object that Import-Csv creates.</source>
          <target state="translated">Import-Csv によって作成されるオブジェクトのプロパティの名前は、列ヘッダーによって決定されます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Enter a comma-separated list of the column headers.</source>
          <target state="translated">列ヘッダーのコンマ区切りリストを入力します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Enclose each item in quotation marks (single or double).</source>
          <target state="translated">各項目を (一重または二重の) 引用符で囲みます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Do not enclose the header string in quotation marks.</source>
          <target state="translated">ヘッダー文字列は引用符で囲まないでください。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If you enter fewer column headers than there are columns, the remaining columns will have no header.</source>
          <target state="translated">入力した列ヘッダーの数が列の数より少ない場合、残りの列にはヘッダーが設定されません。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If you enter more headers than there are columns, the extra headers are ignored.</source>
          <target state="translated">入力したヘッダーの数が列の数より多い場合、余分なヘッダーは無視されます。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>When using the <bpt id="p1">*</bpt>Header<ept id="p1">*</ept> parameter, delete the original header row from the CSV file.</source>
          <target state="translated">使用する場合、 <bpt id="p1">*</bpt>ヘッダー<ept id="p1">*</ept> パラメーター、CSV ファイルから元のヘッダー行を削除します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Otherwise, Import-Csv creates an extra object from the items in the header row.</source>
          <target state="translated">この操作を行わないと、ヘッダー行内の項目から余分なオブジェクトが作成されます。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>-Path</source>
          <target state="translated">-Path</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Specifies the path to the CSV file to import.</source>
          <target state="translated">インポートする CSV ファイルのパスを指定します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can also pipe a path to Import-Csv.</source>
          <target state="translated">パイプを使用してパスを Import-Csv に渡すこともできます。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>-UseCulture</source>
          <target state="translated">-UseCulture</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Use the list separator for the current culture as the item delimiter.</source>
          <target state="translated">項目の区切り記号として、現在のカルチャの区切り記号を使用します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The default is a comma (,).</source>
          <target state="translated">既定値はコンマ (,) です。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>To find the list separator for a culture, use the following command: (Get-Culture).TextInfo.ListSeparator.</source>
          <target state="translated">カルチャの区切り記号を検索するには、次のコマンドを使用します。 (Get-culture)。TextInfo.ListSeparator します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If you specify a character other than the delimiter used in the CSV strings, ConvertFrom-CSV cannot create objects from the CSV strings.</source>
          <target state="translated">CSV 文字列で使用されている区切り記号以外の文字を指定した場合は、CSV 文字列からオブジェクトを作成できません。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Instead, it returns the strings.</source>
          <target state="translated">代わりに、その文字列が返されます。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>-LiteralPath</source>
          <target state="translated">– LiteralPath</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Specifies the path to the CSV file to import.</source>
          <target state="translated">インポートする CSV ファイルのパスを指定します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Unlike <bpt id="p1">**</bpt>Path<ept id="p1">**</ept>, the value of the <bpt id="p2">**</bpt>LiteralPath<ept id="p2">**</ept> parameter is used exactly as it is typed.</source>
          <target state="translated">異なり <bpt id="p1">**</bpt>パス<ept id="p1">**</ept>, の値、 <bpt id="p2">**</bpt>LiteralPath<ept id="p2">**</ept> は入力したとおりにパラメーターを使用します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>No characters are interpreted as wildcards.</source>
          <target state="translated">ワイルドカードとして解釈される文字はありません。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If the path includes escape characters, enclose it in single quotation marks.</source>
          <target state="translated">パスにエスケープ文字が含まれている場合は、単一引用符で囲みます。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</source>
          <target state="translated">単一引用符で囲んだ文字はエスケープ シーケンスとして解釈されません。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">このコマンドレットは、共通のパラメーターをサポートしています:-デバッグ、-erroraction、-errorvariable、- InformationAction-InformationVariable、- OutVariable、-OutBuffer、- PipelineVariable、- Verbose、および - WarningVariable です。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">詳細については、about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216) を参照してください。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">入力</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>System.String</source>
          <target state="translated">System.String</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can pipe a string that contains a path to Import-Csv.</source>
          <target state="translated">パイプを使用してパスを含む文字列を Import-Csv に渡すことができます。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">出力</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Object.</source>
          <target state="translated">オブジェクト。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Import-Csv returns the objects described by the content in the CSV file.</source>
          <target state="translated">Import-Csv は、CSV ファイルの内容によって記述されたオブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">ノート</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Because the imported objects are CSV versions of the object type, they are not recognized and formatted by the Windows PowerShell type formatting entries that format the non-CSV versions of the object type.</source>
          <target state="translated">インポートされるオブジェクトはオブジェクト型の CSV バージョンであるため、オブジェクト型の非 CSV バージョンを書式設定する Windows PowerShell の型書式設定エントリによって認識および書式設定されません。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The result of an Import-Csv command is a collection of strings that form a table-like custom object.</source>
          <target state="translated">Import-Csv コマンドの結果は、テーブルに似たカスタム オブジェクトを形成する文字列のコレクションです。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Each row is a separate string, so you can use the Count property of the object to count the table rows.</source>
          <target state="translated">それぞれの行は別個の文字列のため、オブジェクトの Count プロパティを使用してテーブルの行数を数えることができます。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The columns are the properties of the object and items in the rows are the property values.</source>
          <target state="translated">列はオブジェクトのプロパティであり、行内の項目はプロパティの値です。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The column header row determines the number of columns and the column names.</source>
          <target state="translated">列ヘッダー行により、列の数と列名が決定されます。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The column names are also the names of the properties of the objects.</source>
          <target state="translated">列名は、オブジェクトのプロパティの名前でもあります。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The first row is interpreted to be the column headers, unless you use the Header parameter to specify column headers.</source>
          <target state="translated">Header パラメーターを使用して列ヘッダーを指定している場合を除き、1 行目は列ヘッダーとして解釈されます。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If any row has more values than the header row, the additional values are ignored.</source>
          <target state="translated">いずれかの行にヘッダー行よりも多くの値が含まれる場合、追加の値は無視されます。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If the column header row is missing a value or contains a null or empty value, <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> uses "H" followed by a number for the missing column header and property name.</source>
          <target state="translated">列ヘッダー行が値がないか、null または空の値が含まれる場合 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> "H"の後に不足している列のヘッダーとプロパティ名に番号を使用します。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>In the CSV file, each object is represented by a comma-separated list of the property values of the object.</source>
          <target state="translated">CSV ファイルでは、各オブジェクトは、オブジェクトのプロパティ値のコンマ区切りリストで表されます。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The property values are converted to strings (by using the ToString() method of the object), so they are generally represented by the name of the property value.</source>
          <target state="translated">プロパティ値はオブジェクトの ToString() メソッドを使用して文字列に変換するため、通常、これらはプロパティ値の名前で表されます。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Export-CSV does not export the methods of the object.</source>
          <target state="translated">Export-CSV では、オブジェクトのメソッドはエクスポートされません。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">関連リンク</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>ConvertFrom-Csv</source>
          <target state="translated">ConvertFrom-Csv</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>ConvertTo-Csv</source>
          <target state="translated">ConvertTo-Csv</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Export-Csv</source>
          <target state="translated">Export-Csv</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>