<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3dcdd0358714b2fdd0fb1501397e34c15ea12e48</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Utility\ConvertFrom-StringData.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">098b94c03018e0d4aad6a3fa4be256b3f3655d19</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f8304cfb5a18936f4ce8efa6c38ba30d169c47e3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ConvertFrom-StringData</source>
          <target state="translated">ConvertFrom-StringData</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ConvertFrom-StringData</source>
          <target state="translated">ConvertFrom-StringData</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">简述</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Converts a string containing one or more key and value pairs to a hash table.</source>
          <target state="translated">将包含一个或多个键-值对的字符串转换为哈希表。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">语法</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ConvertFrom-StringData<ept id="p1">**</ept> cmdlet converts a string that contains one or more key and value pairs into a hash table.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Convertfrom-stringdata<ept id="p1">**</ept> cmdlet 将转换为哈希表包含一个或多个键 / 值对的字符串。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Because each key/value pair must be on a separate line, here-strings are often used as the input format.</source>
          <target state="translated">由于每个键-值对必须位于一个单独的行上，所以经常使用 here-string 作为输入格式。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ConvertFrom-StringData<ept id="p1">**</ept> cmdlet is considered to be a safe cmdlet that can be used in the DATA section of a script or function.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Convertfrom-stringdata<ept id="p1">**</ept> cmdlet 被认为是可以在脚本或函数的 DATA 节中使用的安全 cmdlet。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When used in a DATA section, the contents of the string must conform to the rules for a DATA section.</source>
          <target state="translated">在 DATA 节中使用时，字符串的内容必须遵循 DATA 节的规则。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see about_Data_Sections.</source>
          <target state="translated">有关详细信息，请参阅 about_Data_Sections。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ConvertFrom-StringData<ept id="p1">**</ept> supports escape character sequences that are allowed by conventional machine translation tools.</source>
          <target state="translated"><bpt id="p1">**</bpt>ConvertFrom StringData<ept id="p1">**</ept> 支持对转义字符的传统机器翻译工具允许的字符序列。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>That is, the cmdlet can interpret backslashes (<ph id="ph1">\\</ph>) as escape characters in the string data by using the Regex.Unescape Methodhttp://msdn.microsoft.com/library/vstudio/system.text.regularexpressions.regex.unescape(v=vs.100).aspx, instead of the Windows PowerShell backtick character (<ph id="ph2">\`</ph>) that would normally signal the end of a line in a script.</source>
          <target state="translated">也就是说，该 cmdlet 可以将反斜杠 (<ph id="ph1">\\</ph>) 为使用正常情况下将一个脚本中某一行的结尾发出信号 Regex.Unescape Methodhttp://msdn.microsoft.com/library/vstudio/system.text.regularexpressions.regex.unescape(v=vs.100).aspx, instead of the Windows PowerShell backtick character (<ph id="ph2">\`</ph>) 转义字符的字符串数据。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Inside the here-string, the backtick character does not work.</source>
          <target state="translated">在 here-string 中，反撇号字符无效。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can also preserve a literal backslash in your results by escaping it with a preceding backslash, like this: <ph id="ph1">\\\\</ph>.</source>
          <target state="translated">您还可以保留文本反斜杠在您的结果进行转义以反斜杠，如下︰ <ph id="ph1">\\\\</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Unescaped backslash characters, such as those that are commonly used in file paths, can render as illegal escape sequences in your results.</source>
          <target state="translated">未转义的反斜杠字符（例如那些通常用在文件路径中的反斜杠字符）可以在结果中呈现为非法的转义序列。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">示例</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example 1: Convert a single-quoted here-string to a hash table</source>
          <target state="translated">示例 1︰ 将一个单引号 here-string 转换为哈希表</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These commands convert a single-quoted here-string of user messages into a hash table.</source>
          <target state="translated">这些命令将用户消息中带单引号的 here-string 转换为一个哈希表。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In a single-quoted string, values are not substituted for variables and expressions are not evaluated.</source>
          <target state="translated">在带单引号的字符串中，不能使用变量和无法计算的表达式来代替其值。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The first command creates a here-string and saves it in the $Here variable.</source>
          <target state="translated">第一个命令创建一个 here-string，并将其保存在 $Here 变量。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The second command uses the <bpt id="p1">**</bpt>ConvertFrom-StringData<ept id="p1">**</ept> cmdlet to convert the here-string in the $Here variable to a hash table.</source>
          <target state="translated">第二个命令使用 <bpt id="p1">**</bpt>Convertfrom-stringdata<ept id="p1">**</ept> cmdlet 将 here-string 的形式在 $Here 变量转换为哈希表。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Example 2: Convert a double-quoted here-string to a hash table</source>
          <target state="translated">示例 2︰ 将双引号中的 here-string 转换为哈希表</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These commands demonstrate that <bpt id="p1">**</bpt>ConvertFrom-StringData<ept id="p1">**</ept> actually converts a here-string to a hash table.</source>
          <target state="translated">这些命令演示 <bpt id="p1">**</bpt>Convertfrom-stringdata<ept id="p1">**</ept> 实际上将 here-string 转换为哈希表。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The first command creates a double-quoted here-string that includes one key/value pair and saves it in the $P variable.</source>
          <target state="translated">第一个命令创建一个带双引号此处字符串，它包含一个键/值对，并将其保存在 $P 变量。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The second command uses a pipeline operator (|) to send the $P variable to the Get-Member cmdlet.</source>
          <target state="translated">第二个命令使用管道运算符 (|) 将 $P 变量发送到 Get-member cmdlet。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The result shows that $P is a string (System.String).</source>
          <target state="translated">结果表明 $P 是字符串 (System.String)。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The third command uses the <bpt id="p1">**</bpt>ConvertFrom-StringData<ept id="p1">**</ept> cmdlet to convert the here-string in $P to a hash table.</source>
          <target state="translated">第三个命令使用 <bpt id="p1">**</bpt>Convertfrom-stringdata<ept id="p1">**</ept> cmdlet 将 $P 中的此处字符串转换为哈希表。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The command stores the result in the $Hash variable.</source>
          <target state="translated">该命令将结果存储在 $Hash 变量。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The final command uses a pipeline operator (|) to send the $Hash variable to the <bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">最后一个命令使用管道运算符 (|) 将发送 $Hash 变量到 <bpt id="p1">**</bpt>Get-member<ept id="p1">**</ept> cmdlet。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The result shows that the content of the $Hash variable is a hash table (System.Collections.Hashtable).</source>
          <target state="translated">结果表明 $Hash 变量的内容是哈希表 (System.Collections.Hashtable)。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Example 3: Convert a here-string to a hash table</source>
          <target state="translated">示例 3︰ 将 here-string 转换为哈希表</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This command converts a single-quoted here-string that contains multiple key/value pairs into a hash table.</source>
          <target state="translated">此命令将包含多个键-值对的带单引号的 here-string 转换为一个哈希表。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In this command, the value of the <bpt id="p1">*</bpt>StringData<ept id="p1">*</ept> parameter is a here-string, instead of a variable that contains a here-string.</source>
          <target state="translated">此命令中的值 <bpt id="p1">*</bpt>StringData<ept id="p1">*</ept> 参数是一个 here-string，而不是包含 here-string 的变量。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Either format is valid.</source>
          <target state="translated">两种格式都有效。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The here-string includes a comment about one of the strings.</source>
          <target state="translated">here-string 包括有关某字符串的注释。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Comments are valid in strings, provided that the comment is on a different line than a key/value pair.</source>
          <target state="translated">假如注释与键-值对不在同一行上，则注释在字符串中是有效的。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Example 4: Convert a string to a hash table</source>
          <target state="translated">示例 4︰ 将字符串转换为哈希表</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This example converts a regular double-quoted string (not a here-string) into a hash table and saves it in the $A variable.</source>
          <target state="translated">此示例将正则双引号中的字符串 (不 here-string) 转换为哈希表，并将其保存在 $A 变量中。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To satisfy the condition that each key/value pair must be on a separate line, it uses the Windows PowerShell newline character (<ph id="ph1">\`</ph>n) to separate the pairs.</source>
          <target state="translated">若要满足的条件的每个键/值对都必须出现在单独一行上，它使用 Windows PowerShell 换行符 (<ph id="ph1">\`</ph>n) 来分隔这些对。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The result is a hash table of the input.</source>
          <target state="translated">结果为一个由输入内容组成的哈希表。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The remaining commands display the output.</source>
          <target state="translated">其余命令显示输出内容。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Example 5: Use ConvertFrom-StringData in the DATA section of a script</source>
          <target state="translated">示例 5︰ 使用的 Convertfrom-stringdata 中的脚本的数据部分</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This example shows a <bpt id="p1">**</bpt>ConvertFrom-StringData<ept id="p1">**</ept> command used in the DATA section of a script.</source>
          <target state="translated">此示例演示 <bpt id="p1">**</bpt>Convertfrom-stringdata<ept id="p1">**</ept> 脚本的 DATA 节中使用的命令。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The statements below the DATA section display the text to the user.</source>
          <target state="translated">DATA 节下面的语句向用户显示该文本。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Because the text includes variable names, it must be enclosed in a single-quoted string so that the variables are interpreted literally and not expanded.</source>
          <target state="translated">由于文本包括变量名称，所以必须用单引号将它括起来，以便按照字义解释变量，而不是展开它。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Variables are not permitted in the DATA section.</source>
          <target state="translated">在 DATA 节中允许使用变量。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Example 6: Use the pipeline operator to pass a string</source>
          <target state="translated">示例 6︰ 使用管道运算符将字符串传递</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This example shows that you can use a pipeline operator (|) to send a string to <bpt id="p1">**</bpt>ConvertFrom-StringData<ept id="p1">**</ept>.</source>
          <target state="translated">此示例演示您可以使用管道运算符 (|) 将字符串发送到 <bpt id="p1">**</bpt>Convertfrom-stringdata<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The first command saves a here-string in the $Here variable.</source>
          <target state="translated">第一个命令将 here-string 保存在 $Here 变量。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The second command uses a pipeline operator (|) to send the $Here variable to <bpt id="p1">**</bpt>ConvertFrom-StringData<ept id="p1">**</ept>.</source>
          <target state="translated">第二个命令使用管道运算符 (|) 将 $Here 变量发送到 <bpt id="p1">**</bpt>Convertfrom-stringdata<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The command saves the result in the $Hash variable.</source>
          <target state="translated">该命令将结果保存在 $Hash 变量。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The final command displays the contents of the $Hash variable.</source>
          <target state="translated">最后一个命令显示 $Hash 变量的内容。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Example 7: Use escape characters to add new lines and return characters</source>
          <target state="translated">示例 7︰ 使用转义符，以添加新行，并返回字符</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This example shows the use of escape characters to create new lines and return characters in <bpt id="p1">**</bpt>ConvertFrom-StringData<ept id="p1">**</ept>.</source>
          <target state="translated">此示例演示如何使用用于创建新行并返回中的字符的转义字符 <bpt id="p1">**</bpt>Convertfrom-stringdata<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In this example, the escape sequence <bpt id="p1">**</bpt>\n<ept id="p1">**</ept> is used to create new lines within a block of text (the value, in the resulting hash table) that is associated with a name or item (the name, in the resulting hash table).</source>
          <target state="translated">在此示例中，转义序列 <bpt id="p1">**</bpt>\n<ept id="p1">**</ept> 用于一块与名称或项 （生成的哈希表中，名称） 相关联的文本 （值，在生成的哈希表） 中创建新行。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Example 8: Use backslash escape character to correctly render a file path</source>
          <target state="translated">示例 8︰ 使用反斜杠转义字符正确呈现的文件路径</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This example shows how to use of the backslash escape character in the string data to allow a file path to render correctly in the resulting <bpt id="p1">**</bpt>ConvertFrom-StringData<ept id="p1">**</ept> hash table.</source>
          <target state="translated">此示例演示如何使用反斜杠转义字符在字符串数据，以便正确呈现在生成的文件路径 <bpt id="p1">**</bpt>Convertfrom-stringdata<ept id="p1">**</ept> 哈希表。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The double backslash ensures that the literal backslash characters render correctly in the hash table output.</source>
          <target state="translated">双反斜杠可确保文本反斜杠字符正确呈现在哈希表输出中。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">参数</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>-StringData</source>
          <target state="translated">StringData</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Specifies the string to be converted.</source>
          <target state="translated">指定要转换的字符串。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You can use this parameter or pipe a string to <bpt id="p1">**</bpt>ConvertFrom-StringData<ept id="p1">**</ept>.</source>
          <target state="translated">可以使用此参数，也可以通过管道传递一个指向字符串 <bpt id="p1">**</bpt>Convertfrom-stringdata<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The parameter name is optional.</source>
          <target state="translated">参数名为可选项。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The value of this parameter must be a string that is enclosed in single quotation marks, a string that is enclosed in double quotation marks, or a here-string that contains one or more key/value pairs.</source>
          <target state="translated">此参数的值必须用单引号括起来的字符串、 括在双引号引起来，一个字符串或 here-string 包含一个或多个键/值对。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Each key/value pair must be on a separate line, or each pair must be separated by newline characters (<ph id="ph1">\`</ph>n).</source>
          <target state="translated">每个键/值对必须是单独的行，或者必须由换行符分隔每一对 (<ph id="ph1">\`</ph>n)。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You can include comments in the string, but the comments cannot be on the same line as a key/value pair.</source>
          <target state="translated">字符串中可包括注释，但是注释不能以键-值对的形式位于同一行上。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The comments are not included in the hash table.</source>
          <target state="translated">哈希表中不包括注释。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A here-string is a string consisting of one or more lines within which quotation marks are interpreted literally.</source>
          <target state="translated">here-string 是由一行或多行组成的字符串，在其中，按照字义解释引号。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For more information, see about_Quoting_Rules.</source>
          <target state="translated">有关详细信息，请参阅 about_Quoting_Rules。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">此 cmdlet 支持以下常见参数:-调试-ErrorAction、-ErrorVariable、-InformationAction、-InformationVariable、-OutVariable、-OutBuffer、-PipelineVariable、-Verbose、-WarningAction 和-WarningVariable。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">有关详细信息，请参阅 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">输入</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>System.String</source>
          <target state="translated">System.String</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can pipe a string containing a key/value pair to <bpt id="p1">**</bpt>ConvertFrom-StringData<ept id="p1">**</ept>.</source>
          <target state="translated">您可以通过管道传递一个包含键/值对来字符串 <bpt id="p1">**</bpt>Convertfrom-stringdata<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">输出</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>System.Collections.Hashtable</source>
          <target state="translated">System.Collections.Hashtable</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This cmdlet returns a hash table that it creates from the key/value pairs.</source>
          <target state="translated">此 cmdlet 将返回它创建从键/值对的哈希表。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A here-string is a string consisting of one or more lines within which quotation marks are interpreted literally.</source>
          <target state="translated">here-string 是由一行或多行组成的字符串，在其中，按照字义解释引号。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This cmdlet can be useful in scripts that display user messages in multiple spoken languages.</source>
          <target state="translated">此 cmdlet 可以以多种口语显示用户消息的脚本中很有用。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can use the dictionary-style hash tables to isolate text strings from code, such as in resource files, and to format the text strings for use in translation tools.</source>
          <target state="translated">可使用字典风格的哈希表来从代码中隔离文本字符串（如在资源文件中），并为文本字符串设置格式以便在转换工具中使用。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">相关的链接</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>about_Data_Sections</source>
          <target state="translated">about_Data_Sections</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>about_Quoting_Rules</source>
          <target state="translated">about_Quoting_Rules</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>about_Script_Internationalization</source>
          <target state="translated">about_Script_Internationalization</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>