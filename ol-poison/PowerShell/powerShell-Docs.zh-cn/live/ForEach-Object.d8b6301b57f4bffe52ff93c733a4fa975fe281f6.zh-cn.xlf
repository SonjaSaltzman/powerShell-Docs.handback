<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dac5b4f8c6a2b76686abf540c95c5b0ed8655f92</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\ForEach-Object.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e25c5fe0d6d7cf344e33a623fe23b8167703d8a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b9a1c6a7bbc98b6b2292765ead534353a51657c4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ForEach-Object</source>
          <target state="translated">ForEach-Object</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ForEach-Object</source>
          <target state="translated">ForEach-Object</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">简述</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Performs an operation against each item in a collection of input objects.</source>
          <target state="translated">针对输入对象集合中的每个项执行操作。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">语法</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>ScriptBlockSet (Default)</source>
          <target state="translated">ScriptBlockSet （默认值）</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>PropertyAndMethodSet</source>
          <target state="translated">PropertyAndMethodSet</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ForEach-Object<ept id="p1">**</ept> cmdlet performs an operation on each item in a collection of input objects.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Foreach-object<ept id="p1">**</ept> cmdlet 执行输入对象的集合中每一项操作。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The input objects can be piped to the cmdlet or specified by using the InputObject parameter.</source>
          <target state="translated">可通过管道将输入对象传递给 cmdlet，或使用 InputObject 参数指定输入对象。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, there are two different ways to construct a  <bpt id="p1">**</bpt>ForEach-Object<ept id="p1">**</ept> command.</source>
          <target state="translated">从 Windows PowerShell 3.0 开始，有两种不同的方法来构造  <bpt id="p1">**</bpt>Foreach-object<ept id="p1">**</ept> 命令。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Script block<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>脚本块<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can use a script block to specify the operation.</source>
          <target state="translated">你可以使用某个脚本块来指定操作。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Within the script block, use the $_ variable to represent the current object.</source>
          <target state="translated">在脚本块中，使用 $_ 变量来表示当前对象。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The script block is the value of the <bpt id="p1">**</bpt>Process<ept id="p1">**</ept> parameter.</source>
          <target state="translated">该脚本块的价值是 <bpt id="p1">**</bpt>过程<ept id="p1">**</ept> 参数。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The script block can contain any Windows PowerShell script.</source>
          <target state="translated">脚本块可以包含任何 Windows PowerShell 脚本。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, the following command gets the value of the <bpt id="p1">**</bpt>ProcessName<ept id="p1">**</ept> property of each process on the computer.</source>
          <target state="translated">例如，以下命令将获取的值 <bpt id="p1">**</bpt>ProcessName<ept id="p1">**</ept> 每个进程在计算机上的属性。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Operation statement<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>操作语句<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can also write a operation statement, which is much more like natural language.</source>
          <target state="translated">你还可以编写操作语句，它更像自然语言。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can use the operation statement to specify a property value or call a method.</source>
          <target state="translated">你可以使用该操作语句来指定属性值或调用方法。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Operation statements were introduced in Windows PowerShell 3.0.</source>
          <target state="translated">Windows PowerShell 3.0 中引入了操作语句。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, the following command also gets the value of the <bpt id="p1">**</bpt>ProcessName<ept id="p1">**</ept> property of each process on the computer.</source>
          <target state="translated">例如，以下命令还将获取的值 <bpt id="p1">**</bpt>ProcessName<ept id="p1">**</ept> 每个进程在计算机上的属性。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When using the script block format, in addition to using the script block that describes the operations that are performed on each input object, you can provide two additional script blocks.</source>
          <target state="translated">在使用脚本块格式时，除了使用描述了针对每个输入对象所执行的操作的脚本块外，你还可以提供其他两个脚本块。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The Begin script block, which is the value of the <bpt id="p1">**</bpt>Begin<ept id="p1">**</ept> parameter, runs before the first input object is processed.</source>
          <target state="translated">Begin 脚本块中，它是值 <bpt id="p1">**</bpt>开始<ept id="p1">**</ept> 参数，在处理第一个输入的对象之前运行。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The End script block, which is the value of the <bpt id="p1">**</bpt>End<ept id="p1">**</ept> parameter, runs after the last input object is processed.</source>
          <target state="translated">End 脚本块，它是值 <bpt id="p1">**</bpt>结束<ept id="p1">**</ept> 参数，运行在处理最后一个输入的对象之后。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">示例</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 1 --------------------------</source>
          <target state="translated">-------------------------- 示例 1 --------------------------</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This command takes an array of three integers and divides each one of them by 1024.</source>
          <target state="translated">此命令接受一个包含三个整数的数组，然后将其中每个整数除以 1024。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 2 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 2 --------------------------</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This command gets the files and directories in the Windows PowerShell installation directory ($pshome) and passes them to the ForEach-Object cmdlet.</source>
          <target state="translated">此命令获取 Windows PowerShell 安装目录 ($pshome) 中的文件和目录，并将其传递给 ForEach-Object cmdlet。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If the object is not a directory (the value of the PSISContainer property is false), the script block gets the name of the file, divides the value of its Length property by 1024, and adds a space ("") to separate it from the next entry.</source>
          <target state="translated">如果对象不是目录（PSISContainer 属性的值为 false），则脚本块将获取该文件名、将其 Length 属性的值除以 1024，并添加一个空格 ("") 以将其与下一个条目隔开。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 3 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 3 --------------------------</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This command gets the 1000 most recent events from the System event log and stores them in the $Events variable.</source>
          <target state="translated">此命令从系统事件日志中获取 1000 个最新事件，并将这些事件存储在 $Events 变量中。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It then pipes the events to the <bpt id="p1">**</bpt>ForEach-Object<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">它然后通过管道传递给事件 <bpt id="p1">**</bpt>Foreach-object<ept id="p1">**</ept> cmdlet。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Begin<ept id="p1">**</ept> parameter displays the current date and time.</source>
          <target state="translated"> <bpt id="p1">**</bpt>开始<ept id="p1">**</ept> 参数将显示当前日期和时间。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Next, the <bpt id="p1">**</bpt>Process<ept id="p1">**</ept> parameter uses the <bpt id="p2">**</bpt>Out-File<ept id="p2">**</ept> cmdlet to create a text file named events.txt and stores the message property of each of the events in that file.</source>
          <target state="translated">下一步， <bpt id="p1">**</bpt>进程<ept id="p1">**</ept> 参数使用 <bpt id="p2">**</bpt>Out-file<ept id="p2">**</ept> cmdlet 来创建一个文本文件名为 events.txt，并将每个事件的消息属性存储在该文件中。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Last, the <bpt id="p1">**</bpt>End<ept id="p1">**</ept> parameter is used to display the date and time after all of the processing has completed.</source>
          <target state="translated">最后一个 <bpt id="p1">**</bpt>结束<ept id="p1">**</ept> 参数用于显示日期和时间别忘了处理的已完成。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 4 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 4 --------------------------</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This command changes the value of the <bpt id="p1">**</bpt>RemotePath<ept id="p1">**</ept> registry entry in all of the subkeys under the HKCU:\Network key to uppercase text.</source>
          <target state="translated">此命令的值更改 <bpt id="p1">**</bpt>RemotePath<ept id="p1">**</ept> 所有 hkcu: \network 项为大写文本下的子项中的注册表项。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can use this format to change the form or content of a registry entry value.</source>
          <target state="translated">可以使用此格式更改注册表条目值的形式或内容。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Each subkey in the <bpt id="p1">**</bpt>Network<ept id="p1">**</ept> key represents a mapped network drive that will reconnect at logon.</source>
          <target state="translated">中的每个子 <bpt id="p1">**</bpt>网络<ept id="p1">**</ept> 键表示登录时将重新连接的映射的网络驱动器。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>RemotePath<ept id="p1">**</ept> entry contains the UNC path of the connected drive.</source>
          <target state="translated"> <bpt id="p1">**</bpt>RemotePath<ept id="p1">**</ept> 条目包含连接的驱动器的 UNC 路径。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, if you map the E: drive to <ph id="ph1">\\\\</ph>Server\Share, there will be an E subkey of HKCU:\Network and the value of the <bpt id="p1">**</bpt>RemotePath<ept id="p1">**</ept> registry entry in the E subkey will be <ph id="ph2">\\\\</ph>Server\Share.</source>
          <target state="translated">例如，如果您映射到 e︰ 驱动器 <ph id="ph1">\\\\</ph>服务器 \ 共享，将有 hkcu: \network 的一个 E 子项和值的 <bpt id="p1">**</bpt>RemotePath<ept id="p1">**</ept> E 子项中的注册表项将 <ph id="ph2">\\\\</ph>服务器 \ 共享。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The command uses the Get-ItemProperty cmdlet to get all of the subkeys of the <bpt id="p1">**</bpt>Network<ept id="p1">**</ept> key and the Set-ItemProperty cmdlet to change the value of the <bpt id="p2">**</bpt>RemotePath<ept id="p2">**</ept> registry entry in each key.</source>
          <target state="translated">该命令使用 Get-itemproperty cmdlet 来获取所有的子项 <bpt id="p1">**</bpt>网络<ept id="p1">**</ept> 键和 Set-itemproperty cmdlet 更改的值 <bpt id="p2">**</bpt>RemotePath<ept id="p2">**</ept> 每个键中的注册表项。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Set-ItemProperty<ept id="p1">**</ept> command, the path is the value of the <bpt id="p2">**</bpt>PSPath<ept id="p2">**</ept> property of the registry key.</source>
          <target state="translated">在 <bpt id="p1">**</bpt>Set-itemproperty<ept id="p1">**</ept> 命令时，该路径的价值是 <bpt id="p2">**</bpt>PSPath<ept id="p2">**</ept> 注册表项的属性。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>(This is a property of the Microsoft .NET Framework object that represents the registry key; it is not a registry entry.) The command uses the ToUpper() method of the RemotePath value, which is a string (REG_SZ).</source>
          <target state="translated">（这是表示该注册表项的 Microsoft .NET Framework 对象的一个属性，而不是一个注册表条目）。该命令使用 RemotePath 值的 ToUpper() 方法，该值是一个字符串 (REG_SZ)。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Because <bpt id="p1">**</bpt>Set-ItemProperty<ept id="p1">**</ept> is changing the property of each key, the <bpt id="p2">**</bpt>ForEach-Object<ept id="p2">**</ept> cmdlet is required to access the property.</source>
          <target state="translated">因为 <bpt id="p1">**</bpt>Set-itemproperty<ept id="p1">**</ept> 将每个项，该属性更改 <bpt id="p2">**</bpt>Foreach-object<ept id="p2">**</ept> cmdlet 需要访问的属性。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 5 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 5 --------------------------</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This example shows the effect of piping the $null automatic variable to the <bpt id="p1">**</bpt>ForEach-Object<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">此示例演示的管道 $null 自动变量到效果 <bpt id="p1">**</bpt>Foreach-object<ept id="p1">**</ept> cmdlet。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Because Windows PowerShell treats null as an explicit placeholder, the <bpt id="p1">**</bpt>ForEach-Object<ept id="p1">**</ept> cmdlet generates a value for $null, just as it does for other objects that you pipe to it.</source>
          <target state="translated">因为 Windows PowerShell 将 null 视为显式占位符， <bpt id="p1">**</bpt>Foreach-object<ept id="p1">**</ept> cmdlet 将生成一个值为 $null，管道传递给它的其他对象一样。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information about the $null automatic variable, see about_Automatic_Variables.</source>
          <target state="translated">有关 $null 自动变量的详细信息，请参阅 about_Automatic_Variables。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 6 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 6 --------------------------</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>These commands gets the value of the <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> property of all installed Windows PowerShell modules.</source>
          <target state="translated">这些命令将获取的值 <bpt id="p1">**</bpt>路径<ept id="p1">**</ept> 属性的所有已安装 Windows PowerShell 模块。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>They use the <bpt id="p1">**</bpt>MemberName<ept id="p1">**</ept> parameter to specify the <bpt id="p2">**</bpt>Path<ept id="p2">**</ept> property of modules.</source>
          <target state="translated">它们使用 <bpt id="p1">**</bpt>MemberName<ept id="p1">**</ept> 参数来指定 <bpt id="p2">**</bpt>路径<ept id="p2">**</ept> 的模块的属性。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The second command is equivalent to the first.</source>
          <target state="translated">第二个命令等效于第一个命令。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">**</bpt>Foreach<ept id="p1">**</ept> alias of the <bpt id="p2">**</bpt>Foreach-Object<ept id="p2">**</ept> cmdlet and omits the name of the <bpt id="p3">**</bpt>MemberName<ept id="p3">**</ept> parameter, which is optional.</source>
          <target state="translated">它使用 <bpt id="p1">**</bpt>Foreach<ept id="p1">**</ept> 别名 <bpt id="p2">**</bpt>Foreach-object<ept id="p2">**</ept> cmdlet，并省略名称 <bpt id="p3">**</bpt>MemberName<ept id="p3">**</ept> 参数，它是可选的。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ForEach-Object<ept id="p1">**</ept> cmdlet is very useful for getting property values, because it gets the value without changing the type, unlike the <bpt id="p2">**</bpt>Format<ept id="p2">**</ept> cmdlets or the Select-Object cmdlet, which change the property value type.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Foreach-object<ept id="p1">**</ept> cmdlet 是用于获取属性值非常有用，因为它获取的值，而无需更改与不同类型， <bpt id="p2">**</bpt>格式<ept id="p2">**</ept> cmdlet 或 Select-object cmdlet，后者将更改的属性值类型。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 7 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 7 --------------------------</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>These commands split two dot-separated module names into their component names.</source>
          <target state="translated">这些命令将两个以句点分隔的模块名称拆分为其组件名称。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The commands call the <bpt id="p1">**</bpt>Split<ept id="p1">**</ept> method of strings.</source>
          <target state="translated">这些命令调用 <bpt id="p1">**</bpt>拆分<ept id="p1">**</ept> 方法的字符串。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The three commands use different syntax, but they are equivalent and interchangeable.</source>
          <target state="translated">这三个命令使用不同的语法，但它们是等效且可互换的。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The first command uses the traditional syntax, which includes a script block and the current object operator ($_).</source>
          <target state="translated">第一个命令使用传统语法，包括脚本块和当前的对象运算符 ($_)。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>It uses the dot syntax to specify the method and parentheses to enclose the delimiter argument.</source>
          <target state="translated">它使用句点语法来指定该方法，并使用括号将分隔符参数括起来。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The second command uses the <bpt id="p1">**</bpt>MemberName<ept id="p1">**</ept> parameter to specify the <bpt id="p2">**</bpt>Split<ept id="p2">**</ept> method and the <bpt id="p3">**</bpt>ArgumentName<ept id="p3">**</ept> parameter to identify the dot (".") as the split delimiter.</source>
          <target state="translated">第二个命令使用 <bpt id="p1">**</bpt>MemberName<ept id="p1">**</ept> 参数来指定 <bpt id="p2">**</bpt>拆分<ept id="p2">**</ept> 方法和 <bpt id="p3">**</bpt>ArgumentName<ept id="p3">**</ept> 参数来标识该圆点 ("。") 为拆分分隔符。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The third command  uses the <bpt id="p1">**</bpt>Foreach<ept id="p1">**</ept> alias of the <bpt id="p2">**</bpt>Foreach-Object<ept id="p2">**</ept> cmdlet and omits the names of the <bpt id="p3">**</bpt>MemberName<ept id="p3">**</ept> and <bpt id="p4">**</bpt>ArgumentList<ept id="p4">**</ept> parameters, which are optional.</source>
          <target state="translated">第三个命令使用 <bpt id="p1">**</bpt>Foreach<ept id="p1">**</ept> 别名 <bpt id="p2">**</bpt>Foreach-object<ept id="p2">**</ept> cmdlet，并省略名称 <bpt id="p3">**</bpt>MemberName<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>ArgumentList<ept id="p4">**</ept> 参数，这些都是可选的参数。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The output of these three commands, shown below, is identical.</source>
          <target state="translated">这三个命令的输出是相同的，如下所示。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Split<ept id="p1">**</ept> is just one of many useful methods of strings.</source>
          <target state="translated"><bpt id="p1">**</bpt>拆分<ept id="p1">**</ept> 只是的很多有用的字符串方法之一。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To see all of the properties and methods of strings, pipe a string to the Get-Member cmdlet.</source>
          <target state="translated">若要查看的所有属性和方法的字符串，通过管道传递给 Get-member cmdlet 的字符串。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">参数</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>-Begin</source>
          <target state="translated">-开始</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Specifies a script block that runs before processing any input objects.</source>
          <target state="translated">指定在处理任何输入对象之前要运行的脚本块。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>-End</source>
          <target state="translated">高端</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Specifies a script block that runs after processing all input objects.</source>
          <target state="translated">指定在处理完所有输入对象之后要运行的脚本块。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>-InputObject</source>
          <target state="translated">-InputObject</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Specifies the input objects.</source>
          <target state="translated">指定输入对象。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>ForEach-Object runs the script block or operation statement on each input object.</source>
          <target state="translated">ForEach-Object 在每个输入对象上运行脚本块或操作语句。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Enter a variable that contains the objects, or type a command or expression that gets the objects.</source>
          <target state="translated">输入一个包含对象的变量，或键入可获取对象的命令或表达式。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>When you use the InputObject parameter with ForEach-Object, instead of piping command results to ForEach-Object, the InputObject value-even if the value is a collection that is the result of a command, such as -InputObject (Get-Process)-is treated as a single object.</source>
          <target state="translated">当使用 InputObject 参数与 Foreach-object，而不是给 Foreach-object 管道命令结果时，InputObject 值-甚至是如果值为一个集合，其中结果的命令，例如-InputObject (Get-process)-将被视为单个对象。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Because InputObject cannot return individual properties from an array or collection of objects, it is recommended that if you use ForEach-Object to perform operations on a collection of objects for those objects that have specific values in defined properties, you use ForEach-Object in the pipeline, as shown in the examples in this topic.</source>
          <target state="translated">由于 InputObject 无法返回来自数组或对象集合的单独属性，如果你使用 ForEach-Object 在对象集合上为在定义的属性中具有特定值的对象执行操作，则建议你在管道中使用 ForEach-Object，如本主题中的示例所示。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>-Process</source>
          <target state="translated">进程</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Specifies the operation that is performed on each input object.</source>
          <target state="translated">指定对每个输入对象所执行的操作。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Enter a script block that describes the operation.</source>
          <target state="translated">输入描述该操作的脚本块。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>-RemainingScripts</source>
          <target state="translated">-RemainingScripts</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Takes all script blocks that are not taken by the <bpt id="p1">**</bpt>Process<ept id="p1">**</ept> parameter.</source>
          <target state="translated">接受由未执行的所有脚本块 <bpt id="p1">**</bpt>过程<ept id="p1">**</ept> 参数。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此参数是在 Windows PowerShell 3.0 中引入的。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>-ArgumentList</source>
          <target state="translated">-ArgumentList</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Specifies the arguments to a method call.</source>
          <target state="translated">指定用于调用方法的参数。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此参数是在 Windows PowerShell 3.0 中引入的。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>-MemberName</source>
          <target state="translated">-MemberName</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Specifies the property to get or the method to call.</source>
          <target state="translated">指定要获取的属性或要调用的方法。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Wildcard characters are permitted, but work only if the resulting string resolves to a unique value.</source>
          <target state="translated">通配符允许的但生成的字符串解析为一个唯一的值才有效。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If, for example, you run Get-Process | ForEach -MemberName *Name, and more than one member exists with a name that contains the string Name--such as the ProcessName and Name properties--the command fails.</source>
          <target state="translated">如果，例如，您运行 Get-process |ForEach MemberName * 名称，且多个成员存在名称中包含此字符串名称--如 ProcessName 和名称属性--命令失败。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此参数是在 Windows PowerShell 3.0 中引入的。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>-Confirm</source>
          <target state="translated">-Confirm</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Prompts you for confirmation before running the cmdlet.Prompts you for confirmation before running the cmdlet.</source>
          <target state="translated">将提示您在运行 cmdlet 前进行确认。将提示您在运行 cmdlet 前进行确认。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>-WhatIf</source>
          <target state="translated">-WhatIf</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Shows what would happen if the cmdlet runs.</source>
          <target state="translated">显示如果运行 cmdlet 则会发生什么情况。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The cmdlet is not run.Shows what would happen if the cmdlet runs.</source>
          <target state="translated">该 cmdlet 不会运行。显示在 cmdlet 运行时，会发生什么情况。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The cmdlet is not run.</source>
          <target state="translated">cmdlet 未运行。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">此 cmdlet 支持以下常见参数:-调试-ErrorAction、-ErrorVariable、-InformationAction、-InformationVariable、-OutVariable、-OutBuffer、-PipelineVariable、-Verbose、-WarningAction 和-WarningVariable。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">有关详细信息，请参阅 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">输入</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.PSObject</source>
          <target state="translated">System.Management.Automation.PSObject</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>You can pipe any object to ForEach-Object.</source>
          <target state="translated">可以通过管道将任何对象传递给 ForEach-Object。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">输出</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.PSObject</source>
          <target state="translated">System.Management.Automation.PSObject</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The objects that ForEach-Object returns are determined by the input.</source>
          <target state="translated">ForEach-Object 返回的对象由输入确定。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ForEach-Object<ept id="p1">**</ept> cmdlet works much like the <bpt id="p2">**</bpt>Foreach<ept id="p2">**</ept> statement, except that you cannot pipe input to a <bpt id="p3">**</bpt>Foreach<ept id="p3">**</ept> statement.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Foreach-object<ept id="p1">**</ept> cmdlet 的工作方式非常类似于 <bpt id="p2">**</bpt>Foreach<ept id="p2">**</ept> 语句，只不过不能通过管道输入 <bpt id="p3">**</bpt>Foreach<ept id="p3">**</ept> 语句。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For more information about the <bpt id="p1">**</bpt>Foreach<ept id="p1">**</ept> statement, see about_Foreach (http://go.microsoft.com/fwlink/?LinkID=113229).</source>
          <target state="translated">有关详细信息 <bpt id="p1">**</bpt>Foreach<ept id="p1">**</ept> 语句，请参阅 about_Foreach (http://go.microsoft.com/fwlink/?LinkID=113229)。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">相关的链接</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>