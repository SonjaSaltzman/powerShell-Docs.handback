<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55ee05704d0297bfeaf6a0535ae2c096f9323b39</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Utility\Update-TypeData.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4234b8253879e44b89ac25b56e478443c85c88c2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8740d6ec749de4aabb3efe4ccc761f39204e8aee</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Update-TypeData</source>
          <target state="translated">Update-TypeData</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Update-TypeData</source>
          <target state="translated">Update-TypeData</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">简述</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Updates the extended type data in the session.</source>
          <target state="translated">更新会话中的扩展类型数据。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">语法</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>FileSet (Default)</source>
          <target state="translated">文件集 （默认值）</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>DynamicTypeSet</source>
          <target state="translated">DynamicTypeSet</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>TypeDataSet</source>
          <target state="translated">TypeDataSet</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> cmdlet updates the extended type data in the session by reloading the Types.ps1xml files into memory and adding new extended type data.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> cmdlet 通过重新 Types.ps1xml 文件加载到内存中更新会话中的扩展的类型数据和添加新的扩展类型数据。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>By default, Windows PowerShell loads extended type data as it is needed.</source>
          <target state="translated">默认情况下，Windows PowerShell 将在需要时加载扩展类型数据。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Without parameters, <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> reloads all of the Types.ps1xml files that it has loaded in the session, including any type files that you added.</source>
          <target state="translated">不带参数， <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> 重新加载所有已在会话中，包括你添加的任何类型的文件中加载的 Types.ps1xml 文件。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can use the parameters of <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> to add new type files and add and replace extended type data.</source>
          <target state="translated">您可以使用的参数 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> 以添加新类型的文件并添加和替换扩展的类型数据。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> cmdlet can be used to preload all type data.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> cmdlet 可用于预加载所有类型数据。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This feature is particularly useful when you are developing types and want to load those new types for testing purposes.</source>
          <target state="translated">当你要开发类型并且想要加载这些新类型用于测试目的时，此功能尤其有用。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, you can use <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> to add and replace extended type data in the session without using a Types.ps1xml file.</source>
          <target state="translated">Windows PowerShell 3.0 开始，你可以使用 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> 添加并替换会话中的扩展的类型数据，而无需使用 Types.ps1xml 文件。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Type data that is added dynamically, that is, without a file, is added only to the current session.</source>
          <target state="translated">仅将动态（即无需文件）添加的类型数据添加到当前会话中。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To add the type data to all sessions, add an <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> command to your Windows PowerShell profile.</source>
          <target state="translated">若要添加到所有会话的类型数据，添加 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> 命令到你的 Windows PowerShell 配置文件。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see about_Profiles (http://go.microsoft.com/fwlink/?LinkID=113729).</source>
          <target state="translated">有关详细信息，请参阅 about_Profiles (http://go.microsoft.com/fwlink/?LinkID=113729)。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Also, beginning in Windows PowerShell 3.0, you can use the Get-TypeData cmdlet to get the extended types in the current session and the Remove-TypeData cmdlet to delete extended types from the current session.</source>
          <target state="translated">此外，从 Windows PowerShell 3.0 开始，您可以使用 Get-typedata cmdlet 来获取当前会话和 Remove-typedata cmdlet 可从当前会话中删除扩展的类型中的扩展的类型。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Exceptions that occur in properties, or from adding properties to an <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> command, do not report errors to StdErr.</source>
          <target state="translated">出现在属性中，或将属性添加到的异常 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> 命令，则不向 StdErr 报告错误。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This is to suppress exceptions that would occur in many common types during formatting and outputting.</source>
          <target state="translated">这是为了取消显示在格式设置和输出期间在许多常见类型中发生的异常。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If you are getting .NET Framework properties, you can work around the suppression of exceptions by using method syntax instead, as shown in the following example:</source>
          <target state="translated">如果你要获得 .NET Framework 属性，可以通过改用方法语法来处理取消显示异常问题，如下面的示例所示：</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Note that method syntax can only be used with .NET Framework properties.</source>
          <target state="translated">请注意，方法语法仅可用于 .NET Framework 属性。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Properties that are added by running the Update-TypeData cmdlet cannot use method syntax.</source>
          <target state="translated">通过运行 Update-TypeData cmdlet 添加的属性不能使用方法语法。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information about the *types.ps1xml files in Windows PowerShell, see about_Types.ps1xml (http://technet.microsoft.com/library/hh847881.aspx).</source>
          <target state="translated">有关 Windows PowerShell 中的 * types.ps1xml 文件的详细信息，请参阅 about_Types.ps1xml (http://technet.microsoft.com/library/hh847881.aspx)。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">示例</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 1 --------------------------</source>
          <target state="translated">-------------------------- 示例 1 --------------------------</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This command updates the extended type configuration from the *.types.ps1xml files that have already been used in the session.</source>
          <target state="translated">此命令将更新已在会话中使用的 *.types.ps1xml 文件中的扩展类型配置。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 2 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 2 --------------------------</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This example show how to update the types in a type file multiple times in the same session.</source>
          <target state="translated">此示例显示了如何在同一会话中多次更新类型文件中的类型。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 3 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 3 --------------------------</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This example uses <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> to add the Quarter script property to <bpt id="p2">**</bpt>System.DateTime<ept id="p2">**</ept> objects in the current session, such as those returned by the Get-Date cmdlet.</source>
          <target state="translated">此示例使用 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> 若要添加到的 Quarter 脚本属性 <bpt id="p2">**</bpt>System.DateTime<ept id="p2">**</ept> 在当前会话中，例如 Get-date cmdlet 返回的对象。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> command uses the <bpt id="p2">**</bpt>TypeName<ept id="p2">**</ept> parameter to specify <bpt id="p3">**</bpt>the System.DateTime<ept id="p3">**</ept> type, the <bpt id="p4">**</bpt>MemberName<ept id="p4">**</ept> parameter to specify a name for the new property, the <bpt id="p5">**</bpt>MemberType<ept id="p5">**</ept> property to specify the <bpt id="p6">**</bpt>ScriptProperty<ept id="p6">**</ept> type, and the <bpt id="p7">**</bpt>Value<ept id="p7">**</ept> parameter to specify the script that determines the annual quarter.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> 命令使用 <bpt id="p2">**</bpt>TypeName<ept id="p2">**</ept> 参数来指定 <bpt id="p3">**</bpt>System.DateTime<ept id="p3">**</ept> 类型， <bpt id="p4">**</bpt>MemberName<ept id="p4">**</ept> 参数来指定新属性名称 <bpt id="p5">**</bpt>MemberType<ept id="p5">**</ept> 属性来指定 <bpt id="p6">**</bpt>ScriptProperty<ept id="p6">**</ept> 类型，和 <bpt id="p7">**</bpt>值<ept id="p7">**</ept> 参数来指定用于确定年度季度的脚本。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The value of the <bpt id="p1">**</bpt>Value<ept id="p1">**</ept> property is a script that calculates the current annual quarter.</source>
          <target state="translated">值 <bpt id="p1">**</bpt>值<ept id="p1">**</ept> 属性是一个计算当前年度季度的脚本。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The script block the $this automatic variable to represent the current instance of the object and the <bpt id="p1">**</bpt>In<ept id="p1">**</ept> operator to determine whether the month value appears in each integer array.</source>
          <target state="translated">该脚本块使用 $this 自动变量来表示该对象的当前实例与 <bpt id="p1">**</bpt>中<ept id="p1">**</ept> 运算符来确定每个整数数组中是否显示月份值。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more information about the In operator, see about_Comparison_Operators (http://go.microsoft.com/fwlink/?LinkID=113217).</source>
          <target state="translated">有关 In 运算符的详细信息，请参阅 about_Comparison_Operators (http://go.microsoft.com/fwlink/?LinkID=113217)。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The second command gets the new Quarter property of the current date.</source>
          <target state="translated">第二个命令将获取当前日期的新 Quarter 属性。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 4 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 4 --------------------------</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This example shows how to set the properties of a type that display in lists by default, that is, when no properties are specified.</source>
          <target state="translated">此示例显示了如何在默认情况下（即未指定任何属性时）设置显示在列表中的类型的属性。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Because the type data is not specified in a Types.ps1xml file, it is effective only in the current session.</source>
          <target state="translated">因为没有在 Types.ps1xml 文件中指定类型数据，所以它仅在当前会话中有效。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The first command uses the <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> cmdlet to set the default list properties for the <bpt id="p2">**</bpt>System.DateTime<ept id="p2">**</ept> type.</source>
          <target state="translated">第一个命令使用 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> cmdlet 可设置默认值的列表属性 <bpt id="p2">**</bpt>System.DateTime<ept id="p2">**</ept> 类型。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">**</bpt>TypeName<ept id="p1">**</ept> parameter to specify the type and the <bpt id="p2">**</bpt>DefaultDisplayPropertySet<ept id="p2">**</ept> parameter to specify the default properties for a list.</source>
          <target state="translated">该命令使用 <bpt id="p1">**</bpt>TypeName<ept id="p1">**</ept> 参数以指定的类型和 <bpt id="p2">**</bpt>DefaultDisplayPropertySet<ept id="p2">**</ept> 参数来指定列表的默认属性。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The selected properties include the new Quarter script property that was added in a previous example.</source>
          <target state="translated">所选属性包括在前面的示例中添加的新的 Quarter 脚本属性。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The second command uses the Get-Date cmdlet to get a <bpt id="p1">**</bpt>System.DateTime<ept id="p1">**</ept> object that represents the current date.</source>
          <target state="translated">第二个命令使用 Get-date cmdlet 来获取 <bpt id="p1">**</bpt>System.DateTime<ept id="p1">**</ept> 对象，表示当前日期。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The command uses a pipeline operator (|) to send the <bpt id="p1">**</bpt>DateTime<ept id="p1">**</ept> object to the Format-List cmdlet.</source>
          <target state="translated">该命令使用管道运算符 (|) 将发送 <bpt id="p1">**</bpt>DateTime<ept id="p1">**</ept> 对象传递给 Format-list cmdlet。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Because the <bpt id="p1">**</bpt>Format-List<ept id="p1">**</ept> command does not specify the properties to display in the list, Windows PowerShell uses the default values that were established by the <bpt id="p2">**</bpt>Update-TypeData<ept id="p2">**</ept> command.</source>
          <target state="translated">因为 <bpt id="p1">**</bpt>Format-list<ept id="p1">**</ept> 命令未指定要在列表中显示的属性，Windows PowerShell 将使用由已建立的默认值 <bpt id="p2">**</bpt>Update-typedata<ept id="p2">**</ept> 命令。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 5 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 5 --------------------------</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This example demonstrates that when you pipe an object to <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Update-TypeData<ept id="p2">**</ept> adds extended type data for the object type.</source>
          <target state="translated">此示例演示了当你通过管道传递一个对象到 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept>, ，<bpt id="p2">**</bpt>Update-typedata<ept id="p2">**</ept> 添加的对象类型的扩展的类型数据。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This technique is quicker than using the Get-Member cmdlet or the <bpt id="p1">**</bpt>Get-Type<ept id="p1">**</ept> method to get the object type.</source>
          <target state="translated">此技术比使用 Get-member cmdlet 或 <bpt id="p1">**</bpt>Get 类型<ept id="p1">**</ept> 方法来获取对象类型。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>However, if you pipe a collection of objects to <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept>, it updates the type data of the first object type and then returns an error for all other objects in the collection because the member is already defined on the type.</source>
          <target state="translated">但是，如果你通过管道传递到的对象的集合， <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept>, ，它更新第一种对象类型的类型数据，然后返回集合中的所有其他对象的错误，因为该成员已定义的类型。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The first command uses the Get-Module cmdlet to get the PSScheduledJob module.</source>
          <target state="translated">第一个命令使用 Get-module cmdlet 来获取 PSScheduledJob 模块。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The command pipes the module object to the <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> cmdlet, which updates the type data for the <bpt id="p2">**</bpt>System.Management.Automation.PSModuleInfo<ept id="p2">**</ept> type and the types derived from it, such as the <bpt id="p3">**</bpt>ModuleInfoGrouping<ept id="p3">**</ept> type that <bpt id="p4">**</bpt>Get-Module<ept id="p4">**</ept> returns when you use the <bpt id="p5">**</bpt>ListAvailable<ept id="p5">**</ept> parameter in the command.</source>
          <target state="translated">命令通过管道将模块对象传递给 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> cmdlet，后者将更新的类型数据 <bpt id="p2">**</bpt>System.Management.Automation.PSModuleInfo<ept id="p2">**</ept> 类型和类型派生自它，如 <bpt id="p3">**</bpt>ModuleInfoGrouping<ept id="p3">**</ept> 类型 <bpt id="p4">**</bpt>Get-module<ept id="p4">**</ept> 当您使用时，返回 <bpt id="p5">**</bpt>ListAvailable<ept id="p5">**</ept> 命令中的参数。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> commands adds the <bpt id="p2">**</bpt>SupportsUpdatableHelp<ept id="p2">**</ept> script property to all imported modules.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> 命令添加 <bpt id="p2">**</bpt>SupportsUpdatableHelp<ept id="p2">**</ept> 脚本导入的所有模块的属性。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The value of the Value parameter is a script that returns $True if the <bpt id="p1">**</bpt>HelpInfoUri<ept id="p1">**</ept> property of the module is populated and $False otherwise.</source>
          <target state="translated">值参数的值是一个脚本，如果返回 $True <bpt id="p1">**</bpt>HelpInfoUri<ept id="p1">**</ept> 填充的模块的属性和 $False 以其他方式。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The second command pipes the module objects from <bpt id="p1">**</bpt>Get-Module<ept id="p1">**</ept> to the Format-Table cmdlet, which displays the <bpt id="p2">**</bpt>Name<ept id="p2">**</ept> and <bpt id="p3">**</bpt>SupportsUpdatableHelp<ept id="p3">**</ept> properties of all modules in a list.</source>
          <target state="translated">第二个命令通过管道将模块对象从 <bpt id="p1">**</bpt>Get-module<ept id="p1">**</ept> 给 Format-table cmdlet，后者将显示 <bpt id="p2">**</bpt>名称<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>SupportsUpdatableHelp<ept id="p3">**</ept> 在列表中的所有模块的属性。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">参数</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>-AppendPath</source>
          <target state="translated">-AppendPath</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Specifies the path to optional .ps1xml files.</source>
          <target state="translated">指定可选 .ps1xml 文件的路径。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The specified files are loaded in the order that they are listed after the built-in files are loaded.</source>
          <target state="translated">按加载内置文件后列出指定文件的顺序来加载这些文件。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can also pipe an <bpt id="p1">**</bpt>AppendPath<ept id="p1">**</ept> value to <bpt id="p2">**</bpt>Update-TypeData<ept id="p2">**</ept>.</source>
          <target state="translated">您还可以通过管道 <bpt id="p1">**</bpt>AppendPath<ept id="p1">**</ept> 值赋给 <bpt id="p2">**</bpt>Update-typedata<ept id="p2">**</ept>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>-PrependPath</source>
          <target state="translated">-PrependPath</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Specifies the path to the optional .ps1xml files.</source>
          <target state="translated">指定可选 .ps1xml 文件的路径。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The specified files are loaded in the order that they are listed before the built-in files are loaded.</source>
          <target state="translated">按加载内置文件前列出指定文件的顺序来加载这些文件。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>-DefaultDisplayProperty</source>
          <target state="translated">-DefaultDisplayProperty</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Specifies the property of the type that is displayed by the Format-Wide cmdlet when no other properties are specified.</source>
          <target state="translated">不指定的属性时未指定任何其他属性由 Format-wide cmdlet 显示的类型。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Type the name of a standard or extended property of the type.</source>
          <target state="translated">键入类型的标准或扩展属性的名称。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The value of this parameter can be the name of a type that is added in the same command.</source>
          <target state="translated">此参数的值可以是已添加到同一命令中的类型的名称。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This value is effective only when there are no wide views defined for the type in a Format.ps1xml file.</source>
          <target state="translated">仅当没有为 Format.ps1xml 文件中的类型定义宽视图时，此值才有效。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此参数是在 Windows PowerShell 3.0 中引入的。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>-DefaultDisplayPropertySet</source>
          <target state="translated">-DefaultDisplayPropertySet</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Specifies one or more properties of the type.</source>
          <target state="translated">指定类型的一个或多个属性。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>These properties are displayed by the Format-List cmdlet when no other properties are specified.</source>
          <target state="translated">Format-list cmdlet 会显示这些属性未指定任何其他属性。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Type the names of standard or extended properties of the type.</source>
          <target state="translated">键入类型的标准或扩展属性的名称。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The value of this parameter can be the names of types that are added in the same command.</source>
          <target state="translated">此参数的值可以是已添加到同一命令中的类型的名称。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This value is effective only when there are no list views defined for the type in a Format.ps1xml file.</source>
          <target state="translated">仅当没有为 Format.ps1xml 文件中的类型定义列表视图时，此值才有效。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此参数是在 Windows PowerShell 3.0 中引入的。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>-DefaultKeyPropertySet</source>
          <target state="translated">-DefaultKeyPropertySet</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Specifies one or more properties of the type.</source>
          <target state="translated">指定类型的一个或多个属性。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>These properties are used by the Group-Object and Sort-Object cmdlets when no other properties are specified.</source>
          <target state="translated">当未不指定任何其他属性时，将通过组对象和 Sort-object cmdlet 中使用这些属性。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Type the names of standard or extended properties of the type.</source>
          <target state="translated">键入类型的标准或扩展属性的名称。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The value of this parameter can be the names of types that are added in the same command.</source>
          <target state="translated">此参数的值可以是已添加到同一命令中的类型的名称。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此参数是在 Windows PowerShell 3.0 中引入的。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>-Force</source>
          <target state="translated">-Force</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Uses the specified type data, even if type data has already been specified for that type.</source>
          <target state="translated">即使已为该类型指定了类型数据，也使用指定的类型数据。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此参数是在 Windows PowerShell 3.0 中引入的。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>-InheritPropertySerializationSet</source>
          <target state="translated">-InheritPropertySerializationSet</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Determines whether the set of properties that are serialized is inherited.</source>
          <target state="translated">确定是否继承已进行序列化的属性集。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The default value is $Null</source>
          <target state="translated">默认值为 $Null</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Valid values are:</source>
          <target state="translated">有效值包括：</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>$True<ept id="p1">**</ept>: The property set is inherited.</source>
          <target state="translated"><bpt id="p1">**</bpt>$True<ept id="p1">**</ept>︰ 继承属性集。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>$False<ept id="p1">**</ept>: The property set is not inherited.</source>
          <target state="translated"><bpt id="p1">**</bpt>$False<ept id="p1">**</ept>︰ 不继承属性集。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>$Null<ept id="p1">**</ept>: Inheritance is not defined.</source>
          <target state="translated"><bpt id="p1">**</bpt>$Null<ept id="p1">**</ept>︰ 未定义继承。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This parameter is valid only when the value of the <bpt id="p1">**</bpt>SerializationMethod<ept id="p1">**</ept> parameter is <bpt id="p2">**</bpt>SpecificProperties<ept id="p2">**</ept>.</source>
          <target state="translated">此参数是时才有效的值 <bpt id="p1">**</bpt>SerializationMethod<ept id="p1">**</ept> 参数是 <bpt id="p2">**</bpt>SpecificProperties<ept id="p2">**</ept>。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>When the value of this parameter is <bpt id="p1">**</bpt>$False<ept id="p1">**</ept>, the <bpt id="p2">**</bpt>PropertySerializationSet<ept id="p2">**</ept> parameter is required.</source>
          <target state="translated">当此参数的值是 <bpt id="p1">**</bpt>$False<ept id="p1">**</ept>, 、 <bpt id="p2">**</bpt>PropertySerializationSet<ept id="p2">**</ept> 参数是必需的。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此参数是在 Windows PowerShell 3.0 中引入的。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>-MemberName</source>
          <target state="translated">-MemberName</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Specifies the name of a property or method.</source>
          <target state="translated">指定属性或方法的名称。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Use this parameter with the <bpt id="p1">**</bpt>TypeName<ept id="p1">**</ept>, <bpt id="p2">**</bpt>MemberType<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Value<ept id="p3">**</ept> and <bpt id="p4">**</bpt>SecondValue<ept id="p4">**</ept> parameters to add or change a property or method of a type.</source>
          <target state="translated">使用此参数与 <bpt id="p1">**</bpt>TypeName<ept id="p1">**</ept>, ，<bpt id="p2">**</bpt>MemberType<ept id="p2">**</ept>, ，<bpt id="p3">**</bpt>值<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>SecondValue<ept id="p4">**</ept> 参数，以添加或更改属性或方法的类型。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此参数是在 Windows PowerShell 3.0 中引入的。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>-MemberType</source>
          <target state="translated">-MemberType</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Specifies the type of the member to add or change.</source>
          <target state="translated">指定要添加或更改的成员类型。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Use this parameter with the <bpt id="p1">**</bpt>TypeName<ept id="p1">**</ept>, <bpt id="p2">**</bpt>MemberType<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Value<ept id="p3">**</ept> and <bpt id="p4">**</bpt>SecondValue<ept id="p4">**</ept> parameters to add or change a property or method of a type.</source>
          <target state="translated">使用此参数与 <bpt id="p1">**</bpt>TypeName<ept id="p1">**</ept>, ，<bpt id="p2">**</bpt>MemberType<ept id="p2">**</ept>, ，<bpt id="p3">**</bpt>值<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>SecondValue<ept id="p4">**</ept> 参数，以添加或更改属性或方法的类型。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The valid values for this parameter are: <bpt id="p1">**</bpt>AliasProperty<ept id="p1">**</ept>, <bpt id="p2">**</bpt>CodeMethod<ept id="p2">**</ept>, <bpt id="p3">**</bpt>CodeProperty<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Noteproperty<ept id="p4">**</ept>, <bpt id="p5">**</bpt>ScriptMethod<ept id="p5">**</ept>, and <bpt id="p6">**</bpt>ScriptProperty<ept id="p6">**</ept>.</source>
          <target state="translated">此参数的有效值是︰ <bpt id="p1">**</bpt>AliasProperty<ept id="p1">**</ept>, ，<bpt id="p2">**</bpt>CodeMethod<ept id="p2">**</ept>, ，<bpt id="p3">**</bpt>CodeProperty<ept id="p3">**</ept>, ，<bpt id="p4">**</bpt>Noteproperty<ept id="p4">**</ept>, ，<bpt id="p5">**</bpt>ScriptMethod<ept id="p5">**</ept>, ，和 <bpt id="p6">**</bpt>ScriptProperty<ept id="p6">**</ept>。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For information about these values, see "PSMemberTypes Enumeration" in MSDN at http://msdn.microsoft.com/library/windows/desktop/system.management.automation.psmembertypes(v=vs.85).aspxhttp://msdn.microsoft.com/library/windows/desktop/system.management.automation.psmembertypes(v=vs.85).aspx.</source>
          <target state="translated">有关这些值的信息，请参阅 MSDN 中的"PSMemberTypes 枚举"在 http://msdn.microsoft.com/library/windows/desktop/system.management.automation.psmembertypes (v = vs.85).aspxhttp://msdn.microsoft.com/library/windows/desktop/system.management.automation.psmembertypes(v=vs.85).aspx.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此参数是在 Windows PowerShell 3.0 中引入的。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>-PropertySerializationSet</source>
          <target state="translated">-PropertySerializationSet</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Specifies the names of properties that are serialized.</source>
          <target state="translated">指定已进行序列化的属性的名称。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Use this parameter when the value of the <bpt id="p1">**</bpt>SerializationMethod<ept id="p1">**</ept> parameter is <bpt id="p2">**</bpt>SpecificProperties<ept id="p2">**</ept>.</source>
          <target state="translated">使用此参数时的值 <bpt id="p1">**</bpt>SerializationMethod<ept id="p1">**</ept> 参数是 <bpt id="p2">**</bpt>SpecificProperties<ept id="p2">**</ept>。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>-SecondValue</source>
          <target state="translated">-SecondValue</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Specifies additional values for <bpt id="p1">**</bpt>AliasProperty<ept id="p1">**</ept>, <bpt id="p2">**</bpt>ScriptProperty<ept id="p2">**</ept>, <bpt id="p3">**</bpt>CodeProperty<ept id="p3">**</ept>, or <bpt id="p4">**</bpt>CodeMethod<ept id="p4">**</ept> members.</source>
          <target state="translated">指定其他值 <bpt id="p1">**</bpt>AliasProperty<ept id="p1">**</ept>, ，<bpt id="p2">**</bpt>ScriptProperty<ept id="p2">**</ept>, ，<bpt id="p3">**</bpt>CodeProperty<ept id="p3">**</ept>, ，或 <bpt id="p4">**</bpt>CodeMethod<ept id="p4">**</ept> 成员。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Use this parameter with the <bpt id="p1">**</bpt>TypeName<ept id="p1">**</ept>, <bpt id="p2">**</bpt>MemberType<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Value<ept id="p3">**</ept> and <bpt id="p4">**</bpt>SecondValue<ept id="p4">**</ept> parameters to add or change a property or method of a type.</source>
          <target state="translated">使用此参数与 <bpt id="p1">**</bpt>TypeName<ept id="p1">**</ept>, ，<bpt id="p2">**</bpt>MemberType<ept id="p2">**</ept>, ，<bpt id="p3">**</bpt>值<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>SecondValue<ept id="p4">**</ept> 参数，以添加或更改属性或方法的类型。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>When the value of the <bpt id="p1">**</bpt>MemberType<ept id="p1">**</ept> parameter is <bpt id="p2">**</bpt>AliasProperty<ept id="p2">**</ept>, the value of the <bpt id="p3">**</bpt>SecondValue<ept id="p3">**</ept> parameter must be a data type.</source>
          <target state="translated">时的值 <bpt id="p1">**</bpt>MemberType<ept id="p1">**</ept> 参数是 <bpt id="p2">**</bpt>AliasProperty<ept id="p2">**</ept>, ，值 <bpt id="p3">**</bpt>SecondValue<ept id="p3">**</ept> 参数必须是一种数据类型。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Windows PowerShell converts ("casts") the value of the alias property to the specified type.</source>
          <target state="translated">Windows PowerShell 会将别名属性的值转换（“强制转换”）为指定的类型。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>For example, if you add an alias property that provides an alternate name for a string property, you can also specify a <bpt id="p1">**</bpt>SecondValue<ept id="p1">**</ept> of System.Int32 to convert the aliased string value to an integer.</source>
          <target state="translated">例如，如果您添加提供的备选名称的字符串属性的别名属性，您还可以指定 <bpt id="p1">**</bpt>SecondValue<ept id="p1">**</ept> 的 System.Int32 将别名字符串值转换为整数。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>When the value of the <bpt id="p1">**</bpt>MemberType<ept id="p1">**</ept> parameter is <bpt id="p2">**</bpt>ScriptProperty<ept id="p2">**</ept>, you can use the <bpt id="p3">**</bpt>SecondValue<ept id="p3">**</ept> parameter to specify an additional script block.</source>
          <target state="translated">时的值 <bpt id="p1">**</bpt>MemberType<ept id="p1">**</ept> 参数是 <bpt id="p2">**</bpt>ScriptProperty<ept id="p2">**</ept>, ，您可以使用 <bpt id="p3">**</bpt>SecondValue<ept id="p3">**</ept> 参数来指定其他脚本块。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The script block in the value of the <bpt id="p1">**</bpt>Value<ept id="p1">**</ept> parameter gets the value of a variable.</source>
          <target state="translated">中的值的脚本块 <bpt id="p1">**</bpt>值<ept id="p1">**</ept> 参数获取变量的值。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The script block in the value of the <bpt id="p1">**</bpt>SecondValue<ept id="p1">**</ept> parameter set the value of the variable.</source>
          <target state="translated">中的值的脚本块 <bpt id="p1">**</bpt>SecondValue<ept id="p1">**</ept> 参数设置变量的值。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此参数是在 Windows PowerShell 3.0 中引入的。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>-SerializationDepth</source>
          <target state="translated">-SerializationDepth</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Specifies how many levels of type objects are serialized as strings.</source>
          <target state="translated">指定将多少个级别的类型对象序列化为字符串。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The default value, 1, serializes the object and its properties.</source>
          <target state="translated">默认值 1 表示序列化对象及其属性。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A value of 0 serializes the object, but not its properties.</source>
          <target state="translated">值 0 表示序列化对象，但不序列化其属性。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>A value of 2 serializes the object, its properties, and any objects in property values.</source>
          <target state="translated">值 2 表示序列化对象、其属性和属性值中的任何对象。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此参数是在 Windows PowerShell 3.0 中引入的。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>-SerializationMethod</source>
          <target state="translated">-SerializationMethod</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Specifies a serialization method for the type.</source>
          <target state="translated">为类型指定序列化方法。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>A serialization method determines which properties of the type are serialized and the technique that is used to serialize them.</source>
          <target state="translated">序列化方法将确定序列化类型的哪些属性以及用于对其进行序列化的方法。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Valid values are:</source>
          <target state="translated">有效值包括：</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AllPublicProperties<ept id="p1">**</ept>: Serialize all public properties of the type.</source>
          <target state="translated"><bpt id="p1">**</bpt>AllPublicProperties<ept id="p1">**</ept>︰ 序列化所有公共属性的类型。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>SerializationDepth<ept id="p1">**</ept> parameter to determine whether child properties are serialized.</source>
          <target state="translated">您可以使用 <bpt id="p1">**</bpt>SerializationDepth<ept id="p1">**</ept> 参数，以确定是否序列化子属性。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>String<ept id="p1">**</ept>: Serialize the type as a string.</source>
          <target state="translated"><bpt id="p1">**</bpt>字符串<ept id="p1">**</ept>︰ 将序列化为字符串形式的类型。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>StringSerializationSource<ept id="p1">**</ept> to specify a property of the type to use as the serialization result.</source>
          <target state="translated">您可以使用 <bpt id="p1">**</bpt>StringSerializationSource<ept id="p1">**</ept> 来指定要用作序列化结果的类型的属性。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Otherwise, the type is serialized by using the <bpt id="p1">**</bpt>ToString<ept id="p1">**</ept> method of the object.</source>
          <target state="translated">否则，使用序列化该类型 <bpt id="p1">**</bpt>ToString<ept id="p1">**</ept> 对象的方法。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SpecificProperties<ept id="p1">**</ept> Serialize only the specified properties of this type.</source>
          <target state="translated"><bpt id="p1">**</bpt>SpecificProperties<ept id="p1">**</ept> 序列化只指定这种类型的属性。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>PropertySerializationSet<ept id="p1">**</ept> parameter to specify the properties of the type that are serialized.</source>
          <target state="translated">使用 <bpt id="p1">**</bpt>PropertySerializationSet<ept id="p1">**</ept> 参数来指定要序列化类型的属性。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>You can also use the <bpt id="p1">**</bpt>InheritPropertySerializationSet<ept id="p1">**</ept> parameter to determine whether the property set is inherited and the <bpt id="p2">**</bpt>SerializationDepth<ept id="p2">**</ept> parameter to determine whether child properties are serialized.</source>
          <target state="translated">您还可以使用 <bpt id="p1">**</bpt>InheritPropertySerializationSet<ept id="p1">**</ept> 参数，以确定是否继承属性集和 <bpt id="p2">**</bpt>SerializationDepth<ept id="p2">**</ept> 参数，以确定是否序列化子属性。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell, serialization methods are stored in <bpt id="p1">**</bpt>PSStandardMembers<ept id="p1">**</ept> internal objects.</source>
          <target state="translated">在 Windows PowerShell 中，序列化方法存储在 <bpt id="p1">**</bpt>PSStandardMembers<ept id="p1">**</ept> 内部对象。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此参数是在 Windows PowerShell 3.0 中引入的。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>-StringSerializationSource</source>
          <target state="translated">-StringSerializationSource</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Specifies the name of a property of the type.</source>
          <target state="translated">指定类型的属性的名称。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The value of specified property is used as the serialization result.</source>
          <target state="translated">指定属性的值将用作序列化结果。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>This parameter is valid only when the value of the <bpt id="p1">**</bpt>SerializationMethod<ept id="p1">**</ept> parameter is <bpt id="p2">**</bpt>String<ept id="p2">**</ept>.</source>
          <target state="translated">此参数是时才有效的值 <bpt id="p1">**</bpt>SerializationMethod<ept id="p1">**</ept> 参数是 <bpt id="p2">**</bpt>字符串<ept id="p2">**</ept>。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>-TargetTypeForDeserialization</source>
          <target state="translated">-TargetTypeForDeserialization</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Specifies the type to which object of this type are converted when they are deserialized.</source>
          <target state="translated">指定此类型的对象被反序列化时将转换为哪种类型。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此参数是在 Windows PowerShell 3.0 中引入的。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>-TypeAdapter</source>
          <target state="translated">-TypeAdapter</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Specifies the type of a type adapter, such as Microsoft.PowerShell.Cim.CimInstanceAdapter.</source>
          <target state="translated">指定 Microsoft.PowerShell.Cim.CimInstanceAdapter 等类型适配器的类型。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A type adapter enables Windows PowerShell to get the members of a type.</source>
          <target state="translated">类型适配器使 Windows PowerShell 能够获取类型的成员。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此参数是在 Windows PowerShell 3.0 中引入的。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>-TypeConverter</source>
          <target state="translated">的类型转换器</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Specifies a type converter to convert values between different types.</source>
          <target state="translated">指定可在不同类型之间转换值的类型转换器。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>If a type converter is defined for a type, an instance of the type converter is used for the conversion.</source>
          <target state="translated">如果为某个类型定义一个类型转换器，则该类型转换器的实例将用于转换过程。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Enter a <bpt id="p1">**</bpt>System.Type<ept id="p1">**</ept> value that is derived from the <bpt id="p2">**</bpt>System.ComponentModel.TypeConverter<ept id="p2">**</ept> or <bpt id="p3">**</bpt>System.Management.Automation.PSTypeConverter<ept id="p3">**</ept> classes.</source>
          <target state="translated">输入 <bpt id="p1">**</bpt>System.Type<ept id="p1">**</ept> 值派生自 <bpt id="p2">**</bpt>System.ComponentModel.TypeConverter<ept id="p2">**</ept> 或 <bpt id="p3">**</bpt>System.Management.Automation.PSTypeConverter<ept id="p3">**</ept> 类。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此参数是在 Windows PowerShell 3.0 中引入的。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>-TypeData</source>
          <target state="translated">-TypeData</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Adds the specified type data to the session.</source>
          <target state="translated">将指定类型数据添加到会话。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Enter a variable that contains a <bpt id="p1">**</bpt>TypeData<ept id="p1">**</ept> object or a command that gets a <bpt id="p2">**</bpt>TypeData<ept id="p2">**</ept> object, such as a Get-TypeData command.</source>
          <target state="translated">输入一个包含变量 <bpt id="p1">**</bpt>TypeData<ept id="p1">**</ept> 对象或一个可获取命令 <bpt id="p2">**</bpt>TypeData<ept id="p2">**</ept> 对象，如 Get-typedata 命令。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>You can also pipe a TypeData object to <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept>.</source>
          <target state="translated">您还可以通过管道将 TypeData 对象传递给 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此参数是在 Windows PowerShell 3.0 中引入的。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>-TypeName</source>
          <target state="translated">的类型名称</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Specifies the name of the type to extend.</source>
          <target state="translated">指定要扩展的类型的名称。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>For types in the <bpt id="p1">**</bpt>System<ept id="p1">**</ept> namespace, enter the short name.</source>
          <target state="translated">中的类型 <bpt id="p1">**</bpt>系统<ept id="p1">**</ept> 命名空间中，输入短名称。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Otherwise, the full type name is required.</source>
          <target state="translated">否则，必须输入完整类型名称。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Wildcards are not supported.</source>
          <target state="translated">不支持使用通配符。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>You can pipe type names to <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept>.</source>
          <target state="translated">您可以通过管道传递类型名称传递给 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>When you pipe an object to <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Update-TypeData<ept id="p2">**</ept> gets the type name of the object and type data to the object type.</source>
          <target state="translated">当通过管道传递一个对象到 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept>, ，<bpt id="p2">**</bpt>Update-typedata<ept id="p2">**</ept> 获取的对象类型的对象和类型的数据的类型名称。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Use this parameter with the <bpt id="p1">**</bpt>MemberName<ept id="p1">**</ept>, <bpt id="p2">**</bpt>MemberType<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Value<ept id="p3">**</ept> and <bpt id="p4">**</bpt>SecondValue<ept id="p4">**</ept> parameters to add or change a property or method of a type.</source>
          <target state="translated">使用此参数与 <bpt id="p1">**</bpt>MemberName<ept id="p1">**</ept>, ，<bpt id="p2">**</bpt>MemberType<ept id="p2">**</ept>, ，<bpt id="p3">**</bpt>值<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>SecondValue<ept id="p4">**</ept> 参数，以添加或更改属性或方法的类型。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此参数是在 Windows PowerShell 3.0 中引入的。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>-Value</source>
          <target state="translated">值</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Specifies the value of the property or method.</source>
          <target state="translated">指定属性或方法的值。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>If you add an <bpt id="p1">**</bpt>AliasProperty<ept id="p1">**</ept>, <bpt id="p2">**</bpt>CodeProperty<ept id="p2">**</ept>, <bpt id="p3">**</bpt>ScriptProperty<ept id="p3">**</ept>, or <bpt id="p4">**</bpt>CodeMethod<ept id="p4">**</ept> member, you can use the <bpt id="p5">**</bpt>SecondValue<ept id="p5">**</ept> parameter to add additional information..</source>
          <target state="translated">如果您添加 <bpt id="p1">**</bpt>AliasProperty<ept id="p1">**</ept>, ，<bpt id="p2">**</bpt>CodeProperty<ept id="p2">**</ept>, ，<bpt id="p3">**</bpt>ScriptProperty<ept id="p3">**</ept>, ，或 <bpt id="p4">**</bpt>CodeMethod<ept id="p4">**</ept> 成员，您可以使用 <bpt id="p5">**</bpt>SecondValue<ept id="p5">**</ept> 参数将添加的其他信息...</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Use this parameter with the <bpt id="p1">**</bpt>MemberName<ept id="p1">**</ept>, <bpt id="p2">**</bpt>MemberType<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Value<ept id="p3">**</ept> and <bpt id="p4">**</bpt>SecondValue<ept id="p4">**</ept> parameters to add or change a property or method of a type.</source>
          <target state="translated">使用此参数与 <bpt id="p1">**</bpt>MemberName<ept id="p1">**</ept>, ，<bpt id="p2">**</bpt>MemberType<ept id="p2">**</ept>, ，<bpt id="p3">**</bpt>值<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>SecondValue<ept id="p4">**</ept> 参数，以添加或更改属性或方法的类型。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此参数是在 Windows PowerShell 3.0 中引入的。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>-Confirm</source>
          <target state="translated">-Confirm</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Prompts you for confirmation before running the cmdlet.Prompts you for confirmation before running the cmdlet.</source>
          <target state="translated">将提示您在运行 cmdlet 前进行确认。将提示您在运行 cmdlet 前进行确认。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>-WhatIf</source>
          <target state="translated">-WhatIf</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Shows what would happen if the cmdlet runs.</source>
          <target state="translated">显示如果运行 cmdlet 则会发生什么情况。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The cmdlet is not run.Shows what would happen if the cmdlet runs.</source>
          <target state="translated">该 cmdlet 不会运行。显示在 cmdlet 运行时，会发生什么情况。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The cmdlet is not run.</source>
          <target state="translated">cmdlet 未运行。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">此 cmdlet 支持以下常见参数:-调试-ErrorAction、-ErrorVariable、-InformationAction、-InformationVariable、-OutVariable、-OutBuffer、-PipelineVariable、-Verbose、-WarningAction 和-WarningVariable。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">有关详细信息，请参阅 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">输入</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>System.String</source>
          <target state="translated">System.String</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>You can pipe a string that contains the values of the <bpt id="p1">**</bpt>AppendPath<ept id="p1">**</ept>, <bpt id="p2">**</bpt>TypeName<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>TypeData<ept id="p3">**</ept> parameters to <bpt id="p4">**</bpt>Update-TypeData<ept id="p4">**</ept>.</source>
          <target state="translated">您可以通过管道传递一个字符串，包含的值 <bpt id="p1">**</bpt>AppendPath<ept id="p1">**</ept>, ，<bpt id="p2">**</bpt>TypeName<ept id="p2">**</ept>, ，或 <bpt id="p3">**</bpt>TypeData<ept id="p3">**</ept> 参数 <bpt id="p4">**</bpt>Update-typedata<ept id="p4">**</ept>。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">输出</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">无</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>This cmdlet does not return any output.</source>
          <target state="translated">此 cmdlet 不返回任何输出。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">相关的链接</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>about_Types.ps1xml</source>
          <target state="translated">about_Types.ps1xml</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Get-TypeData</source>
          <target state="translated">Get-TypeData</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Remove-TypeData</source>
          <target state="translated">Remove-TypeData</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>