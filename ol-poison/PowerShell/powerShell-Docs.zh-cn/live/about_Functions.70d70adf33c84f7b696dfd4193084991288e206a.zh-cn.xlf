<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5b8e579930c6ff20a32be902992a0774b5ebfe89</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c28d666461edba01bcdd7b7831302554d8583c6d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cde7cb1dca8bcc02b87d8648daa30265095a6c75</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Functions</source>
          <target state="translated">about_Functions</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Functions</source>
          <target state="translated">有关函数</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Functions</source>
          <target state="translated">about_Functions</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Functions</source>
          <target state="translated">about_Functions</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">简短说明</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes how to create and use functions in Windows PowerShell.</source>
          <target state="translated">描述如何创建和使用 Windows PowerShell 中的函数。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">详细说明</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A function is a list of Windows PowerShell statements that has a name that you assign.</source>
          <target state="translated">函数是 Windows PowerShell 语句具有指定名称的列表。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When you run a function, you type the function name.</source>
          <target state="translated">当您运行一个函数时，您键入函数名称。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The statements in the list run as if you had typed them at the command prompt.</source>
          <target state="translated">在列表中的语句运行像在命令提示符下键入它们一样。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Functions can be as simple as:</source>
          <target state="translated">函数可以像一样简单︰</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>function Get-PowerShellProcess {Get-Process PowerShell}</source>
          <target state="translated">函数获取 PowerShellProcess {Get-process PowerShell}</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>or as complex as a cmdlet or an application program.</source>
          <target state="translated">也像 cmdlet 或应用程序一样复杂。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Like cmdlets, functions can have parameters.</source>
          <target state="translated">Cmdlet，如函数可以具有参数。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The parameters can be named, positional, switch, or dynamic parameters.</source>
          <target state="translated">这些参数可以是命名、 位置、 交换机或动态参数。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Function parameters can be read from the command line or from the pipeline.</source>
          <target state="translated">可以从命令行或从管道读取函数参数。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Functions can return values that can be displayed, assigned to variables, or passed to other functions or cmdlets.</source>
          <target state="translated">函数会返回值，可以显示、 分配给变量，或传递给其他函数或 cmdlet。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The function's statement list can contain different types of statement lists with the keywords Begin, Process, and End.</source>
          <target state="translated">该函数的语句列表可以包含不同类型的与关键字 Begin、 Process 和 End 语句列表。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These statement lists handle input from the pipeline differently.</source>
          <target state="translated">这些语句列表以不同方式处理来自管道的输入。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A filter is a special kind of function that uses the Filter keyword.</source>
          <target state="translated">筛选器是函数的一种特殊，它使用筛选器关键字。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Functions can also act like cmdlets.</source>
          <target state="translated">行为的函数还可以与 cmdlets 类似。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can create a function that works just like a cmdlet without using C# programming.</source>
          <target state="translated">您可以创建一个函数，而无需使用 C# 编程的工作方式与 cmdlet。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see about_Functions_Advanced (http://go.microsoft.com/fwlink/?LinkID=144511).</source>
          <target state="translated">有关详细信息，请参阅 about_Functions_Advanced (http://go.microsoft.com/fwlink/?LinkID=144511)。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Syntax The following is the syntax for a function:</source>
          <target state="translated">下面的语法是函数的语法︰</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>function [&lt;scope:&gt;]<ph id="ph1">&lt;name&gt;</ph> [([type]$parameter1[,[type]$parameter2])] { param([type]$parameter1 [,[type]$parameter2])</source>
          <target state="translated">函数 [&lt; 作用域︰ &gt;]<ph id="ph1">&lt;name&gt;</ph> [([type]$parameter1[,[type]$parameter2])] {param ([type] $parameter1 [，[type] $parameter2])</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>dynamicparam {<ph id="ph1">&lt;statement list&gt;</ph>}</source>
          <target state="translated">dynamicparam {<ph id="ph1">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>begin {<ph id="ph1">&lt;statement list&gt;</ph>} process {<ph id="ph2">&lt;statement list&gt;</ph>} end {<ph id="ph3">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">开始 {<ph id="ph1">&lt;statement list&gt;</ph>} 流程 {<ph id="ph2">&lt;statement list&gt;</ph>} 最终 {<ph id="ph3">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A function includes the following items:</source>
          <target state="translated">功能包括以下各项︰</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A Function keyword</source>
          <target state="translated">Function 关键字</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A scope (optional)</source>
          <target state="translated">（可选） 一个作用域</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A name that you select</source>
          <target state="translated">您选择的名称</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Any number of named parameters (optional)</source>
          <target state="translated">任意数量的已命名参数 （可选）</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>One or more Windows PowerShell commands enclosed in braces ({})</source>
          <target state="translated">一个或多个 Windows PowerShell 命令括在大括号 （{}）</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information about the Dynamicparam keyword and dynamic parameters in functions, see about_Functions_Advanced_Parameters.</source>
          <target state="translated">有关 Dynamicparam 关键字和函数中的动态参数的详细信息，请参阅 about_Functions_Advanced_Parameters。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Simple Functions Functions do not have to be complicated to be useful.</source>
          <target state="translated">简单函数的函数不需要很复杂很有用。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The simplest functions have the following format:</source>
          <target state="translated">最简单的函数具有以下格式︰</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>function &lt;function-name&gt; {statements}</source>
          <target state="translated">函数 &lt; 函数名称 &gt; {语句}</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, the following function starts Windows PowerShell with the Run as Administrator option.</source>
          <target state="translated">例如，以下函数启动 Windows PowerShell 与运行作为管理员选项。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>function Start-PSAdmin {Start-Process PowerShell -Verb RunAs}</source>
          <target state="translated">函数开始 PSAdmin {Start-process PowerShell-Verb RunAs}</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To use the function, type: Start-PSAdmin</source>
          <target state="translated">若要使用函数，请键入︰ 开始 PSAdmin</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To add statements to the function, use a semi-colon (;) to separate the statements, or type each statement on a separate line.</source>
          <target state="translated">若要将语句添加到该函数，使用分号 （;） 分隔语句，或在单独一行上键入每个语句。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For example, the following function finds all .jpg files in the current user's directories that were changed after the start date.</source>
          <target state="translated">例如，以下函数的开始日期之后发生更改的当前用户的目录中查找所有.jpg 文件。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>function Get-NewPix { $start = Get-Date -Month 1 -Day 1 -Year 2010 $allpix = Get-ChildItem -Path $env:UserProfile<ph id="ph1">\*</ph>.jpg -Recurse $allpix | where {$_.LastWriteTime -gt $Start} }</source>
          <target state="translated">函数获取 NewPix {$start = Get-date-Month 1-一天 1-2010 年 $allpix = Get-childitem-路径 $env︰ 用户配置文件<ph id="ph1">\*</ph>.jpg-Recurse $allpix | 其中 {$_。LastWriteTime-gt $Start}}</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can create a toolbox of useful small functions.</source>
          <target state="translated">您可以创建一个工具箱，有用的小函数。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Add these functions to your Windows PowerShell profile, as described in about_Profiles and later in this topic.</source>
          <target state="translated">说明在 about_Profiles，本主题中后面，添加到 Windows PowerShell 配置文件，这些函数。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Function Names You can assign any name to a function, but functions that you share with others should follow the naming rules that have been established for all Windows PowerShell commands.</source>
          <target state="translated">函数名称您可以将任何名称分配给一个函数，但与其他人共享的函数应遵循已建立的所有 Windows PowerShell 命令的命名规则。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Functions names should consist of a verb-noun pair in which the verb identifies the action that the function performs and the noun identifies the item on which the cmdlet performs its action.</source>
          <target state="translated">函数名称应包含一个动词-名词对在其中谓词标识此函数将执行的操作和名词标识该 cmdlet 将在其执行其操作的项。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Functions should use the standard verbs that have been approved for all Windows PowerShell commands.</source>
          <target state="translated">函数应使用已批准的标准谓词的所有 Windows PowerShell 命令。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>These verbs help us to keep our command names simple, consistent, and easy for users to understand.</source>
          <target state="translated">这些谓词帮助我们简单、 一致且便于用户理解让我们命令的名称。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information about the standard Windows PowerShell verbs, see "Cmdlet Verbs" on MSDN at http://go.microsoft.com/fwlink/?LinkID=160773.</source>
          <target state="translated">有关标准 Windows PowerShell 谓词的详细信息，请参阅"Cmdlet 谓词"MSDN 上在 http://go.microsoft.com/fwlink/?LinkID=160773。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Functions with Parameters You can use parameters with functions, including named parameters, positional parameters, switch parameters, and dynamic parameters.</source>
          <target state="translated">函数与参数您可以将参数用于函数，其中包括命名的参数、 位置参数、 交换机参数和动态参数。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more information about dynamic parameters in functions, see about_Functions_Advanced_Parameters (http://go.microsoft.com/fwlink/?LinkID=135173).</source>
          <target state="translated">有关在函数中的动态参数的详细信息，请参阅 about_Functions_Advanced_Parameters (http://go.microsoft.com/fwlink/?LinkID=135173)。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Named Parameters You can define any number of named parameters.</source>
          <target state="translated">命名参数您可以定义任意多个命名参数。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can include a default value for named parameters, as described later in this topic.</source>
          <target state="translated">如本主题后面所述，可以包括命名参数的默认值。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can define parameters inside the braces using the Param keyword, as shown in the following sample syntax:</source>
          <target state="translated">您可以定义使用 Param 关键字的大括号内的参数，如下面的语法示例中所示︰</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>function <ph id="ph1">&lt;name&gt;</ph> { param ([type]$parameter1[,[type]$parameter2]) <ph id="ph2">&lt;statement list&gt;</ph> }</source>
          <target state="translated">函数 <ph id="ph1">&lt;name&gt;</ph> {param ([type]$parameter1[,[type]$parameter2]) <ph id="ph2">&lt;statement list&gt;</ph> }</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can also define parameters outside the braces without the Param keyword, as shown in the following sample syntax:</source>
          <target state="translated">您还可以定义没有 Param 关键字时，大括号之外的参数，如下面的语法示例中所示︰</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>function <ph id="ph1">&lt;name&gt;</ph> [([type]$parameter1[,[type]$parameter2])] { <ph id="ph2">&lt;statement list&gt;</ph> }</source>
          <target state="translated">函数 <ph id="ph1">&lt;name&gt;</ph> [([type]$parameter1[,[type]$parameter2])] { <ph id="ph2">&lt;statement list&gt;</ph> }</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>There is no difference between these two methods.</source>
          <target state="translated">这两种方法之间没有区别。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Use the method that you prefer.</source>
          <target state="translated">使用您喜欢的方法。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>When you run the function, the value you supply for a parameter is assigned to a variable that contains the parameter name.</source>
          <target state="translated">当您运行该函数时，为参数提供的值被分配给包含参数名称的变量。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The value of that variable can be used in the function.</source>
          <target state="translated">可以在函数中使用该变量的值。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following example is a function called Get-SmallFiles.</source>
          <target state="translated">下面的示例是一个名为 Get SmallFiles 函数。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This function has a $size parameter.</source>
          <target state="translated">此函数具有 $size 参数。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The function displays all the files that are smaller than the value of the $size parameter, and it excludes directories:</source>
          <target state="translated">该函数将显示小于 $size 参数的值的所有文件和排除目录︰</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>function Get-SmallFiles { param ($size) Get-ChildItem c:\ | where {$.Length -lt $Size -and !$.PSIsContainer} }</source>
          <target state="translated">函数获取 SmallFiles {param ($size) 的 Get-childitem c:\ | 其中 {$。长度-lt $Size-和 ！ $。PSIsContainer}}</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In the function, you can use the $size variable, which is the name defined for the parameter.</source>
          <target state="translated">在函数中，您可以使用 $size 变量，即为参数定义的名称。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To use this function, type the following command:</source>
          <target state="translated">若要使用此函数，请键入以下命令︰</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; function Get-SmallFiles –Size 50</source>
          <target state="translated">C:\PS &gt; 函数 Get SmallFiles – 大小 50</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You can also enter a value for a named parameter without the parameter name.</source>
          <target state="translated">您还可以为不包含参数名称命名的参数输入一个值。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For example, the following command gives the same result as a command that names the Size parameter:</source>
          <target state="translated">例如，以下命令会将提供与名称大小参数的命令相同的结果︰</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; function Get-SmallFiles 50</source>
          <target state="translated">C:\PS &gt; 函数 Get SmallFiles 50</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To define a default value for a parameter, type an equal sign and the value after the parameter name, as shown in the following variation of the Get-SmallFiles example:</source>
          <target state="translated">若要定义参数的默认值，键入一个等号和值在参数名称之后，如下面的示例变体 Get SmallFiles 中所示︰</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>function Get-SmallFiles ($size = 100) { Get-ChildItem c:\ | where {$.Length -lt $Size -and !$.PSIsContainer} }</source>
          <target state="translated">函数获取 SmallFiles ($size = 100) {Get-childitem c:\ | 其中 {$。长度-lt $Size-和 ！ $。PSIsContainer}}</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If you type "Get-SmallFiles" without a value, the function assigns 100 to $size.</source>
          <target state="translated">如果不带值键入"Get SmallFiles"，该函数将分配到 $size 100。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If you provide a value, the function uses that value.</source>
          <target state="translated">如果你提供一个值，该函数将使用该值。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Optionally, you can provide a brief help string that describes the default value of your parameter, by adding the PSDefaultValue attribute to the description of your parameter, and specifying the Help property of PSDefaultValue.</source>
          <target state="translated">或者，您可以提供一个简要的帮助字符串，通过将 PSDefaultValue 特性添加到您参数的说明，并指定 PSDefaultValue 的 Help 属性描述参数，默认值。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>To provide a help string that describes the default value (100) of the Size parameter in the Get-SmallFiles function, add the PSDefaultValue attribute as shown in the following example.</source>
          <target state="translated">若要提供描述 Get SmallFiles 函数中的大小参数的默认值 (100) 的帮助字符串，请添加 PSDefaultValue 属性，如下面的示例中所示。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>function Get-SmallFiles { param ( [PSDefaultValue(Help = '100')] $size = 100</source>
          <target state="translated">函数获取 SmallFiles {param ([PSDefaultValue (帮助 = '100')] $size = 100</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For more information about the PSDefaultValue attribute class, see PSDefaultValue Attribute Members on MSDN.</source>
          <target state="translated">有关 PSDefaultValue 属性类的详细信息，请参阅 MSDN 上的 PSDefaultValue 属性成员。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>(http://msdn.microsoft.com/library/windows/desktop/system.management.automation.psdefaultvalueattribute_members(v=vs.85).aspx</source>
          <target state="translated">(http://msdn.microsoft.com/library/windows/desktop/system.management.automation.psdefaultvalueattribute_members (v=vs.85).aspx</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Positional Parameters A positional parameter is a parameter without a parameter name.</source>
          <target state="translated">位置参数的位置参数是一个不包含参数名称的参数。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Windows PowerShell uses the parameter value order to associate each parameter value with a parameter in the function.</source>
          <target state="translated">Windows PowerShell 使用参数值顺序来将每个参数值与函数中参数相关联。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When you use positional parameters, type one or more values after the function name.</source>
          <target state="translated">当您使用位置参数时，则函数名称后键入一个或多个值。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Positional parameter values are assigned to the $args array variable.</source>
          <target state="translated">位置参数将值赋给 $args 数组变量。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The value that follows the function name is assigned to the first position in the $args array, $args[0].</source>
          <target state="translated">跟在函数名称之后的值分配给 $args 数组，$args [0] 中的第一个位置。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The following Get-Extension function adds the .txt file name extension to a file name that you supply:</source>
          <target state="translated">下面的 Get 扩展函数会为您提供的文件名添加.txt 文件扩展名︰</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>function Get-Extension { $name = $args[0] + ".txt" $name }</source>
          <target state="translated">函数获取扩展 {$name = $args [0] +".txt"$name}</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Get-Extension myTextFile myTextFile.txt</source>
          <target state="translated">C:\PS &gt; Get 扩展 myTextFile myTextFile.txt</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Switch Parameters A switch is a parameter that does not require a value.</source>
          <target state="translated">开关参数 A 开关是不需要值的参数。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Instead, you type the function name followed by the name of the switch parameter.</source>
          <target state="translated">相反，您键入函数名称后跟开关参数的名称。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>To define a switch parameter, specify the type [switch] before the parameter name, as shown in the following example:</source>
          <target state="translated">若要定义一个开关参数，指定的类型 [交换机] 的参数名称前面，如下面的示例中所示︰</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>function Switch-Item { param ([switch]$on) if ($on) { "Switch on" } else { "Switch off" } }</source>
          <target state="translated">函数切换项 {param （[交换机] $上的） 如果 （对 $） {"开启"} else {"关闭"}}</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>When you type the On switch parameter after the function name, the function displays "Switch on".</source>
          <target state="translated">当函数名称后键入 On 开关参数时，则此函数会显示"开关"。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Without the switch parameter, it displays "Switch off".</source>
          <target state="translated">如果不使用开关参数，它将显示"关闭"。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Switch-Item -on Switch on</source>
          <target state="translated">C:\PS &gt; 开关项-在交换机上</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Switch-Item Switch off</source>
          <target state="translated">C:\PS &gt; 开关项开关设置为 off</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You can also assign a Boolean value to a switch when you run the function, as shown in the following example:</source>
          <target state="translated">也可以分配一个布尔值开关时运行该函数，如下面的示例中所示︰</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Switch-Item -on:$true Switch on</source>
          <target state="translated">C:\PS &gt; 切换项的上︰ $true 开关</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Switch-Item -on:$false Switch off</source>
          <target state="translated">C:\PS &gt; 切换项的上︰ $false 关闭</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Using Splatting to Represent Command Parameters You can use splatting to represent the parameters of a command.</source>
          <target state="translated">使用展开到表示命令参数您可以使用展开表示命令的参数。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This feature is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此功能是 Windows PowerShell 3.0 中引入的。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Use this technique in functions that call commands in the session.</source>
          <target state="translated">在会话中调用命令的函数中使用此方法。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>You do not need to declare or enumerate the command parameters, or change the function when command parameters change.</source>
          <target state="translated">不要需要声明或枚举中的命令参数，或当命令参数更改时更改的函数。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The following sample function calls the Get-Command cmdlet.</source>
          <target state="translated">下面的示例函数调用的 Get-command cmdlet。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The command uses @Args to represent the parameters of Get-Command.</source>
          <target state="translated">该命令使用 @Args 来表示 Get 命令的参数。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>function Get-MyCommand { Get-Command @Args }</source>
          <target state="translated">函数获取 MyCommand {Get 命令 @Args}</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>You can use all of the parameters of Get-Command when you call the Get-MyCommand function.</source>
          <target state="translated">当您调用 Get MyCommand 函数，您可以使用所有 Get 命令的参数。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The parameters and parameter values are passed to the command using @Args.</source>
          <target state="translated">在命令中用 @Args 到传递参数和参数值。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>PS C:&gt;Get-MyCommand -Name Get-ChildItem CommandType     Name                ModuleName</source>
          <target state="translated">PS c: &gt; Get MyCommand-命名的 Get-childitem CommandType 名称 ModuleName</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Cmdlet          Get-ChildItem       Microsoft.PowerShell.Management</source>
          <target state="translated">Cmdlet 的 Get-childitem Microsoft.PowerShell.Management</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The @Args feature uses the $Args automatic parameter, which represents undeclared cmdlet parameters and values from remaining arguments.</source>
          <target state="translated">@Args 功能使用了 $Args 自动参数，它表示未声明的 cmdlet 参数和值从其余的参数。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For more information about splatting, see about_Splatting (http://go.microsoft.com/fwlink/?LinkId=262720).</source>
          <target state="translated">展开的详细信息，请参阅 about_Splatting (http://go.microsoft.com/fwlink/?LinkId=262720)。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Piping Objects to Functions Any function can take input from the pipeline.</source>
          <target state="translated">管道对象传递给函数的任何函数可以通过管道输入。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You can control how a function processes input from the pipeline using Begin, Process, and End keywords.</source>
          <target state="translated">您可以控制一个函数如何处理从使用 Begin、 Process 和 End 关键字管道的输入。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The following sample syntax shows the three keywords:</source>
          <target state="translated">下面的示例语法演示了三个关键字︰</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>function <ph id="ph1">&lt;name&gt;</ph> { begin {<ph id="ph2">&lt;statement list&gt;</ph>} process {<ph id="ph3">&lt;statement list&gt;</ph>} end {<ph id="ph4">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">函数 <ph id="ph1">&lt;name&gt;</ph> {开始 {<ph id="ph2">&lt;statement list&gt;</ph>} 流程 {<ph id="ph3">&lt;statement list&gt;</ph>} 最终 {<ph id="ph4">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The Begin statement list runs one time only, at the beginning of the function.</source>
          <target state="translated">Begin 语句列表仅运行一次，该函数的开头。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The Process statement list runs one time for each object in the pipeline.</source>
          <target state="translated">过程语句列表在管道中运行的每个对象的一次。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>While the Process block is running, each pipeline object is assigned to the $_ automatic variable, one pipeline object at a time.</source>
          <target state="translated">在运行时的 Process 块，每个管道对象分配给 $_ automatic 变量，一个管道对象一次。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>After the function receives all the objects in the pipeline, the End statement list runs one time.</source>
          <target state="translated">该函数将管道中接收的所有对象后，结束语句列表运行一次。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If no Begin, Process, or End keywords are used, all the statements are treated like an End statement list.</source>
          <target state="translated">如果使用没有 Begin、 进程或最终的关键字，则所有语句都一样结束语句列表。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The following function uses the Process keyword.</source>
          <target state="translated">以下函数使用 Process 关键字。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The function displays examples from the pipeline:</source>
          <target state="translated">该函数将显示在管道中的示例︰</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>function Get-Pipeline { process {"The value is: $_"} }</source>
          <target state="translated">函数获取管道 {过程 {"的值是: $_"}}</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>To demonstrate this function, enter an list of numbers separated by commas, as shown in the following example:</source>
          <target state="translated">为了演示此函数，请输入数字用逗号分隔的列表，如下面的示例中所示︰</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 1,2,4 | Get-Pipeline The value is: 1 The value is: 2 The value is: 4</source>
          <target state="translated">C:\PS &gt; 1,2,4 |获取管道的值是︰ 1 的值是︰ 2 的值︰ 4</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>When you use a function in a pipeline, the objects piped to the function are assigned to the $input automatic variable.</source>
          <target state="translated">当您在管道中使用一个函数时，通过管道传递给函数的对象分配给 $input 自动变量。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The function runs statements with the Begin keyword before any objects come from the pipeline.</source>
          <target state="translated">任何对象均来自管道之前，该函数使用 Begin 关键字运行语句。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The function runs statements with the End keyword after all the objects have been received from the pipeline.</source>
          <target state="translated">后已经从管道接收的所有对象，该函数使用 End 关键字运行语句。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The following example shows the $input automatic variable with Begin and End keywords.</source>
          <target state="translated">下面的示例演示使用 Begin 和 End 关键字 $input 自动变量。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>function Get-PipelineBeginEnd { begin {"Begin: The input is $input"} end {"End:   The input is $input" } }</source>
          <target state="translated">函数获取 PipelineBeginEnd {开始 {"Begin︰ 输入是 $input"} 最终 {"结束︰ 输入是 $input"}}</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>If this function is run by using the pipeline, it displays the following results:</source>
          <target state="translated">如果通过使用管道运行此函数，则它将显示以下结果︰</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 1,2,4 | Get-PipelineBeginEnd Begin: The input is End:   The input is 1 2 4</source>
          <target state="translated">C:\PS &gt; 1,2,4 |Get PipelineBeginEnd 开始︰ 输入是结束︰ 输入是 1 2 4</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>When the Begin statement runs, the function does not have the input from the pipeline.</source>
          <target state="translated">Begin 语句运行时，该函数并没有从管道的输入。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The End statement runs after the function has the values.</source>
          <target state="translated">End 语句运行后函数具有的值。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>If the function has a Process keyword, the function reads the data in $input.</source>
          <target state="translated">如果函数具有 Process 关键字，此函数将读取 $input 中的数据。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The following example has a Process statement list:</source>
          <target state="translated">下面的示例有一个进程语句列表︰</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>function Get-PipelineInput { process {"Processing:  $_ " } end {"End:   The input is: $input" } }</source>
          <target state="translated">函数获取 PipelineInput {过程 {"处理: $_"} 最终 {"结束︰ 输入是︰ $input"}}</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>In this example, each object that is piped to the function is sent to the Process statement list.</source>
          <target state="translated">在此示例中，通过管道传递给函数的每个对象发送到的进程语句列表。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The Process statements run on each object, one object at a time.</source>
          <target state="translated">过程语句在每个对象上运行一次一个对象。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The $input automatic variable is empty when the function reaches the End keyword.</source>
          <target state="translated">当函数达到 End 关键字，$input 自动变量为空。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 1,2,4 | Get-PipelineInput Processing:  1 Processing:  2 Processing:  4 End:   The input is:</source>
          <target state="translated">C:\PS &gt; 1,2,4 |Get PipelineInput 处理︰ 1 处理︰ 2 处理︰ 4 端︰ 输入是︰</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Filters A filter is a type of function that runs on each object in the pipeline.</source>
          <target state="translated">筛选器的筛选器是函数的一种在管道中的每个对象运行类型。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>A filter resembles a function with all its statements in a Process block.</source>
          <target state="translated">筛选器类似于具有 Process 块中的所有其声明的函数。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The syntax of a filter is as follows:</source>
          <target state="translated">筛选器的语法是，如下所示︰</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>filter [&lt;scope:&gt;]<ph id="ph1">&lt;name&gt;</ph> {<ph id="ph2">&lt;statement list&gt;</ph>}</source>
          <target state="translated">筛选器 [&lt; 作用域︰ &gt;]<ph id="ph1">&lt;name&gt;</ph> {<ph id="ph2">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The following filter takes log entries from the pipeline and then displays either the whole entry or only the message portion of the entry:</source>
          <target state="translated">下面的筛选器将管道中的日志条目，然后显示整个项或条目的消息部分︰</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>filter Get-ErrorLog ([switch]$message) { if ($message) { out-host -inputobject $<bpt id="p1">_</bpt>.Message } else { $<ept id="p1">_</ept> } }</source>
          <target state="translated">筛选 Get 错误日志 （[交换机] $message） {如果 ($message) {out-host-inputobject $<bpt id="p1">_</bpt>。消息} else {$<ept id="p1">_</ept> }}</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Function Scope A function exists in the scope in which it was created.</source>
          <target state="translated">在其中创建该范围中存在的函数范围的函数。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If a function is part of a script, the function is available to statements within that script.</source>
          <target state="translated">如果函数是脚本的一部分，该函数是可供在该脚本内的语句。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>By default, a function in a script is not available at the command prompt.</source>
          <target state="translated">默认情况下，函数在脚本中的不可用的命令提示符处。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>You can specify the scope of a function.</source>
          <target state="translated">您可以指定函数的作用域。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>For example, the function is added to the global scope in the following example:</source>
          <target state="translated">例如，该函数将添加到全局作用域在下面的示例︰</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>function global:Get-DependentSvs { Get-Service | where {$_.DependentServices} }</source>
          <target state="translated">全局函数︰ Get DependentSvs {Get-service | 其中 {$_。DependentServices}}</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>When a function is in the global scope, you can use the function in scripts, in functions, and at the command line.</source>
          <target state="translated">当一个函数是在全局范围中时，您可以在脚本中，在函数中，并在命令行使用函数。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Functions normally create a scope.</source>
          <target state="translated">函数通常用来创建一个作用域。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The items created in a function, such as variables, exist only in the function scope.</source>
          <target state="translated">仅在函数范围中存在的函数 （如变量） 中, 创建的项目。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>For more information about scope in Windows PowerShell, see about_Scopes (http://go.microsoft.com/fwlink/?LinkID=113260).</source>
          <target state="translated">有关 Windows PowerShell 中的作用域的详细信息，请参阅 about_Scopes (http://go.microsoft.com/fwlink/?LinkID=113260)。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Finding and Managing Functions Using the Function: Drive All the functions and filters in Windows PowerShell are automatically stored in the Function: drive.</source>
          <target state="translated">查找和管理功能使用该函数︰ 驱动器所有函数和 Windows PowerShell 中的筛选器将自动存储在函数中︰ 驱动器。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>This drive is exposed by the Windows PowerShell Function provider.</source>
          <target state="translated">此驱动器由 Windows PowerShell Function 提供程序公开。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>When referring to the Function: drive, type a colon after Function, just as you would do when referencing the C or D drive of a computer.</source>
          <target state="translated">在引用该函数时︰ 驱动器中，键入一个冒号函数之后，像您那样在引用计算机的 C 或 D 驱动器时。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The following command displays all the functions in the current session of Windows PowerShell:</source>
          <target state="translated">下面的命令显示当前的 Windows PowerShell 会话中的所有函数︰</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Get-ChildItem function:</source>
          <target state="translated">Get-childitem 函数︰</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The commands in the function are stored as a script block in the definition property of the function.</source>
          <target state="translated">在函数中的命令存储为该函数的 definition 属性中的脚本块。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>For example, to display the commands in the Help function that comes with Windows PowerShell, type:</source>
          <target state="translated">例如，若要显示在 Help 函数使用 Windows PowerShell 附带的命令，请键入︰</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>(Get-ChildItem function:help).Definition</source>
          <target state="translated">（Get-childitem 函数︰ 帮助）。定义</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>For more information about the Function: drive, see the help topic for the Function provider.</source>
          <target state="translated">有关函数的详细信息︰ 驱动器，请参阅 Function 提供程序的帮助主题。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Type "Get-Help Function" or view it in the TechNet Library at http://go.microsoft.com/fwlink/?LinkID=113436.</source>
          <target state="translated">键入"Get-help 函数"或查看 http://go.microsoft.com/fwlink/?LinkID=113436 的 TechNet Library 中。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Reusing Functions in New Sessions When you type a function at the Windows PowerShell command prompt, the function becomes part of the current session.</source>
          <target state="translated">在一个函数键入 Windows PowerShell 命令提示符下的新会话中重用的函数，函数将成为当前会话的一部分。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>It is available until the session ends.</source>
          <target state="translated">在会话结束之前，它才可用。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>To use your function in all Windows PowerShell sessions, add the function to your Windows PowerShell profile.</source>
          <target state="translated">若要在所有 Windows PowerShell 会话中使用您的函数，请将函数添加到 Windows PowerShell 配置文件。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For more information about profiles, see about_Profiles (http://go.microsoft.com/fwlink/?LinkID=113729).</source>
          <target state="translated">有关配置文件的详细信息，请参阅 about_Profiles (http://go.microsoft.com/fwlink/?LinkID=113729)。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>You can also save your function in a Windows PowerShell script file.</source>
          <target state="translated">您还可以在 Windows PowerShell 脚本文件中保存您的函数。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Type your function in a text file, and then save the file with the .ps1 file name extension.</source>
          <target state="translated">在文本文件中，键入您的函数，然后以.ps1 文件扩展名保存文件。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Writing Help for Functions The Get-Help cmdlet gets help for functions, as well as for cmdlets, providers, and scripts.</source>
          <target state="translated">对于函数的 Get-help cmdlet 编写帮助获取帮助对于函数，以及为 cmdlet、 提供商和脚本。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>To get help for a function, type Get-Help followed by the function name.</source>
          <target state="translated">若要获取函数的帮助，请键入 Get-help 跟函数名。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>For example, to get help for the Get-MyDisks function, type:</source>
          <target state="translated">例如，若要获取 MyDisks 函数获取帮助，请键入︰</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Get-Help Get-MyDisks</source>
          <target state="translated">获取帮助 Get MyDisks</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>You can write help for a function by using either of the two following methods:</source>
          <target state="translated">您可以使用两个以下方法之一来编写函数的帮助︰</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>--  Comment-Based Help  for Functions</source>
          <target state="translated">-基于注释的帮助函数</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Create a help topic by using special keywords in the comments.</source>
          <target state="translated">通过在注释中使用特殊关键字创建一个帮助主题。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>To create comment-based help for a function, the comments must be placed at the beginning or end of the function body or on the lines preceding the function keyword.</source>
          <target state="translated">若要创建基于注释的帮助函数，必须将注释放置开头或结尾的函数体，或者在前面 function 关键字的行。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>For more information about comment-based help, see about_Comment_Based_Help.</source>
          <target state="translated">有关基于注释的帮助的详细信息，请参阅 about_Comment_Based_Help。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>--  XML-Based Help  for Functions</source>
          <target state="translated">-基于 XML 的函数的帮助</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Create an XML-based help topic, such as the type that is typically created for cmdlets.</source>
          <target state="translated">创建基于 XML 的帮助主题，例如通常为 cmdlet 创建的类型。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>XML-based help is required if you are localizing help topics into multiple languages.</source>
          <target state="translated">基于 XML 的帮助是必需的如果您要本地化为多种语言的帮助主题。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>To associate the function with the XML-based help topic, use the .ExternalHelp comment-based help keyword.</source>
          <target state="translated">若要将该函数的基于 XML 的帮助主题与相关联，请使用。ExternalHelp 基于注释的帮助关键字。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Without this keyword, Get-Help cannot find the function help topic and calls to Get-Help for the function return only auto-generated help.</source>
          <target state="translated">没有此关键字时，获取帮助找不到函数的帮助主题和获取帮助对函数的调用会返回仅自动生成的帮助。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>For more information about the ExternalHelp keyword, see about_Comment_Based_Help.</source>
          <target state="translated">有关 ExternalHelp 关键字的详细信息，请参阅 about_Comment_Based_Help。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>For more information about XML-based help, see "How to Write Cmdlet Help" in MSDN.</source>
          <target state="translated">有关基于 XML 的帮助的详细信息，请参阅"如何编写 Cmdlet 帮助"在 MSDN 中。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>about_Automatic_Variables about_Comment_Based_Help about_Functions_Advanced about_Functions_Advanced_Methods about_Functions_Advanced_Parameters about_Functions_CmdletBindingAttribute about_Functions_OutputTypeAttribute about_Parameters about_Profiles about_Scopes about_Script_Blocks Function (provider)</source>
          <target state="translated">about_Automatic_Variables about_Comment_Based_Help about_Functions_Advanced about_Functions_Advanced_Methods about_Functions_Advanced_Parameters about_Functions_CmdletBindingAttribute about_Functions_OutputTypeAttribute about_Parameters about_Profiles about_Scopes about_Script_Blocks 函数 （提供程序）</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>