<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c515eb55a24c380f3a2c78793d4d33bba5eb4d41</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Jobs.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8889ef0e8f1b432489eb70cc91365cf9a55be368</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7148fd6a31045bc405e21fb68c7a8c1241c2030f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Jobs</source>
          <target state="translated">about_Jobs</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Jobs</source>
          <target state="translated">关于作业</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Jobs</source>
          <target state="translated">about_Jobs</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Jobs</source>
          <target state="translated">about_Jobs</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">简短说明</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Provides information about how Windows PowerShell background jobs run a command or expression in the background without interacting with the current session.</source>
          <target state="translated">提供有关如何 Windows PowerShell 后台作业的命令或表达式在后台运行而无需与当前会话进行交互的信息。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">详细说明</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This topic explains how to run background jobs in Windows PowerShell on a local computer.</source>
          <target state="translated">本主题说明如何在本地计算机上 Windows PowerShell 中运行后台作业。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For information about running background jobs on remote computers, see about_Remote_Jobs.</source>
          <target state="translated">有关在远程计算机上运行后台作业的信息，请参阅 about_Remote_Jobs。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When you start a background job, the command prompt returns immediately, even if the job takes an extended time to complete.</source>
          <target state="translated">当您启动后台作业时，命令提示符下立即返回，即使此作业需要较长的时间才能完成。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can continue to work in the session without interruption while the job runs.</source>
          <target state="translated">当该作业运行时，你可以继续在此会话中工作而不会发生中断。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>THE JOB CMDLETS</source>
          <target state="translated">JOB CMDLET</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Start-Job        Starts a background job on a local computer.</source>
          <target state="translated">启动作业启动后台作业在本地计算机上。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Get-Job          Gets the background jobs that were started in the current session.</source>
          <target state="translated">获取作业获取在当前会话中启动的后台作业。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Receive-Job      Gets the results of background jobs.</source>
          <target state="translated">获取接收作业的后台作业的结果。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Stop-Job         Stops a background job.</source>
          <target state="translated">停止作业将停止后台作业。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Wait-Job         Suppresses the command prompt until one or all jobs are complete.</source>
          <target state="translated">等待作业禁止显示命令提示符处，直到一个或所有作业都已完成。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Remove-Job       Deletes a background job.</source>
          <target state="translated">删除作业中删除后台作业。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Invoke-Command   The AsJob parameter runs any command as a background job on a remote computer.</source>
          <target state="translated">调用命令 AsJob 参数在远程计算机上作为后台作业运行任何命令。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can also use Invoke-Command to run any job command remotely, including a Start-Job command.</source>
          <target state="translated">您可以还使用 Invoke-command 来远程运行任何作业命令，包括 Start-job 命令。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>HOW TO START A JOB ON THE LOCAL COMPUTER</source>
          <target state="translated">如何在本地计算机上启动作业</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To start a background job on the local computer, use the Start-Job cmdlet.</source>
          <target state="translated">若要在本地计算机上启动后台作业，请使用 Start-job cmdlet。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To write a Start-Job command, enclose the command that the job runs in braces ( { } ).</source>
          <target state="translated">若要编写 Start-job 命令，将括在大括号 （{}） 中运行该作业的命令。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Use the ScriptBlock parameter to specify the command.</source>
          <target state="translated">使用 ScriptBlock 参数来指定的命令。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following command starts a background job that runs a Get-Process command on the local computer.</source>
          <target state="translated">以下命令启动本地计算机运行 Get-process 命令的后台作业。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Start-Job -ScriptBlock {Get-Process}</source>
          <target state="translated">开始作业-ScriptBlock {Get-process}</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The Start-Job command returns an object that represents the job.</source>
          <target state="translated">Start-job 命令返回一个对象，表示该作业。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The job object contains useful information about the job, but it does not contain the job results.</source>
          <target state="translated">作业对象包含有关该作业的有用信息，但是不包含作业结果。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Save the job object in a variable, and then use it with the other Job cmdlets to manage the background job.</source>
          <target state="translated">将作业对象保存在变量中，并将其与其他作业 cmdlet 来管理后台作业。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following command starts a job object and saves the resulting job object in the $job variable.</source>
          <target state="translated">以下命令启动一个作业对象，并将生成的作业对象保存在 $job 变量。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>$job = Start-Job -ScriptBlock {Get-Process}</source>
          <target state="translated">$job = 开始作业-ScriptBlock {Get-process}</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can also use the Get-Job cmdlet to get objects that represent the jobs started in the current session.</source>
          <target state="translated">您还可以使用 Get-job cmdlet 获取的对象，表示在当前会话中启动的作业。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Get-Job returns the same job object that Start-Job returns.</source>
          <target state="translated">Get-job 返回相同的作业对象启动作业返回。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>GETTING JOB OBJECTS</source>
          <target state="translated">获取作业对象</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To get object that represent the background jobs that were started in the current session, use the Get-Job cmdlet.</source>
          <target state="translated">若要获取表示在当前会话中启动的后台作业的对象，请使用 Get-job cmdlet。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Without parameters, Get-Job returns all of the jobs that were started in the current session.</source>
          <target state="translated">不带参数，Get-job 返回所有当前会话中启动的作业。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, the following command gets the jobs in the current session.</source>
          <target state="translated">例如，以下命令将获取当前会话中的作业。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>PS C:&gt;Get-Job</source>
          <target state="translated">PS c: &gt; 获取作业</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Id  Name  PSJobTypeName State      HasMoreData  Location   Command</source>
          <target state="translated">Id 名称 PSJobTypeName 状态 HasMoreData 位置命令</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>1   Job1  BackgroundJob Running    True         localhost  Get-Process</source>
          <target state="translated">1 Job1 BackgroundJob 运行，则返回 True localhost 获取进程</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can also save the job object in a variable and use it to represent the job in a later command.</source>
          <target state="translated">您可以将作业对象保存在变量和使用它来表示在更高版本的命令的作业。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following command gets the job with ID 1 and saves it in the $job variable.</source>
          <target state="translated">以下命令获取 ID 为 1 的作业，并将其保存在 $job 变量。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>$job = Get-Job -Id 1</source>
          <target state="translated">$job = 获取作业的 Id 为 1</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The job object contains the state of the job, which indicates whether the job has finished.</source>
          <target state="translated">作业对象包含指示是否已完成作业的作业的状态。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A finished job has a state of "Complete" or "Failed".</source>
          <target state="translated">已完成的作业都具有"完全"或"失败"状态。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A job might also be blocked or running.</source>
          <target state="translated">被阻止或正在运行，也可能是一项作业。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Get-Job</source>
          <target state="translated">获取作业</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Id  Name  PSJobTypeName State      HasMoreData  Location   Command</source>
          <target state="translated">Id 名称 PSJobTypeName 状态 HasMoreData 位置命令</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>1   Job1  BackgroundJob Complete   True         localhost  Get-Process</source>
          <target state="translated">1 Job1 BackgroundJob 完成，则返回 True localhost 获取进程</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>GETTING THE RESULTS OF A JOB</source>
          <target state="translated">获取作业结果</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When you run a background job, the results do not appear immediately.</source>
          <target state="translated">在运行后台作业时，结果将不会立即显示。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Instead, the Start-Job cmdlet returns a job object that represents the job, but it does not contain the results.</source>
          <target state="translated">相反，Start-job cmdlet 返回作业对象，表示所需作业，但它不包含结果。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To get the results of a background job, use the Receive-Job cmdlet.</source>
          <target state="translated">若要获取后台作业的结果，请使用 Receive-job cmdlet。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following command uses the Receive-Job cmdlet to get the results of the job.</source>
          <target state="translated">下面的命令使用 Receive-job cmdlet 来获取作业的结果。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It uses a job object saved in the $job variable to identify the job.</source>
          <target state="translated">它使用作业对象保存在 $job 变量来标识作业。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Receive-Job -Job $job</source>
          <target state="translated">接收作业的作业 $job</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The Receive-Job cmdlet returns the results of the job.</source>
          <target state="translated">Receive-job cmdlet 返回作业的结果。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)    Id ProcessName</source>
          <target state="translated">处理 npm （k) pm （k) ws （k) vm （m) CPU(s) Id ProcessName</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>103       4    11328       9692    56           1176 audiodg 804      14    12228      14108   100   101.74  1740 CcmExec 668       7     2672       6168   104    32.26   488 csrss</source>
          <target state="translated">103 4 11328 9692 56 1176 audiodg 804 14 12228 14108 100 101.74 1740 CcmExec 668 7 2672年 6168 104 32.26 488 csrss</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can also save the results of a job in a variable.</source>
          <target state="translated">您还可以在变量中保存作业结果。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following command saves the results of the job in the $job variable to the $results variable.</source>
          <target state="translated">下面的命令将作业的结果保存到 $results 变量 $job 变量中。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>$results = Receive-Job -Job $job</source>
          <target state="translated">$results = 接收作业的作业 $job</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>And, you can save the results of the job in a file by using the redirection operator (&gt;) or the Out-File cmdlet.</source>
          <target state="translated">并且，您可以通过使用重定向运算符 (&gt;) 的文件中保存的作业结果或 Out-file cmdlet。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following command uses the redirection operator to save the results of the job in the $job variable in the Results.txt file.</source>
          <target state="translated">下面的命令使用重定向运算符将作业的结果保存在 $job 变量中的 Results.txt 文件。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Receive-Job -Job $job &gt; results.txt</source>
          <target state="translated">接收作业的作业 $job &gt; results.txt</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>GETTING AND KEEPING PARTIAL JOB RESULTS</source>
          <target state="translated">获取并保留部分作业结果</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The Receive-Job cmdlet gets the results of a background job.</source>
          <target state="translated">Receive-job cmdlet 将获取后台作业的结果。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If the job is complete, Receive-Job gets all job results.</source>
          <target state="translated">如果作业已完成，则接收作业获取所有作业结果。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If the job is still running, Receive-Job gets the results that have been generated thus far.</source>
          <target state="translated">如果该作业仍在运行，接收作业获取到目前为止已生成的结果。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can run Receive-Job commands again to get the remaining results.</source>
          <target state="translated">您可以运行 Receive-job 命令再次以获取剩余结果。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When Receive-Job returns results, by default, it deletes those results from the cache where job results are stored.</source>
          <target state="translated">当接收作业返回的结果，默认情况下时，它从作业结果的存储位置缓存中删除这些结果。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If you run another Receive-Job command, you get only the results that are not yet received.</source>
          <target state="translated">如果您运行另一个 Receive-job 命令，可以仅在尚未收到的结果。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The following commands show the results of Receive-Job commands run before the job is complete.</source>
          <target state="translated">下面的命令演示之前该作业已完成运行的接收作业命令的结果。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Receive-Job -Job $job</source>
          <target state="translated">C:\PS &gt; 接收作业的作业 $job</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName</source>
          <target state="translated">处理 npm （k) pm （k) ws （k) vm （m) CPU(s) Id ProcessName</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>103       4    11328       9692    56            1176 audiodg 804      14    12228      14108   100   101.74   1740 CcmExec</source>
          <target state="translated">103 4 11328 9692 56 1176 audiodg 804 14 12228 14108 100 101.74 1740 CcmExec</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Receive-Job -Job $job</source>
          <target state="translated">C:\PS &gt; 接收作业的作业 $job</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName</source>
          <target state="translated">处理 npm （k) pm （k) ws （k) vm （m) CPU(s) Id ProcessName</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>68       3     2632        664    29     0.36   1388 ccmsetup 749      22    21468      19940   203   122.13   3644 communicator 905       7     2980       2628    34   197.97    424 csrss 1121      25    28408      32940   174   430.14   3048 explorer</source>
          <target state="translated">68 3 2632年 664 29 0.36 1388 ccmsetup 749 22 21468 19940 203 122.13 3644 communicator 905 7 2980年 2628年 34 197.97 424 csrss 1121 25 28408 32940 174 430.14 3048 资源管理器</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To prevent Receive-Job from deleting the job results that it has returned, use the Keep parameter.</source>
          <target state="translated">若要防止 Receive-job 删除已返回的作业结果，使用 Keep 参数。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>As a result, Receive-Job returns all of the results that have been generated until that time.</source>
          <target state="translated">因此，接收作业将返回所有成功之前，已生成的结果。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The following commands show the effect of using the Keep parameter on a job that is not yet complete.</source>
          <target state="translated">以下命令显示尚未完成的作业上使用 Keep 参数的效果。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Receive-Job -Job $job -Keep</source>
          <target state="translated">C:\PS &gt; 接收作业的作业 $job-保留</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName</source>
          <target state="translated">处理 npm （k) pm （k) ws （k) vm （m) CPU(s) Id ProcessName</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>103       4    11328       9692    56            1176 audiodg 804      14    12228      14108   100   101.74   1740 CcmExec</source>
          <target state="translated">103 4 11328 9692 56 1176 audiodg 804 14 12228 14108 100 101.74 1740 CcmExec</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Receive-Job -Job $job -Keep</source>
          <target state="translated">C:\PS &gt; 接收作业的作业 $job-保留</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName</source>
          <target state="translated">处理 npm （k) pm （k) ws （k) vm （m) CPU(s) Id ProcessName</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>103       4    11328       9692    56            1176 audiodg 804      14    12228      14108   100   101.74   1740 CcmExec 68       3     2632        664    29     0.36   1388 ccmsetup 749      22    21468      19940   203   122.13   3644 communicator 905       7     2980       2628    34   197.97    424 csrss 1121      25    28408      32940   174   430.14   3048 explorer</source>
          <target state="translated">103 4 11328 9692 56 1176 audiodg 804 14 12228 14108 100 101.74 1740 CcmExec 68 3 2632年 664 29 0.36 1388 ccmsetup 749 22 21468 19940 203 122.13 3644 communicator 905 7 2980年 2628年 34 197.97 424 csrss 1121 25 28408 32940 174 430.14 3048 资源管理器</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>WAITING FOR THE RESULTS</source>
          <target state="translated">等待结果</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If you run a command that takes a long time to complete, you can use the properties of the job object to determine when the job is complete.</source>
          <target state="translated">如果您运行需要很长时间才能完成的命令，可以使用作业对象的属性来确定作业何时完成。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The following command uses the Get-Job object to get all of the background jobs in the current session.</source>
          <target state="translated">下面的命令使用 Get-job 对象来获取所有后台作业的当前会话中。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Get-Job</source>
          <target state="translated">获取作业</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The results appear in a table.</source>
          <target state="translated">结果将显示在表中。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The status of the job appears in the State column.</source>
          <target state="translated">在状态列中将显示该作业的状态。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Id  Name  PSJobTypeName State      HasMoreData  Location   Command</source>
          <target state="translated">Id 名称 PSJobTypeName 状态 HasMoreData 位置命令</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>1   Job1  BackgroundJob Complete    True         localhost  Get-Process 2   Job2  BackgroundJob Running     True         localhost  Get-EventLog -Log Syst... 3   Job3  BackgroundJob Complete    True         localhost  dir -Path C:<ph id="ph1">\*</ph> -Recurse</source>
          <target state="translated">1 Job1 BackgroundJob 完成，则返回 True localhost Get-process 2 Job2 BackgroundJob 运行，则返回 True localhost Get-eventlog-日志 Syst....3 Job3 BackgroundJob 完成，则返回 True 的 localhost dir-Path c:<ph id="ph1">\*</ph> -Recurse</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>In this case, the State property reveals that Job 2 is still running.</source>
          <target state="translated">在这种情况下，State 属性显示作业 2 仍在运行。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If you were to use the Receive-Job cmdlet to get the job results now, the results would be incomplete.</source>
          <target state="translated">如果您打算使用 Receive-job cmdlet 现在获取作业结果，结果将是不完整。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You can use the Receive-Job cmdlet repeatedly to get all of the results.</source>
          <target state="translated">您可以重复使用 Receive-job cmdlet 来获取所有结果。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>By default, each time you use it, you get only the results that were not already received, but you can use the Keep parameter of the Receive-Job cmdlet to retain the results, even though they were already received.</source>
          <target state="translated">默认情况下，每次使用它，您获得结果没有已接收，但您可以使用 Receive-job cmdlet 使用 Keep 参数以保留结果，即使它们已接收也是如此。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You can write the partial results to a file and then append newer results as they arrive or you can wait and check the state of the job later.</source>
          <target state="translated">可以向文件写入的部分结果并到达或可以等待，可以检查作业更高版本的状态，然后追加较新的结果。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>You can use the Wait parameter of the Receive-Job cmdlet, which does not return the command prompt until the job is complete and all results are available.</source>
          <target state="translated">可以使用 Receive-job cmdlet，后者将不会返回命令提示符处，直到该作业已完成并且所有结果都都可用的等待参数。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You can also use the Wait-Job cmdlet to wait for any or all of the results of the job.</source>
          <target state="translated">您可以使用 Wait-job cmdlet 来等待任何或所有作业的结果。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Wait-Job lets you wait for a particular job, for all jobs, or for any of the jobs to be completed.</source>
          <target state="translated">等待作业，可以等待特定作业，为所有作业或任何要完成的作业。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The following command uses the Wait-Job cmdlet to wait for a job with</source>
          <target state="translated">下面的命令使用 Wait-job cmdlet 来等待使用作业</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>ID 10.</source>
          <target state="translated">ID 10。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Wait-Job -ID 10</source>
          <target state="translated">10 的等待作业 ID</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>As a result, the Windows PowerShell prompt is suppressed until the job is completed.</source>
          <target state="translated">这样一来，Windows PowerShell 提示仍可以取消该作业完成之前。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You can also wait for a predetermined period of time.</source>
          <target state="translated">您可以预先确定的一段时间内等待。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>This command uses the Timeout parameter to limit the wait to 120 seconds.</source>
          <target state="translated">此命令使用超时参数来限制为 120 秒等待。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>When the time expires, the command prompt returns, but the job continues to run in the background.</source>
          <target state="translated">当在时间到期时，返回命令提示符，但该作业将继续在后台运行。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Wait-Job -ID 10 -Timeout 120</source>
          <target state="translated">等待作业 ID 10 超时 120</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>STOPPING A JOB</source>
          <target state="translated">停止作业</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>To stop a background job, use the Stop-Job cmdlet.</source>
          <target state="translated">若要停止后台作业，请使用停止作业 cmdlet。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The following command starts a job to get every entry in the System event log.</source>
          <target state="translated">以下命令启动一个作业来获取系统事件日志中的每个条目。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>It saves the job object in the $job variable.</source>
          <target state="translated">它将作业对象保存在 $job 变量。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>$job = Start-Job -ScriptBlock {Get-EventLog -Log System}</source>
          <target state="translated">$job = 开始作业-ScriptBlock {Get-eventlog-日志系统}</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The following command stops the job.</source>
          <target state="translated">以下命令停止作业。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>It uses a pipeline operator (|) to send the job in the $job variable to Stop-Job.</source>
          <target state="translated">它使用管道运算符 (|) 将作业发送到 Stop-job $job 变量。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>$job | Stop-Job</source>
          <target state="translated">$job |停止作业</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>DELETING A JOB</source>
          <target state="translated">删除作业</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>To delete a background job, use the Remove-Job cmdlet.</source>
          <target state="translated">若要删除的后台作业，请使用 Remove-job cmdlet。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The following command deletes the job in the $job variable.</source>
          <target state="translated">以下命令将删除 $job 变量中的作业。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Remove-Job -Job $job</source>
          <target state="translated">删除作业的作业 $job</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>INVESTIGATING A FAILED JOB</source>
          <target state="translated">调查失败的作业</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>To find out why a job failed, use the Reason subproperty of the job object.</source>
          <target state="translated">若要了解为什么作业失败，请使用作业对象原因子属性。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The following command starts a job without the required credentials.</source>
          <target state="translated">以下命令启动一个作业不具有所需的凭据。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>It saves the job object in the $job variable.</source>
          <target state="translated">它将作业对象保存在 $job 变量。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>$job = Start-Job -ScriptBlock {New-Item -Path HKLM:\Software\MyCompany}</source>
          <target state="translated">$job = 开始作业-ScriptBlock {New-item-路径 HKLM:\Software\MyCompany}</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Id   Name  PSJobTypeName State    HasMoreData  Location   Command</source>
          <target state="translated">Id 名称 PSJobTypeName 状态 HasMoreData 位置命令</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>1    Job1  BackgroundJob Failed   False        localhost  New-Item -Path HKLM:\S...</source>
          <target state="translated">1 Job1 BackgroundJob 失败 False localhost New-item-路径 HKLM:\S...</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The following command uses the Reason property to find the error that caused the job to fail.</source>
          <target state="translated">下面的命令使用 the Reason 属性查找导致作业失败的错误。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>$job.ChildJobs[0].JobStateInfo.Reason</source>
          <target state="translated">$job。ChildJobs [0]。JobStateInfo.Reason</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>In this case, the job failed because the remote computer required explicit credentials to run the command.</source>
          <target state="translated">在这种情况下，作业失败，因为远程计算机所需显式凭据才能运行命令。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The value of the Reason property is:</source>
          <target state="translated">Of the Reason 属性的值是︰</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Connecting to remote server failed with the following error message : Access is denied.</source>
          <target state="translated">连接到远程服务器失败，出现以下错误消息︰ 访问被拒绝。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>about_Remote_Jobs about_Job_Details about_Remote about_PSSessions Start-Job Get-Job Receive-Job Stop-Job Wait-Job Remove-Job Invoke-Command</source>
          <target state="translated">about_Remote_Jobs about_Job_Details about_Remote about_PSSessions Start-job Get-job Receive-job 停止作业 Wait-job Remove-job Invoke-command</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>