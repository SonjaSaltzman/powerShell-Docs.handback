<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51051bd4fb93e2dc28db4564389e05f3cb8366f0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\About\about_Language_Keywords.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c7c03d257db904823945f5059142a97c4c441163</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9c66dcc5d0efd2efb6c88bbf5c0cdc2bcee9cda</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Language_Keywords</source>
          <target state="translated">about_Language_Keywords</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Language Keywords</source>
          <target state="translated">有关语言关键字</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Language_Keywords</source>
          <target state="translated">about_Language_Keywords</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Language_Keywords</source>
          <target state="translated">about_Language_Keywords</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">简短说明</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes the keywords in the Windows PowerShell scripting language.</source>
          <target state="translated">介绍 Windows PowerShell 脚本语言中的关键字。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">详细说明</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Windows PowerShell has the following language keywords.</source>
          <target state="translated">Windows PowerShell 具有以下语言关键字。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see the about topic for the keyword and the information that follows the table.</source>
          <target state="translated">有关详细信息，请参阅有关主题的关键字，在表后的信息。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Keyword            Reference</source>
          <target state="translated">关键字参考</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Begin              about_Functions, about_Functions_Advanced Break              about_Break, about_Trap Catch              about_Try_Catch_Finally Continue           about_Continue, about_Trap Data               about_Data_Sections Do                 about_Do, about_While DynamicParam       about_Functions_Advanced_Parameters Else               about_If Elseif             about_If End                about_Functions, about_Functions_Advanced_Methods Exit               Described in this topic.</source>
          <target state="translated">开始 about_Functions、 about_Functions_Advanced 中断 about_Break、 about_Trap Catch about_Try_Catch_Finally 继续 about_Continue、 about_Trap 数据 about_Data_Sections Do about_Do、 about_While DynamicParam about_Functions_Advanced_Parameters Else about_If Elseif about_If 结束 about_Functions，本主题中 about_Functions_Advanced_Methods 退出所述。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Filter             about_Functions Finally            about_Try_Catch_Finally For                about_For ForEach            about_ForEach From               Reserved for future use.</source>
          <target state="translated">筛选 about_Functions 最后 about_Try_Catch_Finally 为 about_For ForEach about_ForEach 从保留供将来使用。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Function           about_Functions, about_Functions_Advanced If                 about_If In                 about_ForEach InlineScript       about_InlineScript Hidden             about_Hidden Parallel           about_Parallel, about_ForEach-Parallel Param              about_Functions Process            about_Functions, about_Functions_Advanced Return             about_Return Sequence           about_Sequence Switch             about_Switch Throw              about_Throw, about_Functions_Advanced_Methods Trap               about_Trap, about_Break, about_Try_Catch_Finally Try                about_Try_Catch_Finally Until              about_Do While              about_While, about_Do Workflow           about_Workflows</source>
          <target state="translated">函数 about_Functions，如果尝试在 about_ForEach InlineScript about_InlineScript Hidden about_Hidden 并行 about_Parallel、 about_ForEach 并行 Param about_Functions 过程 about_Functions、 about_Functions_Advanced 返回 about_Return 序列 about_Sequence 开关 about_Switch Throw about_Throw、 about_Functions_Advanced_Methods 陷阱 about_Trap、 about_Break、 about_Try_Catch_Finally about_If about_Functions_Advanced 直到 about_Do about_Try_Catch_Finally about_While 时about_Do 工作流 about_Workflows</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Language Keywords</source>
          <target state="translated">语言关键字</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Begin</source>
          <target state="translated">开始</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Specifies one part of the body of a function, along with the DynamicParam, Process, and End keywords.</source>
          <target state="translated">指定的主体的函数，以及 DynamicParam、 Process 和 End 关键字的一部分。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The Begin statement list runs one time before any objects are received from the pipeline.</source>
          <target state="translated">Begin 语句列表运行一次之前从管道接收到的任何对象。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>function <ph id="ph1">&lt;name&gt;</ph> { DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} begin {<ph id="ph3">&lt;statement list&gt;</ph>} process {<ph id="ph4">&lt;statement list&gt;</ph>} end {<ph id="ph5">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">函数 <ph id="ph1">&lt;name&gt;</ph> {DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} 开始 {<ph id="ph3">&lt;statement list&gt;</ph>} 流程 {<ph id="ph4">&lt;statement list&gt;</ph>} 最终 {<ph id="ph5">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Break</source>
          <target state="translated">分页符</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Causes a script to exit a loop.</source>
          <target state="translated">将导致一个脚本来退出循环。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>while (<ph id="ph1">&lt;condition&gt;</ph>) {</source>
          <target state="translated">虽然 (<ph id="ph1">&lt;condition&gt;</ph>) {</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>break</source>
          <target state="translated">分页符</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="translated">}</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Catch</source>
          <target state="translated">Catch</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Specifies a statement list to run if an error occurs in the accompanying Try statement list.</source>
          <target state="translated">指定错误发生在附随 Try 语句列表时要运行一个语句列表。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An error type requires brackets.</source>
          <target state="translated">错误类型需要方括号。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The second pair of brackets indicates that the error type is optional.</source>
          <target state="translated">第二个对方括号指示错误类型是可选的。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>try {<ph id="ph1">&lt;statement list&gt;</ph>} catch [[<ph id="ph2">&lt;error type&gt;</ph>]] {<ph id="ph3">&lt;statement list&gt;</ph>}</source>
          <target state="translated">请尝试 {<ph id="ph1">&lt;statement list&gt;</ph>} catch [[<ph id="ph2">&lt;error type&gt;</ph>]] {<ph id="ph3">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Continue</source>
          <target state="translated">继续</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Causes a script to stop running a loop and to go back to the condition.</source>
          <target state="translated">将导致脚本停止运行一个循环并返回到该条件。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If the condition is met, the script begins the loop again.</source>
          <target state="translated">如果满足该条件，则该脚本首先再次循环。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>while (<ph id="ph1">&lt;condition&gt;</ph>) {</source>
          <target state="translated">虽然 (<ph id="ph1">&lt;condition&gt;</ph>) {</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>continue</source>
          <target state="translated">继续</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="translated">}</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Data</source>
          <target state="translated">数据</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In a script, defines a section that isolates data from the script logic.</source>
          <target state="translated">在脚本中，定义将数据与脚本逻辑相隔离的部分。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Can also include If statements and some limited commands.</source>
          <target state="translated">此外可以包括语句和一些限制，则命令。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>data <ph id="ph1">&lt;variable&gt;</ph> [-supportedCommand &lt;cmdlet-name&gt;] {<ph id="ph2">&lt;permitted content&gt;</ph>}</source>
          <target state="translated">数据 <ph id="ph1">&lt;variable&gt;</ph> [-supportedCommand &lt; t e &gt;] {<ph id="ph2">&lt;permitted content&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Do</source>
          <target state="translated">执行操作</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Used with the While or Until keyword as a looping construct.</source>
          <target state="translated">While 或 Until 关键字用作循环构造。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Windows PowerShell runs the statement list at least one time, unlike a loop that uses While.</source>
          <target state="translated">Windows PowerShell 运行语句列表至少一次，与不同的是使用一个循环时。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>do {<ph id="ph1">&lt;statement list&gt;</ph>} while (<ph id="ph2">&lt;condition&gt;</ph>)</source>
          <target state="translated">不要 {<ph id="ph1">&lt;statement list&gt;</ph>} 时 (<ph id="ph2">&lt;condition&gt;</ph>)</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>do {<ph id="ph1">&lt;statement list&gt;</ph>} until (<ph id="ph2">&lt;condition&gt;</ph>)</source>
          <target state="translated">不要 {<ph id="ph1">&lt;statement list&gt;</ph>} 直到 (<ph id="ph2">&lt;condition&gt;</ph>)</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>DynamicParam</source>
          <target state="translated">DynamicParam</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Specifies one part of the body of a function, along with the Begin, Process, and End keywords.</source>
          <target state="translated">指定的主体的函数，以及 Begin、 Process 和 End 关键字的一部分。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Dynamic parameters are added at run time.</source>
          <target state="translated">在运行时中添加动态参数。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>function <ph id="ph1">&lt;name&gt;</ph> { DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} begin {<ph id="ph3">&lt;statement list&gt;</ph>} process {<ph id="ph4">&lt;statement list&gt;</ph>} end {<ph id="ph5">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">函数 <ph id="ph1">&lt;name&gt;</ph> {DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} 开始 {<ph id="ph3">&lt;statement list&gt;</ph>} 流程 {<ph id="ph4">&lt;statement list&gt;</ph>} 最终 {<ph id="ph5">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Else</source>
          <target state="translated">其他</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Used with the If keyword to specify the default statement list.</source>
          <target state="translated">使用 If 关键字来指定默认语句列表。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>if (<ph id="ph1">&lt;condition&gt;</ph>) {<ph id="ph2">&lt;statement list&gt;</ph>} else {<ph id="ph3">&lt;statement list&gt;</ph>}</source>
          <target state="translated">if (<ph id="ph1">&lt;condition&gt;</ph>) {<ph id="ph2">&lt;statement list&gt;</ph>} else {<ph id="ph3">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Elseif</source>
          <target state="translated">Elseif</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Used with the If and Else keywords to specify additional conditionals.</source>
          <target state="translated">用于 If 和 Else 关键字来指定附加条件。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The Else keyword is optional.</source>
          <target state="translated">Else 关键字是可选的。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>if (<ph id="ph1">&lt;condition&gt;</ph>) {<ph id="ph2">&lt;statement list&gt;</ph>} elseif (<ph id="ph3">&lt;condition&gt;</ph>) {<ph id="ph4">&lt;statement list&gt;</ph>} else {<ph id="ph5">&lt;statement list&gt;</ph>}</source>
          <target state="translated">如果 (<ph id="ph1">&lt;condition&gt;</ph>) {<ph id="ph2">&lt;statement list&gt;</ph>} elseif (<ph id="ph3">&lt;condition&gt;</ph>) {<ph id="ph4">&lt;statement list&gt;</ph>} else {<ph id="ph5">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>End</source>
          <target state="translated">结束</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Specifies one part of the body of a function, along with the DynamicParam, Begin, and End keywords.</source>
          <target state="translated">指定的主体的函数，以及 DynamicParam、 Begin、 和 End 关键字的一部分。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The End statement list runs one time after all the objects have been received from the pipeline.</source>
          <target state="translated">已经从管道接收语句列表的运行一次，别忘了对象的结尾。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>function <ph id="ph1">&lt;name&gt;</ph> { DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} begin {<ph id="ph3">&lt;statement list&gt;</ph>} process {<ph id="ph4">&lt;statement list&gt;</ph>} end {<ph id="ph5">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">函数 <ph id="ph1">&lt;name&gt;</ph> {DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} 开始 {<ph id="ph3">&lt;statement list&gt;</ph>} 流程 {<ph id="ph4">&lt;statement list&gt;</ph>} 最终 {<ph id="ph5">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Exit</source>
          <target state="translated">退出</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Causes Windows PowerShell to exit a script or a Windows PowerShell instance.</source>
          <target state="translated">将导致 Windows PowerShell 退出脚本或 Windows PowerShell 实例。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>When you run 'powershell.exe –File <ph id="ph1">&lt;path to a script&gt;</ph>', you can only set the %ERRORLEVEL% variable to a value other than zero by using the exit statement.</source>
          <target state="translated">当你运行 powershell.exe-文件 <ph id="ph1">&lt;path to a script&gt;</ph>，您只能设置为零使用退出语句以外的值 %ERRORLEVEL%变量。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In the following example, the user sets the error level variable value to 4 by typing 'exit 4'.</source>
          <target state="translated">在下面的示例中，用户都通过键入 exit 4 将错误级别的变量值设置为 4。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>C:\Users\bruce\documents\test&gt;type test.ps1</source>
          <target state="translated">C:\Users\bruce\documents\test &gt; 键入 test.ps1</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>exit 4</source>
          <target state="translated">退出 4</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>C:\Users\bruce\documents\test&gt;powershell -file ./test.ps1</source>
          <target state="translated">C:\Users\bruce\documents\test &gt; powershell-文件./test.ps1</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>C:\Users\bruce\documents\test&gt;echo %ERRORLEVEL%</source>
          <target state="translated">C:\Users\bruce\documents\test &gt; echo %ERRORLEVEL%</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>When you use powershell.exe with the File parameter, the .ps1 (script) file itself should include instructions for handling any errors or exceptions that occur while the script is running.</source>
          <target state="translated">当 powershell.exe 使用带有文件参数时，.ps1 （脚本） 文件本身应包括用于处理任何错误或运行该脚本期间发生的异常的说明。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You should only use the exit statement to indicate the post-execution status of the script.</source>
          <target state="translated">Exit 语句仅应该用于指示该脚本的执行后状态。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>exit exit</source>
          <target state="translated">退出</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Filter</source>
          <target state="translated">筛选</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Specifies a function in which the statement list runs one time for each input object.</source>
          <target state="translated">指定在其中的语句列表运行一次每个输入对象的函数。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>It has the same effect as a function that contains only a Process block.</source>
          <target state="translated">它具有包含 Process 块的函数相同的效果。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>filter <ph id="ph1">&lt;name&gt;</ph> {<ph id="ph2">&lt;statement list&gt;</ph>}</source>
          <target state="translated">筛选器 <ph id="ph1">&lt;name&gt;</ph> {<ph id="ph2">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Finally</source>
          <target state="translated">最后</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Defines a statement list that runs after statements that are associated with Try and Catch.</source>
          <target state="translated">定义与 Try 和 Catch 语句之后运行的语句列表。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A Finally statement list runs even if you press CTRL+C to leave a script or if you use the Exit keyword in the script.</source>
          <target state="translated">一个语句列表最后运行即使按 CTRL + C 将保留一个脚本，或在脚本中使用 Exit 关键字。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>try {<ph id="ph1">&lt;statement list&gt;</ph>} catch [&lt;error type] {<ph id="ph2">&lt;statement list&gt;</ph>} finally {<ph id="ph3">&lt;statement list&gt;</ph>}</source>
          <target state="translated">请尝试 {<ph id="ph1">&lt;statement list&gt;</ph>} catch [&lt; 错误类型] {<ph id="ph2">&lt;statement list&gt;</ph>} finally {<ph id="ph3">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For</source>
          <target state="translated">对于</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Defines a loop by using a condition.</source>
          <target state="translated">通过使用条件来定义一个循环。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>for (<ph id="ph1">&lt;initialize&gt;</ph>; <ph id="ph2">&lt;condition&gt;</ph>; <ph id="ph3">&lt;iterate&gt;</ph>) {<ph id="ph4">&lt;statement list&gt;</ph>}</source>
          <target state="translated">for (<ph id="ph1">&lt;initialize&gt;</ph>; <ph id="ph2">&lt;condition&gt;</ph>; <ph id="ph3">&lt;iterate&gt;</ph>){<ph id="ph4">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>ForEach</source>
          <target state="translated">ForEach</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Defines a loop by using each member of a collection.</source>
          <target state="translated">通过使用集合中的每个成员来定义一个循环。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>ForEach (<ph id="ph1">&lt;item&gt;</ph> in <ph id="ph2">&lt;collection&gt;</ph>){<ph id="ph3">&lt;statement list&gt;</ph>}</source>
          <target state="translated">ForEach (<ph id="ph1">&lt;item&gt;</ph> 中 <ph id="ph2">&lt;collection&gt;</ph>) {<ph id="ph3">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>From</source>
          <target state="translated">从</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Reserved for future use.</source>
          <target state="translated">保留供将来使用。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">功能</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Creates a named statement list of reusable code.</source>
          <target state="translated">创建可重用代码的一个命名的语句列表。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You can name the scope a function belongs to.</source>
          <target state="translated">您可以命名函数所属的作用域。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>And, you can specify one or more named parameters by using the Param keyword.</source>
          <target state="translated">而且，可以使用 Param 关键字指定一个或多个命名的参数。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Within the function statement list, you can include DynamicParam, Begin, Process, and End statement lists.</source>
          <target state="translated">函数语句列表中可以包括 DynamicParam、 开始、 过程中，并结束语句列表。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>function [&lt;scope:&gt;]<ph id="ph1">&lt;name&gt;</ph> { param ([type]&lt;$pname1&gt; [, [type]&lt;$pname2&gt;]) DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} begin {<ph id="ph3">&lt;statement list&gt;</ph>} process {<ph id="ph4">&lt;statement list&gt;</ph>} end {<ph id="ph5">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">函数 [&lt; 作用域︰ &gt;]<ph id="ph1">&lt;name&gt;</ph> {param ([type] &lt;$ pname1 &gt; [，[type] &lt;$ pname2 &gt;]) DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} 开始 {<ph id="ph3">&lt;statement list&gt;</ph>} 流程 {<ph id="ph4">&lt;statement list&gt;</ph>} 最终 {<ph id="ph5">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>You also have the option of defining one or more parameters outside the statement list after the function name.</source>
          <target state="translated">此外可以定义在函数名之后的语句列表外的一个或多个参数。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>function [&lt;scope:&gt;]<ph id="ph1">&lt;name&gt;</ph> [([type]&lt;$pname1&gt;, [[type]&lt;$pname2&gt;])] { DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} begin {<ph id="ph3">&lt;statement list&gt;</ph>} process {<ph id="ph4">&lt;statement list&gt;</ph>} end {<ph id="ph5">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">函数 [&lt; 作用域︰ &gt;]<ph id="ph1">&lt;name&gt;</ph> [([type] &lt;$ pname1 &gt; [[type] &lt;$ pname2 &gt;])] {DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} 开始 {<ph id="ph3">&lt;statement list&gt;</ph>} 流程 {<ph id="ph4">&lt;statement list&gt;</ph>} 最终 {<ph id="ph5">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If</source>
          <target state="translated">如果</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Defines a conditional.</source>
          <target state="translated">定义条件。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>if (<ph id="ph1">&lt;condition&gt;</ph>) {<ph id="ph2">&lt;statement list&gt;</ph>}</source>
          <target state="translated">if (<ph id="ph1">&lt;condition&gt;</ph>) {<ph id="ph2">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Hidden</source>
          <target state="translated">Hidden</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Hides class members from the default results of the Get-Member cmdlet, and from IntelliSense and tab completion results.</source>
          <target state="translated">隐藏类成员 Get-member cmdlet，在默认结果中和从 IntelliSense 和 tab 键完成结果。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Hidden [data type] $member_name</source>
          <target state="translated">隐藏 [数据类型] $member_name</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>In</source>
          <target state="translated">默认情况下，CSV 缓存在</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Used in a ForEach statement to create a loop that uses each member of a collection.</source>
          <target state="translated">ForEach 语句中使用，创建一个循环使用的每个成员的集合。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>ForEach (<ph id="ph1">&lt;item&gt;</ph> in <ph id="ph2">&lt;collection&gt;</ph>){<ph id="ph3">&lt;statement list&gt;</ph>}</source>
          <target state="translated">ForEach (<ph id="ph1">&lt;item&gt;</ph> 中 <ph id="ph2">&lt;collection&gt;</ph>) {<ph id="ph3">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>InlineScript</source>
          <target state="translated">InlineScript</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Runs workflow commands in a shared Windows PowerShell session.</source>
          <target state="translated">在共享的 Windows PowerShell 会话中运行工作流命令。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This keyword is valid only in a Windows PowerShell Workflow.</source>
          <target state="translated">此关键字是仅在 Windows PowerShell 工作流中有效。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>workflow <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> { InlineScript { &lt;Command/Expression&gt;</source>
          <target state="translated">工作流 <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> {InlineScript {&lt; 命令/表达式 &gt;</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>} }</source>
          <target state="translated">} }</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The InlineScript keyword indicates an InlineScript activity, which runs commands in a shared standard (non-workflow) session.</source>
          <target state="translated">InlineScript 关键字指示 InlineScript 活动，在共享的标准 （非工作流） 会话中运行命令。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>You can use the InlineScript keyword to run commands that are not otherwise valid in a workflow, and to run commands that share data.</source>
          <target state="translated">若要运行命令，否则不能在工作流中，为运行共享数据的命令，您可以使用 InlineScript 关键字。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>By default, the commands in an InlineScript script block run in a separate process.</source>
          <target state="translated">默认情况下，InlineScript 脚本块中的命令的单独进程中运行。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For more information, see about_InlineScript and Running Windows PowerShell Commands in a Workflow (http://technet.microsoft.com/library/jj574197.aspx).</source>
          <target state="translated">有关详细信息，请参阅 about_InlineScript 和工作流 (http://technet.microsoft.com/library/jj574197.aspx) 中运行 Windows PowerShell 命令。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Defines the parameters in a function.</source>
          <target state="translated">在函数中定义的参数。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>function [&lt;scope:&gt;]<ph id="ph1">&lt;name&gt;</ph> { param ([type]&lt;$pname1&gt;[, [[type]&lt;$pname2&gt;]]) <ph id="ph2">&lt;statement list&gt;</ph> }</source>
          <target state="translated">函数 [&lt; 作用域︰ &gt;]<ph id="ph1">&lt;name&gt;</ph> {param ([type] &lt;$ pname1 &gt; [，[[type] &lt;$ pname2 &gt;]]) <ph id="ph2">&lt;statement list&gt;</ph> }</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Parallel</source>
          <target state="translated">并行</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Runs workflow commands concurrently and in an undefined order.</source>
          <target state="translated">运行工作流命令，同时并不确定的顺序。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>This keyword is valid only in a Windows PowerShell Workflow.</source>
          <target state="translated">此关键字是仅在 Windows PowerShell 工作流中有效。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The Parallel keyword indicates a Parallel script block.</source>
          <target state="translated">并行关键字指示并行脚本块。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The commands in a Parallel script block can run at the same time and in any order.</source>
          <target state="translated">在同一时间并按任何顺序，可以运行 Parallel 脚本块中的命令。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>This feature significantly improves the performance of a workflow.</source>
          <target state="translated">此功能可显著提高工作流的性能。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>workflow <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> { Parallel {</source>
          <target state="translated">工作流 <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> {并行 {</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>…</source>
          <target state="translated">…</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>} }</source>
          <target state="translated">} }</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The Parallel parameter of the ForEach keyword processes the items in a collection in parallel.</source>
          <target state="translated">ForEach 关键字的并行参数处理并行集合中的项。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The activities in the script block run sequentially on each item, but the script block can run on multiple items at the same time and the items are processed in an undefined order.</source>
          <target state="translated">每一项上按顺序运行的脚本块中的活动，但在同一时间，该脚本块可以运行多个项并不确定的顺序处理各项。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>workflow <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> { ForEach -Parallel (<ph id="ph2">&lt;item&gt;</ph> in <ph id="ph3">&lt;collection&gt;</ph>) {</source>
          <target state="translated">工作流 <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> {ForEach-并行 (<ph id="ph2">&lt;item&gt;</ph> 中 <ph id="ph3">&lt;collection&gt;</ph>) {</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>} }</source>
          <target state="translated">} }</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>For more information, see about_Parallel, about_ForEach-Parallel</source>
          <target state="translated">有关详细信息，请参阅 about_Parallel，about_ForEach 并行</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Process</source>
          <target state="translated">进程</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Specifies a part of the body of a function, along with the DynamicParam, Begin, and End keywords.</source>
          <target state="translated">指定的函数，以及 DynamicParam、 Begin、 和 End 关键字正文的一部分。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>When a Process statement list receives input from the pipeline, the Process statement list runs one time for each element from the pipeline.</source>
          <target state="translated">当过程语句列表从管道接收输入时，过程语句列表从管道中运行每个元素执行一的次。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>If the pipeline provides no objects, the Process statement list does not run.</source>
          <target state="translated">如果管道不提供的任何对象，将不运行过程语句列表。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>If the command is the first command in the pipeline, the Process statement list runs one time.</source>
          <target state="translated">如果该命令是管道中的第一个命令，过程语句列表运行一次。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>function <ph id="ph1">&lt;name&gt;</ph> { DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} begin {<ph id="ph3">&lt;statement list&gt;</ph>} process {<ph id="ph4">&lt;statement list&gt;</ph>} end {<ph id="ph5">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">函数 <ph id="ph1">&lt;name&gt;</ph> {DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} 开始 {<ph id="ph3">&lt;statement list&gt;</ph>} 流程 {<ph id="ph4">&lt;statement list&gt;</ph>} 最终 {<ph id="ph5">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Return</source>
          <target state="translated">返回</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Causes Windows PowerShell to leave the current scope, such as a script or function, and writes the optional expression to the output.</source>
          <target state="translated">将导致 Windows PowerShell 将保留当前作用域，如脚本或函数，并将写入输出的可选表达式。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>return [<ph id="ph1">&lt;expression&gt;</ph>]</source>
          <target state="translated">返回 [<ph id="ph1">&lt;expression&gt;</ph>]</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Sequence</source>
          <target state="translated">序列</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Runs workflow commands sequentially in a Parallel script block.</source>
          <target state="translated">在并行脚本块中按顺序运行工作流命令。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>This keyword is valid only in a Windows PowerShell Workflow.</source>
          <target state="translated">此关键字是仅在 Windows PowerShell 工作流中有效。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>workflow <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> { Parallel { Sequence { <ph id="ph2">&lt;Activity&gt;</ph> } } }</source>
          <target state="translated">工作流 <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> {并行 {序列 { <ph id="ph2">&lt;Activity&gt;</ph> }}}</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The Sequence keyword creates a sequence block within a Parallel script block.</source>
          <target state="translated">序列关键字创建的并行脚本块内的序列块。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The commands in the Sequence script block run sequentially and in the order defined.</source>
          <target state="translated">Sequence 脚本块中的命令按顺序运行、 按定义的顺序。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>For more information, see about_Sequence</source>
          <target state="translated">有关详细信息，请参阅 about_Sequence</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Switch</source>
          <target state="translated">开关</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Specifies a variety of actions to be performed on items from the pipeline or from a file.</source>
          <target state="translated">指定各种管道中或从文件的项目上执行的操作。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>You can use either of the following syntax models.</source>
          <target state="translated">您可以使用以下语法模型之一。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Syntax 1:</source>
          <target state="translated">语法 1:</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>switch [-regex|-wildcard|-exact][-casesensitive] ( pipeline )</source>
          <target state="translated">切换 [-正则表达式 |-通配符 | 的确切] [-casesensitive] （管道）</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>{ <ph id="ph1">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>|{ <ph id="ph2">&lt;expression&gt;</ph> } {<ph id="ph3">&lt;statement list&gt;</ph>} <ph id="ph4">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>|{ <ph id="ph5">&lt;expression&gt;</ph> } {<ph id="ph6">&lt;statement list&gt;</ph>}</source>
          <target state="translated">{ <ph id="ph1">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>|{ <ph id="ph2">&lt;expression&gt;</ph> } {<ph id="ph3">&lt;statement list&gt;</ph>} <ph id="ph4">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>|{ <ph id="ph5">&lt;expression&gt;</ph> } {<ph id="ph6">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>default {<ph id="ph1">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">默认值 {<ph id="ph1">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Syntax 2:</source>
          <target state="translated">语法 2:</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>switch [-regex|-wildcard|-exact][-casesensitive] -file filename { <ph id="ph1">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>|{ <ph id="ph2">&lt;expression&gt;</ph> } {<ph id="ph3">&lt;statement list&gt;</ph>} <ph id="ph4">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>|{ <ph id="ph5">&lt;expression&gt;</ph> } {<ph id="ph6">&lt;statement list&gt;</ph>}</source>
          <target state="translated">切换 [-正则表达式 |-通配符 | 的确切] [-casesensitive]-文件名 { <ph id="ph1">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>| { <ph id="ph2">&lt;expression&gt;</ph> }{<ph id="ph3">&lt;statement list&gt;</ph>} <ph id="ph4">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>|{ <ph id="ph5">&lt;expression&gt;</ph> }{<ph id="ph6">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>default {<ph id="ph1">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">默认值 {<ph id="ph1">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Throw</source>
          <target state="translated">引发</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Throws an object as an error.</source>
          <target state="translated">为错误引发对象。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>throw [<ph id="ph1">&lt;object&gt;</ph>]</source>
          <target state="translated">引发 [<ph id="ph1">&lt;object&gt;</ph>]</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Trap</source>
          <target state="translated">陷阱</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Defines a statement list to be run if an error is encountered.</source>
          <target state="translated">定义一个语句列表时遇到错误，则将运行。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>An error type requires brackets.</source>
          <target state="translated">错误类型需要方括号。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The second pair of brackets indicates that the error type is optional.</source>
          <target state="translated">第二个对方括号指示错误类型是可选的。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>trap [[<ph id="ph1">&lt;error type&gt;</ph>]] {<ph id="ph2">&lt;statement list&gt;</ph>}</source>
          <target state="translated">trap [[<ph id="ph1">&lt;error type&gt;</ph>]] {<ph id="ph2">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Try</source>
          <target state="translated">重试</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Defines a statement list to be checked for errors while the statements run.</source>
          <target state="translated">定义用于检查有错误时执行的语句的语句列表。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>If an error occurs, Windows PowerShell continues running in a Catch or Finally statement.</source>
          <target state="translated">如果发生错误，Windows PowerShell 将继续运行在 Catch 或 Finally 语句中。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>An error type requires brackets.</source>
          <target state="translated">错误类型需要方括号。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The second pair of brackets indicates that the error type is optional.</source>
          <target state="translated">第二个对方括号指示错误类型是可选的。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>try {<ph id="ph1">&lt;statement list&gt;</ph>} catch [[&lt;error type]] {<ph id="ph2">&lt;statement list&gt;</ph>} finally {<ph id="ph3">&lt;statement list&gt;</ph>}</source>
          <target state="translated">请尝试 {<ph id="ph1">&lt;statement list&gt;</ph>} catch [[&lt; 错误类型]] {<ph id="ph2">&lt;statement list&gt;</ph>} finally {<ph id="ph3">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Until</source>
          <target state="translated">直到</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Used in a Do statement as a looping construct where the statement list is executed at least one time.</source>
          <target state="translated">在语句中使用，请执行与循环构造则执行语句列表的至少一次。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>do {<ph id="ph1">&lt;statement list&gt;</ph>} until (<ph id="ph2">&lt;condition&gt;</ph>)</source>
          <target state="translated">不要 {<ph id="ph1">&lt;statement list&gt;</ph>} 直到 (<ph id="ph2">&lt;condition&gt;</ph>)</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>While</source>
          <target state="translated">While</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Used in a Do statement as a looping construct where the statement list is executed at least one time.</source>
          <target state="translated">在语句中使用，请执行与循环构造则执行语句列表的至少一次。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">语法：</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>do {<ph id="ph1">&lt;statement list&gt;</ph>} while (<ph id="ph2">&lt;condition&gt;</ph>)</source>
          <target state="translated">不要 {<ph id="ph1">&lt;statement list&gt;</ph>} 时 (<ph id="ph2">&lt;condition&gt;</ph>)</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Workflow</source>
          <target state="translated">工作流</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Creates a script-based Windows PowerShell workflow, that is, a workflow written in the Windows PowerShell language.</source>
          <target state="translated">创建一个基于脚本的 Windows PowerShell 工作流，也就是说，在 Windows PowerShell 语言中编写工作流。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>A Windows PowerShell workflow is a Windows PowerShell command type that is supported by Windows PowerShell and Windows Workflow Foundation.</source>
          <target state="translated">Windows PowerShell 工作流是通过 Windows PowerShell 和 Windows Workflow Foundation 支持的 Windows PowerShell 命令类型。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Workflows are designed for complex, long-running tasks that affect multiple computers.</source>
          <target state="translated">工作流旨在用于影响多台计算机的复杂的长时间运行的任务。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Workflows can be recovered if interrupted, such as by a network outage, and you can suspend and resume them  without losing state or data.</source>
          <target state="translated">如果中断，如由网络中断，并且您可以挂起和继续其而不会丢失状态或数据，则可以恢复工作流。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Workflows can be written in XAML, the native language of Windows Workflow Foundation, or in the Windows PowerShell language.</source>
          <target state="translated">可以在 XAML 中，Windows Workflow Foundation 的本机语言或在 Windows PowerShell 语言中编写工作流。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The syntax of a script-based workflow is similar to the syntax of a function.</source>
          <target state="translated">基于脚本的工作流的语法是类似于函数的语法。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>However, the unit of execution in a workflow is an activity, instead of a command.</source>
          <target state="translated">但是，在工作流中执行的单位是一个活动，而不是一个命令。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Cmdlets (and other commands) that are used in script-based workflows are implicitly converted to activities.</source>
          <target state="translated">Cmdlet （和其他命令） 都在使用基于脚本的工作流隐式转换为活动。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Some language elements that are permitted in scripts and functions are not permitted in workflows.</source>
          <target state="translated">在工作流中不允许脚本和函数中允许使用某些语言元素。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Similarly, workflows can include elements that are not found in scripts and functions, such as "persistence points" (checkpoints), self-suspension, and parallel processing.</source>
          <target state="translated">同样，工作流可以包括脚本和函数，如"暂留点"中找不到的元素 （检查点） 自行挂起和并行处理。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>In addition, all workflows have a set of common parameters that are added by Windows PowerShell when you use the Workflow keyword.</source>
          <target state="translated">此外，所有工作流具有一套使用工作流关键字时，Windows PowerShell 所添加的公共参数。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Syntax: workflow &lt;Verb-Noun&gt; { param ([type]&lt;$pname1&gt; [, [type]&lt;$pname2&gt;]) <ph id="ph1">&lt;statement list&gt;</ph> }</source>
          <target state="translated">语法︰ 工作流 &lt; 动词-名词 &gt; {param ([type] &lt;$ pname1 &gt; [，[type] &lt;$ pname2 &gt;]) <ph id="ph1">&lt;statement list&gt;</ph> }</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>workflow &lt;verb-noun&gt; { [CmdletBinding(<ph id="ph1">&lt;Attributes&gt;</ph>)] Param</source>
          <target state="translated">工作流 &lt; 动词-名词 &gt; {[CmdletBinding (<ph id="ph1">&lt;Attributes&gt;</ph>)] Param</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>[Parameter(<ph id="ph1">&lt;Arguments&gt;</ph>)] $Param1</source>
          <target state="translated">[参数 (<ph id="ph1">&lt;Arguments&gt;</ph>)] $Param1</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="translated">}</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>For more information about workflows, see about_Workflows and "Getting Started with Windows PowerShell Workflow" (http://go.microsoft.com/fwlink/?LinkID=252592) in the TechNet Library.</source>
          <target state="translated">有关工作流的详细信息，请参阅 about_Workflows 和"获取开始使用 Windows PowerShell 工作流"(http://go.microsoft.com/fwlink/?LinkID=252592) TechNet 库中。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>about_Escape_Characters about_Special_Characters about_Wildcards</source>
          <target state="translated">about_Escape_Characters about_Special_Characters about_Wildcards</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>