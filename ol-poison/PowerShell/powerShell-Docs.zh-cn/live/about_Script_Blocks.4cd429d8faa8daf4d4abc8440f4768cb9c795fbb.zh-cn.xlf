<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f918198bba8afaa8e3acbfdfc9beb1fbb359a63</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\About\about_Script_Blocks.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9140da68d42ca629bd80fdece186d812aafb5560</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b21d52086f85e7a0477b91f4b110953beacc62e1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Script_Blocks</source>
          <target state="translated">about_Script_Blocks</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Script Blocks</source>
          <target state="translated">有关脚本块</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Script_Blocks</source>
          <target state="translated">about_Script_Blocks</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>TOPIC</source>
          <target state="translated">TOPIC</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>about_Script_Blocks</source>
          <target state="translated">about_Script_Blocks</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">简短说明</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Defines what a script block is and explains how to use script blocks in the Windows PowerShell programming language.</source>
          <target state="translated">定义在编程语言的 Windows PowerShell 脚本块是，并且说明如何使用脚本块。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">详细说明</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the Windows PowerShell programming language, a script block is a collection of statements or expressions that can be used as a single unit.</source>
          <target state="translated">在 Windows PowerShell 编程语言中，一个脚本块是语句或表达式可作为单个单元的集合。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A script block can accept arguments and return values.</source>
          <target state="translated">脚本块可以接受参数并返回值。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Syntactically, a script block is a statement list in braces, as shown in the following syntax:</source>
          <target state="translated">在语法上，一个脚本块是大括号中，一个语句列表，如下面的语法中所示︰</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>{<ph id="ph1">&lt;statement list&gt;</ph>}</source>
          <target state="translated">{<ph id="ph1">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A script block returns the output of all the commands in the script block, either as a single object or as an array.</source>
          <target state="translated">脚本块在脚本块中，返回所有命令的输出为单个对象还是作为一个数组。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Like functions, a script block can include parameters.</source>
          <target state="translated">像函数一样，一个脚本块可以包含参数。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use the Param keyword to assign named parameters, as shown in the following syntax:</source>
          <target state="translated">使用 Param 关键字分配命名的参数，如下面的语法中所示︰</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>{ param ([type]$parameter1 [,[type]$parameter2]) <ph id="ph1">&lt;statement list&gt;</ph> }</source>
          <target state="translated">{param ([type] $parameter1 [，[type] $parameter2]) <ph id="ph1">&lt;statement list&gt;</ph> }</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In a script block, unlike a function, you cannot specify parameters outside the braces.</source>
          <target state="translated">在脚本块中，与函数不同，您不能指定大括号外的参数。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Like functions, script blocks can include the DynamicParam, Begin, Process, and End keywords.</source>
          <target state="translated">像函数一样，脚本块可以包含 DynamicParam、 Begin、 Process 和 End 关键字。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see about_Functions and about_Functions_Advanced.</source>
          <target state="translated">有关详细信息，请参阅 about_Functions 和 about_Functions_Advanced。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Using Script Blocks</source>
          <target state="translated">使用脚本块</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A script block is an instance of a Microsoft .NET Framework type (System.Management.Automation.ScriptBlock).</source>
          <target state="translated">脚本块是 Microsoft.NET Framework 类型 (System.Management.Automation.ScriptBlock) 的实例。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Commands can have script block parameter values.</source>
          <target state="translated">命令可使脚本块参数值。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, the Invoke-Command cmdlet has a ScriptBlock parameter that takes a script block value, as shown in this example:</source>
          <target state="translated">例如，Invoke-command cmdlet 具有 ScriptBlock 参数采用一个脚本块值，如本示例中所示︰</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -scriptblock  { get-process } Handles  NPM(K)    PM(K)     WS(K) VM(M)   CPU(s)     Id ProcessName</source>
          <target state="translated">C:\PS &gt; 调用命令-scriptblock {获取进程} 处理 npm （k) pm （k) ws （k) vm （m) CPU(s) Id ProcessName</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>999      28    39100     45020   262    15.88   1844 communicator 721      28    32696     36536   222    20.84   4028 explorer</source>
          <target state="translated">999 28 39100 45020 262 15.88 1844 communicator 721 28 32696 36536 222 20.84 4028 资源管理器</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The script block that is used as a value can be more complicated, as shown in the following example:</source>
          <target state="translated">用作值的脚本块可以是更复杂一些，如下面的示例中所示︰</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -scriptblock { param ($uu = "Parameter"); "$uu assigned."</source>
          <target state="translated">C:\PS &gt; 调用命令 scriptblock {param ($uu ="参数");"$uu 分配"。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>} Parameter assigned.</source>
          <target state="translated">} 分配的参数。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The script block in the preceding example uses the Param keyword to create a parameter that has a default value.</source>
          <target state="translated">前面的示例中的脚本块使用 Param 关键字来创建具有默认值的参数。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example uses the Args parameter of the Invoke-Command cmdlet to assign a different value to the parameter:</source>
          <target state="translated">下面的示例使用 Invoke-command cmdlet 的 Args 参数将不同的值分配给该参数︰</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -scriptblock {param ($uu = "Parameter"); "$uu assigned."}</source>
          <target state="translated">C:\PS &gt; 调用命令 scriptblock {param ($uu ="参数");"$uu 分配。"}</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>-args "Other value" Other value assigned.</source>
          <target state="translated">参数"其他"其他值分配的值。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can assign a script block to a variable, as shown in the following example:</source>
          <target state="translated">下面的示例中所示，可以将脚本块分配给一个变量︰</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = {param ($uu = "Parameter"); "$uu assigned."}</source>
          <target state="translated">C:\PS &gt; $a = {param ($uu ="参数");"$uu 分配。"}</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can use the variable with a cmdlet such as Invoke-Command, as shown in the following example:</source>
          <target state="translated">可以使用 Invoke-command，如 cmdlet 使用变量，如下面的示例中所示︰</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -scriptblock $a -args "Other value" Other value assigned.</source>
          <target state="translated">C:\PS &gt; 调用命令 scriptblock $a-args"其他"其他值分配的值。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can run a script block that is assigned to a variable by using the call operator (&amp;), as shown in the following example:</source>
          <target state="translated">您可以运行通过使用调用运算符 (&amp;)，如下面的示例中所示赋给变量的脚本块︰</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; &amp;$a Parameter assigned.</source>
          <target state="translated">C:\PS &gt; &amp;$ 参数赋值。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can also provide a parameter to the script block, as shown in the following example:</source>
          <target state="translated">此外可以提供脚本块中，一个参数，如下面的示例中所示︰</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; &amp;$a "Other value" Other value assigned.</source>
          <target state="translated">C:\PS &gt; &amp;$"其他分配的值"其他值。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you want to assign the value that is created by a script block to a variable, use the call operator to run the script block directly, as shown in the following example:</source>
          <target state="translated">如果您想要分配给一个变量的脚本块由创建的值，用于调用运算符直接运行该脚本块中下面的示例所示︰</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = &amp;{param ($uu = "Parameter"); "$uu assigned."}</source>
          <target state="translated">C:\PS &gt; $a = &amp; {param ($uu ="参数");"$uu 分配。"}</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a Parameter assigned.</source>
          <target state="translated">C:\PS &gt; $ 参数赋值。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information about the call operator, see about_Operators.</source>
          <target state="translated">有关调用运算符的详细信息，请参阅 about_Operators。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>about_Functions about_Functions_Advanced about_Operators</source>
          <target state="translated">about_Functions about_Functions_Advanced about_Operators</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>