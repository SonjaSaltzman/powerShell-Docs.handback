<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4cd8b9cdfbeb77ab2d209c1153091bd8dae5ce4d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Variables.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a9e9fdfbaa1739df9e4336a538b6835955c40332</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7622ae399e04da9dadd862070e13e0bf821557b3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Variables</source>
          <target state="translated">about_Variables</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Variables</source>
          <target state="translated">有关变量</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Variables</source>
          <target state="translated">about_Variables</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Variables</source>
          <target state="translated">about_Variables</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">简短说明</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes how variables store values that can be used in  Windows PowerShell�.</source>
          <target state="translated">描述如何变量将存储在 Windows PowerShell 中可用的值。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">详细说明</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can store all types of values in  Windows PowerShell variables.</source>
          <target state="translated">可以在 Windows PowerShell 变量中存储所有类型的值。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>They are typically used to store the results of commands and to store elements that are used in commands and expressions, such as names, paths, settings, and values.</source>
          <target state="translated">它们通常用于存储的命令的结果和将使用的元素存储在命令和表达式，如名称、 路径、 设置和值。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A variable is a unit of memory in which values are stored.</source>
          <target state="translated">变量是的内存中的存储值的单位。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In  Windows PowerShell, variables are represented by text strings that begin with a dollar sign ($), such as $a, $process, or $my_var.</source>
          <target state="translated">在 Windows PowerShell 中，变量由以美元符号 （$），如 $a $process，开头的文本字符串或 $my_var。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Variable names are not case-sensitive.</source>
          <target state="translated">变量名称不区分大小写。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Variable names can include spaces and special characters, but these are difficult to use and should be avoided.</source>
          <target state="translated">变量名称可以包含空格和特殊字符，但这些很难使用，因此应当避免。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>There are several different types of variables in  Windows PowerShell.</source>
          <target state="translated">有多种不同类型的 Windows PowerShell 中的变量。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>-- User-created variables: User-created variables are created and maintained by the user.</source>
          <target state="translated">-用户创建的变量︰ 用户创建的变量是由创建和维护用户。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>By default, the variables that you create at the  Windows PowerShell command line exist only while the  Windows PowerShell window is open, and they are lost when you close the window.</source>
          <target state="translated">默认情况下，在 Windows PowerShell 命令行创建的变量存在仅在 Windows PowerShell 窗口处于打开状态，并在关闭窗口时，它们会丢失时。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To save a variable, add it to your  Windows PowerShell profile.</source>
          <target state="translated">若要保存一个变量，请将其添加到 Windows PowerShell 配置文件中。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can also create variables in scripts with global, script, or local scope.-- Automatic variables: Automatic variables store the state of  Windows PowerShell.</source>
          <target state="translated">您还可以创建变量在脚本中的包含全局、 脚本或本地作用域。--自动变量︰ 自动变量存储 Windows PowerShell 的状态。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These variables are created by  Windows PowerShell, and  Windows PowerShell changes their values as required to maintain their accuracy.</source>
          <target state="translated">这些变量创建由 Windows PowerShell 和 Windows PowerShell 更改其值作为需要维护其准确性。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Users cannot change the value of these variables.</source>
          <target state="translated">用户无法更改这些变量的值。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, the $PSHome variable stores the path to the  Windows PowerShell installation directory.</source>
          <target state="translated">例如，$PSHome 变量存储对 Windows PowerShell 安装目录的路径。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information, a list, and a description of the automatic variables, see about_Automatic_Variables.</source>
          <target state="translated">有关详细信息、 列表和自动变量的说明，请参阅 about_Automatic_Variables。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>-- Preference variables: Preference variables store user preferences for  Windows PowerShell.</source>
          <target state="translated">-首选项变量︰ 首选项变量存储用户首选项适用于 Windows PowerShell。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These variables are created by  Windows PowerShell and are populated with default values.</source>
          <target state="translated">这些变量由 Windows PowerShell 创建和使用默认值填充。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Users can change the values of these variables.</source>
          <target state="translated">用户可以更改这些变量的值。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, the $MaximumHistoryCount variable determines the maximum number of entries in the session history.</source>
          <target state="translated">例如，$MaximumHistoryCount 变量确定会话历史记录中的最大项数。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, a list, and a description of the preference variables, see about_Preference_Variables.</source>
          <target state="translated">有关详细信息、 列表和首选项变量的说明，请参阅 about_Preference_Variables。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>WORKING WITH VARIABLES</source>
          <target state="translated">使用变量</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To create a new variable, use an assignment statement to assign a value to the variable.</source>
          <target state="translated">若要创建新变量，请使用赋值语句将值分配给该变量。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You do not have to declare the variable  before using it.</source>
          <target state="translated">不需要声明变量，然后再使用它。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The default value of all variables is $null.</source>
          <target state="translated">所有变量的默认值是 $null。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Variables are very useful for storing the results of commands.</source>
          <target state="translated">变量是用于存储的命令的结果非常有用。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To display the value of a variable, type the variable name, preceded by a dollar sign ($).</source>
          <target state="translated">若要显示的变量的值，请键入前面加美元符号 （$） 的变量名称。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To change the value of a variable, assign a new value to the variable.</source>
          <target state="translated">若要更改变量的值，请为变量分配新值。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following examples displays the value of the $MyVariable variable, changes the value of the variable, and then displays the new value.</source>
          <target state="translated">下面的示例显示 $MyVariable 变量的值，该变量的值更改，然后显示新值。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To delete the value of a variable, use the Clear-Variable cmdlet or change the value to $null.</source>
          <target state="translated">若要删除的变量值，使用 Clear-variable cmdlet，或将值更改为 $null。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To delete the variable, use the Remove-Variable or Remove-Item cmdlets.</source>
          <target state="translated">若要删除的变量，使用删除 Remove-variable 或 Remove-item cmdlet。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>(These cmdlets are discussed later in this topic.)</source>
          <target state="translated">（这些 cmdlet 将讨论此主题后面部分中。）</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To get a list of all of the variables in your  Windows PowerShell session, type:</source>
          <target state="translated">若要获取 Windows PowerShell 会话中的所有变量的列表，请键入︰</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>TYPES OF VARIABLES</source>
          <target state="translated">类型的变量</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can store any type of object in a variable, including integers, strings, arrays, hash tables, and objects that represent processes, services, event logs, and computers.</source>
          <target state="translated">可以将任何类型的对象存储在变量中，包括整数、 字符串、 数组、 哈希表，以及这些对象表示进程、 服务、 事件日志和计算机。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Windows PowerShell variables are "loosely typed," which means that they are not limited to a particular type of object.</source>
          <target state="translated">Windows PowerShell 变量是"松散类型，"这意味着它们并不局限于特定类型的对象。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A single variable can even contain a collection (an "array") of different types of objects at the same time.</source>
          <target state="translated">单个变量甚至可以包含不同类型的对象集合 （一个"数组"） 在同一时间。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The data type of a variable, which is a .NET Framework type, is determined by the .NET types of the values of the variable.</source>
          <target state="translated">一个变量，即.NET Framework 类型的数据类型由.NET 类型的变量的值确定。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can use a type attribute and cast notation to ensure that a variable can contain only objects of the specified type or objects that can be converted to that type.</source>
          <target state="translated">可以使用类型属性，并强制转换表示法以确保一个变量可以包含只指定类型的对象或可以转换为该类型的对象。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you try to assign a value of another type,  Windows PowerShell tries to convert the value to its type.</source>
          <target state="translated">如果您尝试分配另一种类型的值，Windows PowerShell 会尝试将值转换为它的类型。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If it cannot, the assignment statement fails.</source>
          <target state="translated">如果不能转换，赋值语句将失败。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To use cast notation, enter a type name, enclosed in brackets, before the variable name (on the left side of the assignment statement).</source>
          <target state="translated">若要使用强制转换表示法，输入类型名称，括在方括号内，（在赋值语句的左侧） 的变量名称之前。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following example creates an $number variable that can contain only integers, a $words variable that can contain only strings, and a $dates variable that can contain only DateTime objects.</source>
          <target state="translated">下面的示例创建了一个 $number 变量可以包含整数、 可以只包含字符串，一个 $words 变量和一个 $dates 变量，可以只包含 DateTime 对象。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>USING VARIABLES IN COMMANDS AND EXPRESSIONS</source>
          <target state="translated">使用命令和表达式中的变量</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To use a variable in a command or expression, type the variable name, preceded by the dollar sign ($).</source>
          <target state="translated">若要使用的命令或表达式中的变量，请键入前面加美元符号 （$） 的变量名称。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the variable name (and dollar sign) are not enclosed in quotation marks, or if they are enclosed in double quotation marks ("), the value of the variable is used in the command or expression.</source>
          <target state="translated">如果变量名 （和美元符号） 没有包含在引号中，或者它们括在双引号 （"），该变量的值是命令或表达式中使用。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If the variable name (and dollar sign) are enclosed in single quotation marks, ('), the variable name is used in the expression.</source>
          <target state="translated">如果变量名 （和美元符号） 括在单引号 （'） 是在表达式中使用变量的名称。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, the first command gets the value of the $profile variable, which is the path to the  Windows PowerShell user profile file in the  Windows PowerShell console.</source>
          <target state="translated">例如，第一个命令获取 $profile 变量，这是在 Windows PowerShell 控制台中的 Windows PowerShell 用户配置文件的文件的路径的值。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The second command opens the file in Notepad, and the  third and fourth commands use the name of the variable in an expression.</source>
          <target state="translated">第二个命令将在记事本中打开该文件并第三个和第四个命令在表达式中使用变量的名称。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For more information about using quotation marks in  Windows PowerShell, see about_Quoting_Rules.</source>
          <target state="translated">有关在 Windows PowerShell 中使用引号引起来的详细信息，请参阅 about_Quoting_Rules。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>VARIABLE NAMES THAT INCLUDE SPECIAL CHARACTERS</source>
          <target state="translated">包含特殊字符的变量名称</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Variable names begin with a dollar sign.</source>
          <target state="translated">变量名称以美元符号开头。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>They can include alphanumeric characters and special characters.</source>
          <target state="translated">它们可以包含字母数字字符和特殊字符。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The length of the variable name is limited only by available memory.</source>
          <target state="translated">变量名的长度限制只受可用内存。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Whenever possible, variable names should include only alphanumeric characters and the underscore character (_).Variable names that include spaces and other special characters, are difficult to use and should be avoided.</source>
          <target state="translated">只要有可能，应包括变量名，仅字母数字字符和下划线字符 (_)。变量名称中包含空格和其他特殊字符，很难使用，因此应当避免。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To create or display a variable name that includes spaces or special characters, enclose the variable name in braces.</source>
          <target state="translated">若要创建或显示包含空格或特殊字符的变量名称，将变量名称括在大括号中。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This directs  Windows PowerShell to interpret the characters in the variable name literally.</source>
          <target state="translated">这指示 Windows PowerShell，若要按其原义解释变量名称中的字符。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For example, the following command creates and then displays a variable named "save-items".</source>
          <target state="translated">例如，以下命令创建，然后显示名为"保存项"的变量。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following command gets the child items in the directory that is represented by the "ProgramFiles(x86)" environment variable.</source>
          <target state="translated">下面的命令"programfiles （x86）"环境变量所表示的目录中获取的子项目。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To refer to a variable name that includes braces, enclose the variable name in braces, and use the backtick (escape) character to escape the braces.</source>
          <target state="translated">若要引用包含大括号的变量名，将变量的名称括在括号内，并使用反引号 （转义） 字符进行转义大括号。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For example, to create a variable named "this{value}is" with a value of 1, type:</source>
          <target state="translated">例如，若要创建名为"此 {value} 原样"的值为 1 的变量，请键入︰</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>VARIABLES AND SCOPE</source>
          <target state="translated">变量和作用域</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>By default, variables are available only in the scope in which they are created.</source>
          <target state="translated">默认情况下，变量可以仅在创建它们的作用域中都可用。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For example, a variable that you create in a function is available only within the function.</source>
          <target state="translated">例如，在函数中创建的变量是仅在函数内可用。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A variable that you create in a script is available only within the script (unless you dot-source the script, which adds it to the current scope).</source>
          <target state="translated">在脚本中创建的变量是仅在脚本内可用 (除非该脚本，将其添加到当前范围内源圆点)。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can use a scope modifier to change the default scope of the variable.</source>
          <target state="translated">作用域修饰符用于更改变量的默认作用域。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The following expression creates a variable named "Computers".</source>
          <target state="translated">下面的表达式创建名为"计算机"的变量。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The variable has a global scope, even when it is created in a script or function.</source>
          <target state="translated">该变量具有全局作用域，即使它在脚本或函数中创建。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For more information, see about_Scopes.</source>
          <target state="translated">有关详细信息，请参阅 about_Scopes。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>SAVING VARIABLES</source>
          <target state="translated">保存变量</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Variables that you create are available only in the session in which you create them.</source>
          <target state="translated">您创建的变量是仅在创建它们的会话中可用。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>They are lost when you close your session.</source>
          <target state="translated">关闭您的会话时，它们都会丢失。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>To create the in every  Windows PowerShell session that you start, add the variable to your  Windows PowerShell profile.</source>
          <target state="translated">若要创建在每个 Windows PowerShell 会话中启动时，将变量添加到 Windows PowerShell 配置文件。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For example, to change the value of the $VerbosePreference variable in every  Windows PowerShell session, add the following command to your  Windows PowerShell profile.</source>
          <target state="translated">例如，若要在每个 Windows PowerShell 会话中更改 $VerbosePreference 变量的值，将以下命令添加到 Windows PowerShell 配置文件中。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You can add this command to your profile by opening the profile file in a text editor, such as Notepad.</source>
          <target state="translated">通过在诸如记事本之类的文本编辑器中打开该配置文件，可以将此命令添加到您的个人资料。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For more information about  Windows PowerShell profiles, see about_profiles.</source>
          <target state="translated">有关 Windows PowerShell 配置文件的详细信息，请参阅 about_profiles。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>THE VARIABLE: DRIVE</source>
          <target state="translated">该变量︰ 驱动器</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Windows PowerShell Variable provider creates a Variable: drive that looks and acts like a file system drive, but it contains the variables in your session and their values.</source>
          <target state="translated">Windows PowerShell Variable 提供程序创建一个变量︰ 驱动器，看起来像文件系统驱动器中，但它在您的会话和它们的值中包含的变量。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>To change to the variable: drive, type:</source>
          <target state="translated">若要将更改为该变量︰ 驱动器中，键入︰</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>To list the items (variables) in the Variable: drive, use the Get-Item or Get-ChildItem cmdlets.</source>
          <target state="translated">若要列出在变量中的项 （变量）︰ 驱动器中，使用 Get-item 或 Get-childitem cmdlet。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>To get the value of a particular variable, use file system notation to specify the name of the drive and the name of the variable.</source>
          <target state="translated">若要获取特定的变量的值，请使用文件系统表示法指定的驱动器名和变量的名称。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For example, to get the $PSCulture automatic variable, use the following command.</source>
          <target state="translated">例如，若要获取 $PSCulture 自动变量，请使用以下命令。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For more information about the Variable: drive and the  Windows PowerShell Variable provider, type "get-help variable".</source>
          <target state="translated">有关变量的详细信息︰ 驱动器和 Windows PowerShell Variable 提供程序，键入"get-help 变量"。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>THE VARIABLE CMDLETS</source>
          <target state="translated">变量的 CMDLET</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Windows PowerShell includes a set of cmdlets that are designed to manage variables.</source>
          <target state="translated">Windows PowerShell 包括一组 cmdlet，旨在管理变量。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>To get help for these cmdlets, type: "Get-Help &lt;cmdlet-hame&gt;".</source>
          <target state="translated">若要获得这些 cmdlet 的帮助，请键入:"获取帮助 &lt; cmdlet 名 &gt;"。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>about_Automatic_Variables</source>
          <target state="translated">about_Automatic_Variables</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>about_Environment_Variables</source>
          <target state="translated">about_Environment_Variables</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>about_Preference_Variables</source>
          <target state="translated">about_Preference_Variables</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>about_Profiles</source>
          <target state="translated">about_Profiles</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>about_Quoting_Rules</source>
          <target state="translated">about_Quoting_Rules</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>about_Scopes</source>
          <target state="translated">about_Scopes</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>