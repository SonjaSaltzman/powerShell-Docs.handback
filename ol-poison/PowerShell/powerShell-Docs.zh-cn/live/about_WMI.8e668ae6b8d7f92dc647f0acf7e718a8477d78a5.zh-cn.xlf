<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26170559e1720c3afb90a7bc461c8e183fc4d8f1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\About\about_WMI.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b047983fdfaf27f698326c9310e47b7f02609e6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">68b540d4c9f6790f17e57e1b9cd515304fd0953d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_WMI</source>
          <target state="translated">about_WMI</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About WMI</source>
          <target state="translated">有关 WMI</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_WMI</source>
          <target state="translated">about_WMI</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_WMI</source>
          <target state="translated">about_WMI</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">简短说明</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Windows Management Instrumentation (WMI) uses the Common Information Model (CIM) to represent systems, applications, networks, devices, and other manageable components of the modern enterprise.</source>
          <target state="translated">Windows Management Instrumentation (WMI) 使用通用信息模型 (CIM) 来表示系统、 应用程序、 网络、 设备和现代企业其他可管理组件。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">详细说明</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Windows Management Instrumentation (WMI) is Microsoft’s implementation of Web-Based Enterprise Management (WBEM), the industry standard.</source>
          <target state="translated">Windows Management Instrumentation (WMI) 是 Microsoft 的基于 Web 的企业管理 (WBEM) 行业标准的实现。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Classic WMI uses DCOM to communicate with networked devices to manage remote systems.</source>
          <target state="translated">经典 WMI 使用 DCOM 与联网设备来管理远程系统进行通信。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Windows PowerShell� 3.0 introduces a CIM provider model that uses WinRM to remove the dependency on DCOM.</source>
          <target state="translated">Windows PowerShell 3.0 引入了使用 WinRM 来删除对 DCOM 的依赖关系的 CIM 提供程序模型。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This CIM provider model also uses new WMI provider APIs that enable developers to write  Windows PowerShell cmdlets in native code (C<ph id="ph1">\+\+</ph>).</source>
          <target state="translated">此 CIM 提供程序模型也使用新的 WMI 提供程序 Api，使开发人员能够在本机代码中编写 Windows PowerShell cmdlet (C<ph id="ph1">\+\+</ph>)。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Do not confuse WMI providers with  Windows PowerShell providers.</source>
          <target state="translated">不要混淆通过 Windows PowerShell 提供程序使用的 WMI 提供程序。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Many Windows features have an associated WMI provider that exposes their management capabilities.</source>
          <target state="translated">多个 Windows 功能具有关联的 WMI 提供程序公开其管理功能。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To get WMI providers, run a WMI query that gets instances of the __Provider WMI class, such as the following query.</source>
          <target state="translated">若要获取 WMI 提供程序，请运行 WMI 查询用于获取 __Provider WMI 类，如下面的查询实例。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>THREE COMPONENTS OF WMI</source>
          <target state="translated">WMI 的三个组件</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following three components of WMI interact with  Windows PowerShell: Namespaces, Providers, and Classes.</source>
          <target state="translated">WMI 的以下三个组件与 Windows PowerShell 进行交互︰ 命名空间、 提供商和类。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>WMI Namespaces organize WMI providers and WMI classes into groups of related components.</source>
          <target state="translated">WMI 命名空间的 WMI 提供程序和 WMI 类组织成相关组件的组。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In this way, they are similar to .NET Framework namespaces.</source>
          <target state="translated">在这种方式，它们是类似于.NET Framework 命名空间。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Namespaces are not physical locations, but are more like logical databases.</source>
          <target state="translated">命名空间不是物理位置，而是更像是逻辑数据库。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>All WMI namespaces are instances of the __Namespace system class.</source>
          <target state="translated">所有 WMI 命名空间都是 __Namespace 系统类的实例。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The default WMI namespace is Root<ph id="ph1">\/</ph>CIMV2 (since Microsoft Windows 2000).</source>
          <target state="translated">默认的 WMI 命名空间是根<ph id="ph1">\/</ph>CIMV2 （自 Microsoft Windows 2000)。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To use  Windows PowerShell to get WMI namespaces in the current session, use a command with the following format.</source>
          <target state="translated">若要使用 Windows PowerShell 来获取当前会话中的 WMI 命名空间，请使用以下格式使用命令。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To get WMI namespaces in other namespaces, use the Namespace parameter to change the location of the search.</source>
          <target state="translated">若要获取其他命名空间中的 WMI 命名空间，使用 Namespace 参数更改搜索位置。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following command finds WMI namespaces that reside in the Root<ph id="ph1">\/</ph>Cimv2<ph id="ph2">\/</ph>Applications namespace.</source>
          <target state="translated">以下命令将查找驻留在根目录的 WMI 命名空间<ph id="ph1">\/</ph>Cimv2<ph id="ph2">\/</ph>应用程序命名空间。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>WMI namespaces are hierarchical.</source>
          <target state="translated">WMI 命名空间具有层次结构。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Therefore, obtaining a list of all namespaces on a particular system requires performing a recursive query starting at the root namespace.</source>
          <target state="translated">因此，获取特定系统上的所有命名空间的列表，需要执行递归查询开头的根命名空间。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>WMI Providers expose information about Windows manageable objects.</source>
          <target state="translated">WMI 提供程序公开 Windows 可管理的对象有关的信息。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A provider retrieves data from a component, and passes that data through WMI to a management application, such as  Windows PowerShell.</source>
          <target state="translated">一个提供程序从一个组件，检索数据，并通过 WMI 的该数据传递给一个管理应用程序，如 Windows PowerShell。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Most WMI providers are dynamic providers, which means that they obtain the data dynamically when it is requested through the management application.</source>
          <target state="translated">多数 WMI 提供程序是动态的提供程序，这意味着，它们将数据动态地获得请求通过管理应用程序时。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>FINDING WMI CLASSES</source>
          <target state="translated">查找 WMI 类</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In a default installation of Windows 8, there are more than 1,100 WMI classes in Root<ph id="ph1">\/</ph>Cimv2.</source>
          <target state="translated">在 Windows 8 的默认安装，1100 多个 WMI 类中有根<ph id="ph1">\/</ph>Cimv2。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>With this many WMI classes, the challenge becomes identifying the appropriate WMI class to use to perform a specific task.</source>
          <target state="translated">有这么多的 WMI 类，面临的挑战也是用于标识相应的 WMI 类，用于执行特定任务。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Windows PowerShell 3.0 provides two ways to find WMI classes that are related to a specific topic.</source>
          <target state="translated">Windows PowerShell 3.0 提供了两种方法可以查找与某个特定主题相关的 WMI 类。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example,to find WMI classes in the root\CIMV2 WMI namespace that are related to disks, you can use a query such as the one shown here.</source>
          <target state="translated">例如，若要查找与磁盘相关的 root\CIMV2 WMI 命名空间中的 WMI 类，可以使用如下所示的查询。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To find WMI classes that are related to memory, you might use a query such as the one shown here.</source>
          <target state="translated">若要查找与内存相关的 WMI 类，您可以使用如下所示的查询。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The CIM cmdlets also provide the ability to discover WMI classes.</source>
          <target state="translated">CIM cmdlet 还提供可发现的 WMI 类。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To do this, use the Get-CIMClass cmdlet.</source>
          <target state="translated">若要执行此操作，使用 Get CIMClass cmdlet。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The command shown here lists WMI classes related to video.</source>
          <target state="translated">此处显示列表的 WMI 类的命令与相关视频。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Tab expansion works when changing WMI namespaces, and therefore use of tab expansion makes sub-WMI namespaces easily discoverable.</source>
          <target state="translated">更改 WMI 命名空间时按 tab 扩展的工作方式，并使用选项卡展开，因此使得子 WMI 命名空间轻易发现。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the following example, the Get-CimClass cmdlet lists WMI classes related to power settings.</source>
          <target state="translated">在下面的示例中，Get CimClass cmdlet 将列出与电源设置相关的 WMI 类。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To find it, type the root<ph id="ph1">\/</ph>CIMV2<ph id="ph2">\/</ph> WMI namespace, and then press type the root<ph id="ph3">\/</ph>CIMV2<ph id="ph4">\/</ph> WMI namespace, and then press the Tab key several times until the power namespace appears.</source>
          <target state="translated">若要找到它，请键入根<ph id="ph1">\/</ph>CIMV2<ph id="ph2">\/</ph> WMI 命名空间，再按键入根<ph id="ph3">\/</ph>CIMV2<ph id="ph4">\/</ph> WMI 命名空间，然后按选项卡密钥直到电源命名空间出现多次。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Here is the command:</source>
          <target state="translated">下面是命令︰</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>